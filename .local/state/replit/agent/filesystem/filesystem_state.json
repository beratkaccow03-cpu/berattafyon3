{"file_contents":{"README.md":{"content":"# Afyonlu \n# Berat Çakıroğlu \n# Ders Analiz/Takip Projesi\n\n![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)\n\nBu proje MIT Lisansı kapsamında korunmaktadır. Proje kodları, dokümantasyonu ve tüm yazılım bileşenleri, yalnızca orijinal yazar tarafından sağlanan izin doğrultusunda kullanılabilir.  \n\nHerhangi bir üçüncü tarafın, yazılımı kopyalaması, dağıtması, çoğaltması veya değiştirmesi durumunda, önceden yazılı izin alınması zorunludur. Özellikle projenin isimlendirilmesinde veya yazarlık bilgilerinde değişiklik yapmak, orijinal yazarın adı belirtilmeden kullanım yapmak kesinlikle yasaktır.  \n\nBu lisans koşullarının ihlali, ilgili yasal mevzuat çerçevesinde ciddi hukuki sorumluluk doğurur. Projenin izinsiz kullanımı veya çoğaltılması tespit edildiğinde, telif hakları ve lisans hükümleri doğrultusunda gerekli tüm yasal adımlar atılacaktır.  \n\nKullanıcıların projeyi kullanmadan önce lisans metnini dikkatle okumaları ve belirtilen koşullara tamamen uymaları beklenmektedir. Projenin amacı, eğitim ve analiz süreçlerini geliştirmek olup, herhangi bir ticari kullanım veya izinsiz dağıtım yasalara aykırıdır.\n","size_bytes":1223},"drizzle.config.ts":{"content":"// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\nimport { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n","size_bytes":445},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Berat Çakıroğlu - Ders Analiz/Takip Projesi\n\n## Project Overview\nThis is a full-stack TypeScript study tracking and analysis application designed for exam preparation (TYT/AYT - Turkish university entrance exams). The application helps students track tasks, study progress, exam results, and provides analytics.\n\n## Current State\n- ✅ Successfully imported from GitHub and configured for Replit environment\n- ✅ Application running smoothly on port 5000\n- ✅ Using in-memory storage (MemStorage) for development\n- ✅ All dependencies installed and working\n- ✅ Development workflow configured with webview output\n- ✅ Deployment configuration ready (autoscale mode)\n- ✅ Frontend proxy configuration verified (allowedHosts: true)\n- ✅ Vite HMR working correctly\n- ⚠️ Minor TypeScript warnings in schema.ts (drizzle-zod compatibility - does not affect runtime)\n\n## Tech Stack\n- **Frontend**: React 18 + Vite + TypeScript\n- **Backend**: Express.js + TypeScript\n- **UI Components**: Radix UI + Tailwind CSS\n- **Styling**: Tailwind CSS with custom theme\n- **Database**: PostgreSQL (Drizzle ORM) - Schema ready, currently using in-memory storage\n- **Build Tools**: Vite (frontend), esbuild (backend)\n- **Package Manager**: npm\n\n## Project Structure\n- `client/` - React frontend application\n  - `src/components/` - UI components (widgets, modals, charts)\n  - `src/pages/` - Page components (dashboard, timer, calculator)\n  - `src/lib/` - Utilities and query client\n  - `src/styles/` - Custom CSS styles\n- `server/` - Express backend\n  - `index.ts` - Main server entry point\n  - `routes.ts` - API routes (tasks, moods, goals, logs, exams)\n  - `storage.ts` - Storage interface and in-memory implementation\n  - `vite.ts` - Vite dev server setup\n- `shared/` - Shared TypeScript schemas and types\n  - `schema.ts` - Drizzle ORM schemas and Zod validation\n\n## Key Features\n- Task management with categories (TYT/AYT subjects)\n- Mood tracking with emoji support\n- Study goals tracking (TYT, AYT, ranking goals)\n- Question logs and analytics\n- Exam results tracking with detailed subject breakdown\n- Weather widget (OpenWeather API integration)\n- PDF report generation\n- Flashcards system\n- Net score calculator\n- Countdown timer\n- Advanced charts and analytics\n\n## Development\n- Run: `npm run dev` (port 5000)\n- Build: `npm run build`\n- Start prod: `npm run start`\n- Type check: `npm run check`\n- Database push: `npm run db:push`\n\n## Deployment\n- Deployment type: **autoscale** (stateless, suitable for web apps)\n- Build command: `npm run build`\n- Run command: `npm run start`\n- Port: 5000\n\n## Environment Configuration\n- Frontend host: 0.0.0.0:5000 (configured for Replit proxy)\n- Backend: Integrated with frontend on same port\n- Allowed hosts: true (proxy support enabled in vite.config.ts)\n- HMR: Enabled on port 5000\n- Database: PostgreSQL provisioned with DATABASE_URL environment variable\n\n## Database Notes\n- PostgreSQL database provisioned and schema pushed successfully\n- Currently using in-memory storage (MemStorage class) for rapid development\n- Database schema fully defined in `shared/schema.ts` with all tables:\n  - tasks, moods, goals, questionLogs, examResults, examSubjectNets, flashcards\n- To migrate to PostgreSQL: Update `server/storage.ts` to use Drizzle ORM instead of MemStorage\n- All insert schemas and types are defined and ready to use\n\n## API Routes\nAll API endpoints are defined in `server/routes.ts`:\n- Tasks: GET/POST/PUT/PATCH/DELETE /api/tasks\n- Moods: GET/POST /api/moods\n- Goals: GET/POST/PUT/DELETE /api/goals\n- Question Logs: GET/POST/DELETE /api/question-logs\n- Exam Results: GET/POST/DELETE /api/exam-results\n- Subject Stats: GET /api/topic-stats, /api/priority-topics, /api/subject-solved-stats\n- PDF Reports: POST /api/generate-pdf-report\n\n## Recent Changes (2025-09-30)\n- ✅ Fresh GitHub import setup completed for Replit environment\n- ✅ Configured development workflow (\"Start application\" on port 5000 with webview output)\n- ✅ Set up deployment configuration (autoscale mode) for production\n- ✅ Verified frontend/backend integration working properly\n- ✅ Application running smoothly with in-memory storage\n- ✅ All dependencies pre-installed and working correctly\n- ✅ Vite HMR properly configured with proxy support (allowedHosts: true in vite.config.ts)\n- ✅ Server bound to 0.0.0.0:5000 for Replit compatibility\n- ✅ Improved schema type definitions for better code clarity\n- ℹ️ Minor TypeScript warnings present in drizzle-zod schemas (runtime unaffected)\n\n## Notes\n- Application is in Turkish language\n- Designed for Turkish university entrance exams (TYT/AYT)\n- Uses custom purple theme with dark mode support\n- Ready for production deployment\n","size_bytes":4714},"tailwind.config.ts":{"content":"// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n\nimport type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n// BERAT ÇAKIROĞLu\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n","size_bytes":2937},"vite.config.ts":{"content":"// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n\nimport { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig({\n  plugins: [\n    react()\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    host: \"0.0.0.0\",\n    port: 5000,\n    hmr: {\n      port: 5000,\n    },\n    allowedHosts: true,\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n","size_bytes":852},"server/index.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// basit loglama middleware\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Dersime dönebilirim !!! Site Link : http://localhost:${port}`);\n  });\n})();\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1949},"server/routes.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport {\n  insertTaskSchema,\n  insertMoodSchema,\n  insertGoalSchema,\n  insertQuestionLogSchema,\n  insertExamResultSchema,\n  insertFlashcardSchema,\n  insertExamSubjectNetSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport dotenv from \"dotenv\";\nimport { PDFDocument, rgb, StandardFonts } from \"pdf-lib\";\nimport PDFKit from \"pdfkit\";\nimport nodemailer from \"nodemailer\";\nimport fs from \"fs\";\nimport path from \"path\";\ndotenv.config();\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Görev routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const validatedData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid task data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create task\" });\n      }\n    }\n  });\n\n  app.put(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertTaskSchema.partial().parse(req.body);\n      const task = await storage.updateTask(id, validatedData);\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      res.json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid task data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update task\" });\n      }\n    }\n  });\n\n  app.patch(\"/api/tasks/:id/toggle\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.toggleTaskComplete(id);\n\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to toggle task completion\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteTask(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Ruh hali routes\n  app.get(\"/api/moods\", async (req, res) => {\n    try {\n      const moods = await storage.getMoods();\n      res.json(moods);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch moods\" });\n    }\n  });\n\n  app.get(\"/api/moods/latest\", async (req, res) => {\n    try {\n      const mood = await storage.getLatestMood();\n      res.json(mood);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch latest mood\" });\n    }\n  });\n\n  app.post(\"/api/moods\", async (req, res) => {\n    try {\n      const validatedData = insertMoodSchema.parse(req.body);\n      const mood = await storage.createMood(validatedData);\n      res.status(201).json(mood);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid mood data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create mood\" });\n      }\n    }\n  });\n\n  // raporlarım ve takvim kısmı routes\n  app.get(\"/api/summary/daily\", async (req, res) => {\n    try {\n      const range = parseInt(req.query.range as string) || 30;\n      const summary = await storage.getDailySummary(range);\n      res.json(summary);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch daily summary\" });\n    }\n  });\n\n  app.get(\"/api/calendar/:date\", async (req, res) => {\n    try {\n      const { date } = req.params; // YYYY-AA-GG format\n      const tasksForDate = await storage.getTasksByDate(date);\n\n      // günlük kalan gün sayısı hesaplama\n      const today = new Date();\n      const targetDate = new Date(date);\n\n      // Her iki tarihi de karşılaştırmak için gece yarısına ayarlama\n      today.setHours(0, 0, 0, 0);\n      targetDate.setHours(0, 0, 0, 0);\n\n      const diffTime = targetDate.getTime() - today.getTime();\n      const diffDays = Math.round(diffTime / (1000 * 60 * 60 * 24));\n\n      res.json({\n        date,\n        dayNumber: targetDate.getDate(),\n        daysRemaining: diffDays,\n        tasks: tasksForDate,\n        tasksCount: tasksForDate.length,\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch calendar data\" });\n    }\n  });\n\n  // NET HESAPLAMA\n  app.post(\"/api/calculate-ranking\", async (req, res) => {\n    try {\n      const { nets, year } = req.body;\n\n      // nets objesi örneği:\n      let tytNets = 0;\n      let aytNets = 0;\n\n      // TYT neti hesaplama\n      if (nets?.tyt) {\n        const tyt = nets.tyt;\n        tytNets =\n          (parseFloat(tyt.turkce) || 0) +\n          (parseFloat(tyt.sosyal) || 0) +\n          (parseFloat(tyt.matematik) || 0) +\n          (parseFloat(tyt.fen) || 0);\n      }\n\n      // AYT neti hesaplama\n      if (nets?.ayt) {\n        const ayt = nets.ayt;\n        aytNets =\n          (parseFloat(ayt.matematik) || 0) +\n          (parseFloat(ayt.fizik) || 0) +\n          (parseFloat(ayt.kimya) || 0) +\n          (parseFloat(ayt.biyoloji) || 0);\n      }\n\n      // 2023-2025 YKS sıralama verileri (yaklaşık değerler)\n      //burası kullanılmayacak\n      const rankingData: Record<string, any> = {\n        \"2023\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            350: 1000,\n            320: 5000,\n            300: 10000,\n            280: 20000,\n            260: 35000,\n            240: 50000,\n            220: 75000,\n            200: 100000,\n            180: 150000,\n            160: 200000,\n          },\n        },\n        \"2024\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            360: 1000,\n            330: 5000,\n            310: 10000,\n            290: 20000,\n            270: 35000,\n            250: 50000,\n            230: 75000,\n            210: 100000,\n            190: 150000,\n            170: 200000,\n          },\n        },\n        \"2025\": {\n          tytWeight: 0.4,\n          aytWeight: 0.6,\n          rankings: {\n            355: 1000,\n            325: 5000,\n            305: 10000,\n            285: 20000,\n            265: 35000,\n            245: 50000,\n            225: 75000,\n            205: 100000,\n            185: 150000,\n            165: 200000,\n          },\n        },\n      };\n\n      const yearData = rankingData[year] || rankingData[\"2024\"];\n\n      // numarasal hatalara karşı kontrol\n      if (isNaN(tytNets)) tytNets = 0;\n      if (isNaN(aytNets)) aytNets = 0;\n\n      // Net'i puana çevirme (yaklaşık formül)\n      const tytScore = tytNets * 4; // Her doğru ~4 puan\n      const aytScore = aytNets * 4; // Her doğru ~4 puan\n\n      // Ağırlıklı toplam puan\n      const totalScore =\n        tytScore * yearData.tytWeight + aytScore * yearData.aytWeight;\n\n      // En yakın sıralamayı bul\n      let estimatedRanking = 500000; // Varsayılan\n      const scores = Object.keys(yearData.rankings)\n        .map(Number)\n        .sort((a, b) => b - a);\n\n      for (const score of scores) {\n        if (totalScore >= score) {\n          estimatedRanking = yearData.rankings[score];\n          break;\n        }\n      }\n\n      res.json({\n        tytScore: tytScore.toFixed(2),\n        aytScore: aytScore.toFixed(2),\n        totalScore: totalScore.toFixed(2),\n        estimatedRanking,\n        year,\n        methodology: \"2023-2025 YKS verilerine dayalı tahmin\",\n      });\n    } catch (error) {\n      console.error(\"Ranking calculation error:\", error);\n      res.status(500).json({ message: \"Sıralama hesaplanamadı\" });\n    }\n  });\n\n  // Goal routes\n  app.get(\"/api/goals\", async (req, res) => {\n    try {\n      const goals = await storage.getGoals();\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const validatedData = insertGoalSchema.parse(req.body);\n      const goal = await storage.createGoal(validatedData);\n      res.status(201).json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create goal\" });\n      }\n    }\n  });\n\n  app.put(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertGoalSchema.partial().parse(req.body);\n      const goal = await storage.updateGoal(id, validatedData);\n\n      if (!goal) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n\n      res.json(goal);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid goal data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update goal\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteGoal(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Goal not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete goal\" });\n    }\n  });\n\n  // Sakarya,serdivan için hava durumu route\n  app.get(\"/api/weather\", async (req, res) => {\n    try {\n      const OPENWEATHER_API_KEY = process.env.OPENWEATHER_API_KEY;\n\n      let currentData, forecastData, airQualityData, uvData;\n\n      if (!OPENWEATHER_API_KEY) {\n        console.log(\"OpenWeather API key not found, using static data\");\n        // API anahtarı yoksa statik veri kullan\n        currentData = {\n          main: {\n            temp: 18,\n            temp_max: 20,\n            temp_min: 15,\n            humidity: 75,\n            pressure: 1013,\n            feels_like: 18,\n          },\n          weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n          wind: { speed: 2.5, deg: 180 },\n          clouds: { all: 20 },\n          visibility: 10000,\n          sys: {\n            sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n            sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n          },\n          rain: undefined,\n          snow: undefined,\n        } as any;\n        forecastData = { list: [] };\n        airQualityData = {\n          list: [\n            { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n          ],\n        };\n        uvData = { value: 4 };\n      } else {\n        // Sakarya, Serdivan için gerçek OpenWeather API çağrıları (lat: 40.7969, lon: 30.3781)\n        const lat = 40.7969;\n        const lon = 30.3781;\n\n        try {\n          // hava durumu\n          const currentResponse = await fetch(\n            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=tr`,\n          );\n          currentData = await currentResponse.json();\n          \n          // API başarısız olursa (geçersiz anahtar vs) statik veri kullan\n          if (!currentData || !currentData.main || currentData.cod === 401 || currentData.cod === '401') {\n            console.log(\"Weather API key is invalid, using static data\");\n            currentData = {\n              main: {\n                temp: 18,\n                temp_max: 20,\n                temp_min: 15,\n                humidity: 75,\n                pressure: 1013,\n                feels_like: 18,\n              },\n              weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n              wind: { speed: 2.5, deg: 180 },\n              clouds: { all: 20 },\n              visibility: 10000,\n              sys: {\n                sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n                sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n              },\n            };\n            forecastData = { list: [] };\n            airQualityData = {\n              list: [\n                { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n              ],\n            };\n            uvData = { value: 4 };\n          } else {\n            // 5 günlük tahmin\n            const forecastResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}&units=metric&lang=tr`,\n            );\n            forecastData = await forecastResponse.json();\n\n            // hava kalitesi\n            const airQualityResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}`,\n            );\n            airQualityData = await airQualityResponse.json();\n\n            // uv indeksi\n            const uvResponse = await fetch(\n              `https://api.openweathermap.org/data/2.5/uvi?lat=${lat}&lon=${lon}&appid=${OPENWEATHER_API_KEY}`,\n            );\n            uvData = await uvResponse.json();\n          }\n        } catch (apiError) {\n          console.error(\n            \"OpenWeather API error, falling back to static data:\",\n            apiError,\n          );\n          // geriye statik veri döndür\n          currentData = {\n            main: {\n              temp: 18,\n              temp_max: 20,\n              temp_min: 15,\n              humidity: 75,\n              pressure: 1013,\n              feels_like: 18,\n            },\n            weather: [{ id: 800, description: \"açık\", main: \"Clear\" }],\n            wind: { speed: 2.5, deg: 180 },\n            clouds: { all: 20 },\n            visibility: 10000,\n            sys: {\n              sunrise: Math.floor(new Date().setHours(5, 54, 0, 0) / 1000),\n              sunset: Math.floor(new Date().setHours(18, 53, 0, 0) / 1000),\n            },\n          };\n          forecastData = { list: [] };\n          airQualityData = {\n            list: [\n              { main: { aqi: 2 }, components: { pm2_5: 15, pm10: 25, o3: 60 } },\n            ],\n          };\n          uvData = { value: 4 };\n        }\n      }\n\n      // emoji fonksiyonu\n      const getWeatherEmoji = (weatherId: number, isDay: boolean = true) => {\n        if (weatherId >= 200 && weatherId < 300) return \"⛈️\"; // gök gürültülü\n        if (weatherId >= 300 && weatherId < 400) return \"🌦️\"; // hafif yağmur\n        if (weatherId >= 500 && weatherId < 600) return \"🌧️\"; // yağmur\n        if (weatherId >= 600 && weatherId < 700) return \"❄️\"; // kar\n        if (weatherId >= 700 && weatherId < 800) return \"🌫️\"; // sis\n        if (weatherId === 800) return isDay ? \"☀️\" : \"🌙\"; // açık\n        if (weatherId > 800) return isDay ? \"⛅\" : \"☁️\"; // bulutlu\n        return \"🌤️\";\n      };\n\n      // 12 saatlik tahmin işleme\n      const hourlyForecast = [];\n      const currentHour = new Date().getHours();\n\n      for (let i = 0; i < 12; i++) {\n        const hour = (currentHour + i) % 24;\n        const isDay = hour >= 6 && hour <= 19;\n\n        // Gün boyunca sıcaklık değişimi\n        let temp = 18; // Temel sıcaklık\n        if (hour >= 6 && hour <= 8)\n          temp = 16; // Sabah serin\n        else if (hour >= 9 && hour <= 11)\n          temp = 19; // Geç sabah sıcak\n        else if (hour >= 12 && hour <= 15)\n          temp = 21; // Öğle en sıcak\n        else if (hour >= 16 && hour <= 18)\n          temp = 20; // Akşam serin\n        else if (hour >= 19 && hour <= 21)\n          temp = 18; // Gece serin\n        else temp = 15; // Gece en serin\n\n        // Rastgelelik ekle ama gerçekçi tut\n        temp += Math.floor(Math.random() * 3) - 1; // ±1°C\n\n        // Hava durumu koşulları - çeşitlilik için karışım\n        let weatherId = 800; // Açık varsayılan\n        let precipitation = 0;\n\n        if (i === 2 || i === 3) {\n          weatherId = 801; // Az bulutlu\n        } else if (i === 5 || i === 6) {\n          weatherId = 802; // Parçalı bulutlu\n        } else if (i === 8) {\n          weatherId = 500; // Hafif yağmur\n          precipitation = 0.5;\n        }\n\n        hourlyForecast.push({\n          time: `${hour.toString().padStart(2, \"0\")}:00`,\n          hour: hour,\n          temperature: temp,\n          emoji: getWeatherEmoji(weatherId, isDay),\n          humidity: 75 + Math.floor(Math.random() * 10) - 5, // 70-80% nem\n          windSpeed: 8 + Math.floor(Math.random() * 6), // 8-14 km/h rüzgar\n          windDirection: 180 + Math.floor(Math.random() * 60) - 30, // Değişken rüzgar yönü\n          precipitation: precipitation,\n          description:\n            weatherId === 800\n              ? \"açık\"\n              : weatherId === 801\n                ? \"az bulutlu\"\n                : weatherId === 802\n                  ? \"parçalı bulutlu\"\n                  : \"hafif yağmur\",\n        });\n      }\n\n      // 7 günlük tahmin işleme\n      const dailyForecast: any[] = [];\n      const today = new Date();\n\n      // Özel günler için tahmin verileri\n      const customForecast = [\n        // Bugün - mevcut hava durumunu kullan\n        {\n          date: today.toISOString().split(\"T\")[0],\n          dayName: today.toLocaleDateString(\"tr-TR\", { weekday: \"short\" }),\n          temperature: {\n            max: Math.round(\n              currentData.main.temp_max || currentData.main.temp + 3,\n            ),\n            min: Math.round(\n              currentData.main.temp_min || currentData.main.temp - 3,\n            ),\n          },\n          description: currentData.weather[0].description,\n          emoji: getWeatherEmoji(currentData.weather[0].id),\n          humidity: currentData.main.humidity,\n          windSpeed: Math.round(currentData.wind.speed * 3.6),\n        },\n      ];\n\n      // 6 günlük özel tahmin verisi\n      for (let i = 1; i <= 6; i++) {\n        const forecastDate = new Date(today);\n        forecastDate.setDate(today.getDate() + i);\n        const dayName = forecastDate.toLocaleDateString(\"tr-TR\", {\n          weekday: \"short\",\n        });\n\n        let weatherData;\n        switch (dayName.toLowerCase()) {\n          case \"çar\": // carsamba\n            weatherData = {\n              temperature: { max: 18, min: 12 },\n              description: \"sis\",\n              emoji: \"🌫️\",\n              humidity: 85,\n              windSpeed: 8,\n            };\n            break;\n          case \"per\": // perşembe\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 80,\n              windSpeed: 15,\n            };\n            break;\n          case \"cum\": // cuma\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 78,\n              windSpeed: 12,\n            };\n            break;\n          case \"cmt\": // cumartesi\n            weatherData = {\n              temperature: { max: 18, min: 12 },\n              description: \"yağmurlu\",\n              emoji: \"🌧️\",\n              humidity: 88,\n              windSpeed: 10,\n            };\n            break;\n          case \"paz\": // pazar\n            weatherData = {\n              temperature: { max: 19, min: 13 },\n              description: \"gökgürültülü sağanak\",\n              emoji: \"⛈️\",\n              humidity: 82,\n              windSpeed: 14,\n            };\n            break;\n          default:\n            // diğer günler için genel tahmin\n            weatherData = {\n              temperature: { max: 20, min: 14 },\n              description: \"parçalı bulutlu\",\n              emoji: \"⛅\",\n              humidity: 65,\n              windSpeed: 8,\n            };\n        }\n\n        customForecast.push({\n          date: forecastDate.toISOString().split(\"T\")[0],\n          dayName: dayName,\n          ...weatherData,\n        });\n      }\n\n      // custom forecast'u dailyForecast'a ekle\n      dailyForecast.push(...customForecast);\n\n      // hava durumu detayları\n      const now = new Date();\n      const sunrise = new Date(currentData.sys.sunrise * 1000);\n      const sunset = new Date(currentData.sys.sunset * 1000);\n      const isDay = now > sunrise && now < sunset;\n\n      // UV indeksi hesaplama (gerçek UV API'si başarısız olursa yedek)\n      const getUVIndex = () => {\n        if (uvData && uvData.value !== undefined) {\n          const uvValue = Math.round(uvData.value);\n          let level, description;\n\n          if (uvValue <= 2) {\n            level = \"Düşük\";\n            description = \"Güvenli seviyede, koruma gereksiz\";\n          } else if (uvValue <= 5) {\n            level = \"Orta\";\n            description = \"Orta seviye risk, güneş kremi önerilir\";\n          } else if (uvValue <= 7) {\n            level = \"Yüksek\";\n            description = \"Koruyucu önlemler gerekli\";\n          } else if (uvValue <= 10) {\n            level = \"Çok Yüksek\";\n            description = \"Güçlü koruma şart, gölgeyi tercih edin\";\n          } else {\n            level = \"Aşırı\";\n            description = \"Dışarı çıkmaktan kaçının\";\n          }\n\n          return { value: uvValue, level, description };\n        }\n\n        // uv API yoksa basit hesaplama\n        if (!isDay)\n          return {\n            value: 0,\n            level: \"Düşük\",\n            description: \"Gece boyunca UV endeksi düşük\",\n          };\n        const hour = now.getHours();\n        if (hour < 8 || hour > 18)\n          return { value: 1, level: \"Düşük\", description: \"Güvenli seviyede\" };\n        if (hour >= 10 && hour <= 16) {\n          const baseUV =\n            currentData.clouds.all < 30\n              ? 8\n              : currentData.clouds.all < 70\n                ? 5\n                : 3;\n          return baseUV > 7\n            ? {\n                value: baseUV,\n                level: \"Yüksek\",\n                description: \"Koruyucu önlemler gerekli\",\n              }\n            : { value: baseUV, level: \"Orta\", description: \"Orta seviye risk\" };\n        }\n        return { value: 3, level: \"Orta\", description: \"Orta seviye risk\" };\n      };\n\n      // hava kalitesi hesaplama\n      const airQuality = airQualityData\n        ? {\n            aqi: airQualityData.list[0].main.aqi,\n            level:\n              [\"İyi\", \"Orta\", \"Hassas\", \"Sağlıksız\", \"Çok Sağlıksız\"][\n                airQualityData.list[0].main.aqi - 1\n              ] || \"Bilinmiyor\",\n            description:\n              airQualityData.list[0].main.aqi <= 2\n                ? \"Temiz hava\"\n                : \"Hava kalitesine dikkat edin\",\n            components: {\n              pm2_5: airQualityData.list[0].components.pm2_5,\n              pm10: airQualityData.list[0].components.pm10,\n              o3: airQualityData.list[0].components.o3,\n            },\n          }\n        : null;\n\n      // Geliştirilmiş yaşam tarzı indeksleri\n      const temp = currentData.main.temp;\n      const windSpeed = Math.round(currentData.wind.speed * 3.6);\n      const humidity = currentData.main.humidity;\n      const isRaining =\n        currentData.weather[0].id >= 500 && currentData.weather[0].id < 600;\n      const isSnowing =\n        currentData.weather[0].id >= 600 && currentData.weather[0].id < 700;\n      const visibility = currentData.visibility || 10000;\n      const uvValue = uvData?.value || 0;\n      const airQualityIndex = airQualityData?.list[0]?.main?.aqi || 3;\n\n      const lifeIndices = {\n        exercise: {\n          level: (() => {\n            if (isRaining || isSnowing) return \"Kötü\";\n            if (temp < 5 || temp > 35) return \"Kötü\";\n            if (temp < 10 || temp > 30) return \"Orta\";\n            if (airQualityIndex > 3) return \"Orta\";\n            if (windSpeed > 25) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🏃\",\n          description: (() => {\n            if (isRaining || isSnowing) return \"Hava koşulları uygun değil\";\n            if (temp > 35) return \"Aşırı sıcak, egzersizden kaçının\";\n            if (temp > 30) return \"Çok sıcak, sabah/akşam saatleri tercih edin\";\n            if (temp < 5) return \"Çok soğuk, kapalı alan tercih edin\";\n            if (temp < 10) return \"Soğuk, ısınma egzersizleri yapın\";\n            if (airQualityIndex > 3) return \"Hava kalitesi düşük, dikkat edin\";\n            if (windSpeed > 25) return \"Güçlü rüzgar, dikkatli olun\";\n            return \"Dış egzersiz için mükemmel koşullar\";\n          })(),\n        },\n        clothing: {\n          level: \"Uygun\",\n          emoji: (() => {\n            if (temp > 28) return \"👕\";\n            if (temp > 20) return \"👔\";\n            if (temp > 10) return \"🧥\";\n            if (temp > 0) return \"🧥\";\n            return \"🧥\";\n          })(),\n          description: (() => {\n            if (isRaining) return \"Yağmurluk ve şemsiye gerekli\";\n            if (isSnowing) return \"Kalın mont ve bot gerekli\";\n            if (temp > 28) return \"Hafif ve nefes alabilir kıyafetler\";\n            if (temp > 20) return \"Hafif kıyafetler, ince ceket\";\n            if (temp > 10) return \"Orta kalınlık ceket önerilir\";\n            if (temp > 0) return \"Kalın mont ve eldiven gerekli\";\n            return \"Çok kalın kıyafetler, bere ve eldiven şart\";\n          })(),\n        },\n        travel: {\n          level: (() => {\n            if (visibility < 2000) return \"Kötü\";\n            if (isRaining && windSpeed > 20) return \"Kötü\";\n            if (isSnowing || windSpeed > 30) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Orta\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚗\",\n          description: (() => {\n            if (visibility < 2000)\n              return \"Görüş mesafesi çok düşük, ertelenebilirse erteleyin\";\n            if (isSnowing) return \"Kar nedeniyle çok dikkatli sürün\";\n            if (isRaining && windSpeed > 20)\n              return \"Yağmur ve rüzgar, çok dikkatli olun\";\n            if (isRaining) return \"Yağışlı hava, hızınızı azaltın\";\n            if (windSpeed > 30) return \"Aşırı rüzgar, seyahati erteleyin\";\n            if (windSpeed > 20) return \"Güçlü rüzgar, dikkatli sürün\";\n            return \"Seyahat için uygun koşullar\";\n          })(),\n        },\n        skin: {\n          level: (() => {\n            if (uvValue > 7) return \"Yüksek Risk\";\n            if (uvValue > 3) return \"Orta Risk\";\n            if (humidity < 30 || humidity > 80) return \"Dikkat\";\n            return \"İyi\";\n          })(),\n          emoji: \"🧴\",\n          description: (() => {\n            if (uvValue > 7)\n              return \"Güçlü güneş kremi ve koruyucu kıyafet şart\";\n            if (uvValue > 3) return \"Güneş kremi ve şapka önerilir\";\n            if (humidity > 80)\n              return \"Yağlı ciltler için hafif nemlendiriciler\";\n            if (humidity < 30) return \"Kuru hava, yoğun nemlendirici kullanın\";\n            return \"Normal cilt bakımı yeterli\";\n          })(),\n        },\n        driving: {\n          level: (() => {\n            if (visibility < 1000) return \"Tehlikeli\";\n            if (isSnowing || (isRaining && windSpeed > 25)) return \"Kötü\";\n            if (isRaining || windSpeed > 20) return \"Dikkatli\";\n            if (visibility < 5000) return \"Dikkatli\";\n            return \"İyi\";\n          })(),\n          emoji: \"🚙\",\n          description: (() => {\n            if (visibility < 1000) return \"Görüş sıfıra yakın, sürmeyin\";\n            if (isSnowing) return \"Kar nedeniyle çok yavaş ve dikkatli sürün\";\n            if (isRaining && windSpeed > 25)\n              return \"Fırtına koşulları, mümkünse beklemeyin\";\n            if (isRaining) return \"Yağmur, fren mesafesini artırın\";\n            if (windSpeed > 20) return \"Rüzgar yan yana araçları etkileyebilir\";\n            if (visibility < 5000) return \"Sisli hava, farları açın\";\n            return \"Sürüş için ideal koşullar\";\n          })(),\n        },\n      };\n\n      const responseData = {\n        location: \"Serdivan, Sakarya\",\n        current: {\n          temperature: Math.round(currentData.main.temp),\n          description: currentData.weather[0].description,\n          emoji: getWeatherEmoji(currentData.weather[0].id, isDay),\n          humidity: currentData.main.humidity,\n          windSpeed: Math.round(currentData.wind.speed * 3.6),\n          windDirection: currentData.wind.deg,\n          windDescription:\n            windSpeed < 5\n              ? \"sakin\"\n              : windSpeed < 15\n                ? \"hafif meltem\"\n                : \"güçlü rüzgar\",\n          feelsLike: Math.round(currentData.main.feels_like),\n          pressure: currentData.main.pressure,\n          visibility: Math.round(currentData.visibility / 1000),\n          precipitation: currentData.rain\n            ? currentData.rain[\"1h\"] || 0\n            : currentData.snow\n              ? currentData.snow[\"1h\"] || 0\n              : 0,\n        },\n        hourlyForecast,\n        sunData: {\n          sunrise: sunrise.toLocaleTimeString(\"tr-TR\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          sunset: sunset.toLocaleTimeString(\"tr-TR\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n          dayLength: `${Math.round((sunset.getTime() - sunrise.getTime()) / 3600000)}s ${Math.round(((sunset.getTime() - sunrise.getTime()) % 3600000) / 60000)}dk`,\n          sunProgress: isDay\n            ? ((now.getTime() - sunrise.getTime()) /\n                (sunset.getTime() - sunrise.getTime())) *\n              100\n            : 0,\n        },\n        forecast: dailyForecast,\n        uvIndex: getUVIndex(),\n        airQuality,\n        lifeIndices,\n      };\n\n      res.json(responseData);\n    } catch (error) {\n      console.error(\"Weather API error:\", error);\n      res.status(500).json({ message: \"Hava durumu verileri alınamadı\" });\n    }\n  });\n\n  // cevap logları routes\n  app.get(\"/api/question-logs\", async (req, res) => {\n    try {\n      const logs = await storage.getQuestionLogs();\n      res.json(logs);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch question logs\" });\n    }\n  });\n\n  app.post(\"/api/question-logs\", async (req, res) => {\n    try {\n      const validatedData = insertQuestionLogSchema.parse(req.body);\n      const log = await storage.createQuestionLog(validatedData);\n      res.status(201).json(log);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid question log data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create question log\" });\n      }\n    }\n  });\n\n  app.get(\"/api/question-logs/range\", async (req, res) => {\n    try {\n      const { startDate, endDate } = req.query;\n      if (!startDate || !endDate) {\n        return res\n          .status(400)\n          .json({ message: \"Start date and end date are required\" });\n      }\n      const logs = await storage.getQuestionLogsByDateRange(\n        startDate as string,\n        endDate as string,\n      );\n      res.json(logs);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch question logs by date range\" });\n    }\n  });\n\n  app.delete(\"/api/question-logs/all\", async (req, res) => {\n    try {\n      await storage.deleteAllQuestionLogs();\n      res.json({ message: \"All question logs deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete all question logs\" });\n    }\n  });\n\n  app.delete(\"/api/question-logs/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteQuestionLog(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Question log not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete question log\" });\n    }\n  });\n\n  // Konu istatistikleri routes\n  app.get(\"/api/topics/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getTopicStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch topic statistics\" });\n    }\n  });\n\n  app.get(\"/api/topics/priority\", async (req, res) => {\n    try {\n      const priorityTopics = await storage.getPriorityTopics();\n      res.json(priorityTopics);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch priority topics\" });\n    }\n  });\n\n  app.get(\"/api/subjects/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getSubjectSolvedStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch subject statistics\" });\n    }\n  });\n\n  // Sınav sonuçları routes\n  app.get(\"/api/exam-results\", async (req, res) => {\n    try {\n      const results = await storage.getExamResults();\n      res.json(results);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam results\" });\n    }\n  });\n\n  app.post(\"/api/exam-results\", async (req, res) => {\n    try {\n      const validatedData = insertExamResultSchema.parse(req.body);\n      const result = await storage.createExamResult(validatedData);\n\n      // Eğer subjects_data sağlanmışsa, sınav konu netleri oluştur\n      if (validatedData.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(validatedData.subjects_data);\n\n          // Her konu için veri ile konu netleri oluştur\n          for (const [subjectName, subjectData] of Object.entries(\n            subjectsData,\n          )) {\n            const data = subjectData as any;\n            if (data.correct || data.wrong || data.blank) {\n              const correct = parseInt(data.correct) || 0;\n              const wrong = parseInt(data.wrong) || 0;\n              const blank = parseInt(data.blank) || 0;\n              const netScore = correct - wrong * 0.25;\n\n              // ders isimlerini Türkçe'ye çevir\n              const subjectNameMap: { [key: string]: string } = {\n                turkce: \"Türkçe\",\n                matematik: \"Matematik\",\n                sosyal: \"Sosyal\",\n                fen: \"Fen\",\n                fizik: \"Fizik\",\n                kimya: \"Kimya\",\n                biyoloji: \"Biyoloji\",\n              };\n\n              // dersin TYT mi AYT mi olduğunu belirle\n              const isTYTSubject = [\n                \"turkce\",\n                \"matematik\",\n                \"sosyal\",\n                \"fen\",\n              ].includes(subjectName);\n              const examType = isTYTSubject ? \"TYT\" : \"AYT\";\n              const mappedSubjectName =\n                subjectNameMap[subjectName] || subjectName;\n\n              await storage.createExamSubjectNet({\n                exam_id: result.id,\n                exam_type: examType,\n                subject: mappedSubjectName,\n                net_score: netScore.toString(),\n                correct_count: correct.toString(),\n                wrong_count: wrong.toString(),\n                blank_count: blank.toString(),\n              });\n\n              // yanlış yapılan konular loglarını oluştur\n              if (\n                data.wrong_topics &&\n                data.wrong_topics.length > 0 &&\n                wrong > 0\n              ) {\n                await storage.createQuestionLog({\n                  exam_type: examType,\n                  subject: mappedSubjectName,\n                  correct_count: correct.toString(),\n                  wrong_count: wrong.toString(),\n                  blank_count: blank.toString(),\n                  wrong_topics: data.wrong_topics,\n                  study_date: validatedData.exam_date,\n                  time_spent_minutes: null,\n                });\n              }\n            }\n          }\n        } catch (parseError) {\n          console.error(\"Failed to parse subjects_data:\", parseError);\n        }\n      }\n\n      res.status(201).json(result);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid exam result data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam result\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-results/all\", async (req, res) => {\n    try {\n      await storage.deleteAllExamResults();\n      res.json({ message: \"All exam results deleted\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete all exam results\" });\n    }\n  });\n\n  app.delete(\"/api/exam-results/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamResult(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam result not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam result\" });\n    }\n  });\n\n  // örnek ders netleri routes\n  app.get(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const nets = await storage.getExamSubjectNets();\n      res.json(nets);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch exam subject nets\" });\n    }\n  });\n\n  app.get(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const nets = await storage.getExamSubjectNetsByExamId(examId);\n      res.json(nets);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch exam subject nets for exam\" });\n    }\n  });\n\n  app.post(\"/api/exam-subject-nets\", async (req, res) => {\n    try {\n      const validatedData = insertExamSubjectNetSchema.parse(req.body);\n      const net = await storage.createExamSubjectNet(validatedData);\n      res.status(201).json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          message: \"Invalid exam subject net data\",\n          errors: error.errors,\n        });\n      } else if (\n        error instanceof Error &&\n        error.message.includes(\"does not exist\")\n      ) {\n        res.status(400).json({ message: error.message });\n      } else {\n        res.status(500).json({ message: \"Failed to create exam subject net\" });\n      }\n    }\n  });\n\n  app.put(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertExamSubjectNetSchema\n        .partial()\n        .parse(req.body);\n      const net = await storage.updateExamSubjectNet(id, validatedData);\n\n      if (!net) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n\n      res.json(net);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({\n          message: \"Invalid exam subject net data\",\n          errors: error.errors,\n        });\n      } else {\n        res.status(500).json({ message: \"Failed to update exam subject net\" });\n      }\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteExamSubjectNet(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Exam subject net not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject net\" });\n    }\n  });\n\n  app.delete(\"/api/exam-subject-nets/exam/:examId\", async (req, res) => {\n    try {\n      const { examId } = req.params;\n      const deleted = await storage.deleteExamSubjectNetsByExamId(examId);\n\n      if (!deleted) {\n        return res\n          .status(404)\n          .json({ message: \"No exam subject nets found for this exam\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete exam subject nets\" });\n    }\n  });\n  //ARTIK KULLANMAYACAĞIMIZ ROUTESLAR\n  // Flashcard routes - commented out until implementation is complete\n  /*\n  app.get(\"/api/flashcards\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcards();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch flashcards\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/due\", async (req, res) => {\n    try {\n      const flashcards = await storage.getFlashcardsDue();\n      res.json(flashcards);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch due flashcards\" });\n    }\n  });\n\n  app.post(\"/api/flashcards\", async (req, res) => {\n    try {\n      const validatedData = insertFlashcardSchema.parse(req.body);\n      const flashcard = await storage.createFlashcard(validatedData);\n      res.status(201).json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to create flashcard\" });\n      }\n    }\n  });\n\n  app.put(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertFlashcardSchema.partial().parse(req.body);\n      const flashcard = await storage.updateFlashcard(id, validatedData);\n\n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      res.json(flashcard);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res\n          .status(400)\n          .json({ message: \"Invalid flashcard data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update flashcard\" });\n      }\n    }\n  });\n\n  app.post(\"/api/flashcards/:id/review\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { difficulty, isCorrect, userAnswer } = req.body;\n\n      if (![\"easy\", \"medium\", \"hard\"].includes(difficulty)) {\n        return res.status(400).json({ message: \"Invalid difficulty level\" });\n      }\n\n      const flashcard = await storage.reviewFlashcard(id, difficulty);\n\n      if (!flashcard) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      // Eğer cevap yanlışsa hata takibine ekle\n      if (!isCorrect && userAnswer && flashcard) {\n        await storage.addFlashcardError({\n          cardId: id,\n          question: flashcard.question,\n          topic: flashcard.topic || flashcard.subject,\n          difficulty: flashcard.difficulty,\n          userAnswer,\n          correctAnswer: flashcard.answer,\n          timestamp: new Date(),\n        });\n      }\n\n      res.json(flashcard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to review flashcard\" });\n    }\n  });\n\n  // Hata sıklığı analizi için route\n  app.get(\"/api/flashcards/errors\", async (req, res) => {\n    try {\n      const errors = await storage.getFlashcardErrors();\n      res.json(errors);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch flashcard errors\" });\n    }\n  });\n\n  app.get(\"/api/flashcards/errors/by-difficulty\", async (req, res) => {\n    try {\n      const errorsByDifficulty = await storage.getFlashcardErrorsByDifficulty();\n      res.json(errorsByDifficulty);\n    } catch (error) {\n      res\n        .status(500)\n        .json({ message: \"Failed to fetch flashcard errors by difficulty\" });\n    }\n  });\n\n  // Örnek kartları yükle\n  app.post(\"/api/flashcards/seed\", async (req, res) => {\n    try {\n      await storage.seedSampleFlashcards();\n      res.json({ message: \"Sample flashcards seeded successfully\" });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to seed sample flashcards\" });\n    }\n  });\n\n  app.delete(\"/api/flashcards/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const deleted = await storage.deleteFlashcard(id);\n\n      if (!deleted) {\n        return res.status(404).json({ message: \"Flashcard not found\" });\n      }\n\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete flashcard\" });\n    }\n  });\n\n  // Export API routes\n  app.get(\"/api/export/json\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      const moods = await storage.getMoods();\n      const dailySummary = await storage.getDailySummary(365); // Full year\n\n      const exportData = {\n        exportDate: new Date().toISOString(),\n        version: \"1.0\",\n        data: {\n          tasks,\n          moods,\n          summary: dailySummary,\n        },\n      };\n\n      res.setHeader(\"Content-Type\", \"application/json\");\n      res.setHeader(\n        \"Content-Disposition\",\n        `attachment; filename=\"yapilacaklar-yedegi-${new Date().toISOString().split(\"T\")[0]}.json\"`,\n      );\n      res.json(exportData);\n    } catch (error) {\n      console.error(\"JSON export error:\", error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n\n  app.get(\"/api/export/csv\", async (req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n\n      // CSV Header\n      let csvContent =\n        \"ID,Başlık,Açıklama,Öncelik,Kategori,Renk,Tamamlandı,Tamamlanma Tarihi,Bitiş Tarihi,Oluşturulma Tarihi\\n\";\n\n      // CSV Data\n      tasks.forEach((task) => {\n        const row = [\n          task.id,\n          `\"${(task.title || \"\").replace(/\"/g, '\"\"')}\"`, // Escape quotes\n          `\"${(task.description || \"\").replace(/\"/g, '\"\"')}\"`,\n          task.priority,\n          task.category,\n          task.color || \"\",\n          task.completed ? \"Evet\" : \"Hayır\",\n          task.completedAt || \"\",\n          task.dueDate || \"\",\n          task.createdAt\n            ? new Date(task.createdAt).toLocaleDateString(\"tr-TR\")\n            : \"\",\n        ].join(\",\");\n        csvContent += row + \"\\n\";\n      });\n\n      res.setHeader(\"Content-Type\", \"text/csv; charset=utf-8\");\n      res.setHeader(\n        \"Content-Disposition\",\n        `attachment; filename=\"gorevler-${new Date().toISOString().split(\"T\")[0]}.csv\"`,\n      );\n      res.send(\"\\uFEFF\" + csvContent); // Add BOM for proper UTF-8 encoding\n    } catch (error) {\n      console.error(\"CSV export error:\", error);\n      res.status(500).json({ message: \"Export failed\" });\n    }\n  });\n  */\n\n  // Helper function to convert Turkish characters to ASCII equivalents for PDF\n  const convertTurkishChars = (text: string): string => {\n    if (!text || typeof text !== \"string\") return \"\";\n\n    const turkishMap: { [key: string]: string } = {\n      ç: \"c\",\n      Ç: \"C\",\n      ğ: \"g\",\n      Ğ: \"G\",\n      ı: \"i\",\n      İ: \"I\",\n      ö: \"o\",\n      Ö: \"O\",\n      ş: \"s\",\n      Ş: \"S\",\n      ü: \"u\",\n      Ü: \"U\",\n      // Additional characters that might cause issues\n      â: \"a\",\n      Â: \"A\",\n      î: \"i\",\n      Î: \"I\",\n      û: \"u\",\n      Û: \"U\",\n    };\n\n    // More comprehensive replacement including any potential Unicode variants\n    return (\n      text\n        .replace(/[çÇğĞıİöÖşŞüÜâÂîÎûÛ]/g, (match) => turkishMap[match] || match)\n        // Extra safety: replace any remaining non-ASCII characters with safe equivalents\n        .replace(/[^\\x00-\\x7F]/g, (match) => {\n          // Log problematic characters for debugging\n          console.warn(\n            \"Unconverted character in PDF:\",\n            match,\n            match.charCodeAt(0),\n          );\n          return \"?\";\n        })\n    );\n  };\n\n  // PDF İçerik Oluşturma Fonksiyonu - Kompakt Tasarım\n  const generatePDFContent = (doc: any, reportData: any) => {\n    const pageWidth = 595;\n    const pageHeight = 842;\n    const margin = 40;\n    const contentWidth = pageWidth - margin * 2;\n\n    const colors = {\n      turkishRed: \"#E30A17\",\n      turkishFlag: \"#C8102E\",\n      primary: \"#8B5CF6\",\n      secondary: \"#6366F1\",\n      success: \"#10B981\",\n      warning: \"#F59E0B\",\n      error: \"#EF4444\",\n      text: \"#111827\",\n      muted: \"#6B7280\",\n      gold: \"#FFD700\",\n      white: \"#FFFFFF\",\n    };\n\n    // SAYFA 1: Kapak ve Atatürk Sözü\n    // Türk Bayrağı (sol üst)\n    doc.rect(margin, 15, 50, 30).fill(colors.turkishRed);\n    doc.circle(margin + 16, 30, 6).fill(colors.white);\n    // Hilal ve yıldız (basitleştirilmiş)\n    doc\n      .moveTo(margin + 20, 25)\n      .lineTo(margin + 26, 30)\n      .lineTo(margin + 20, 35)\n      .fill(colors.white);\n\n    // Türk Bayrağı (sağ üst)\n    doc.rect(pageWidth - margin - 50, 15, 50, 30).fill(colors.turkishRed);\n    doc.circle(pageWidth - margin - 34, 30, 6).fill(colors.white);\n    doc\n      .moveTo(pageWidth - margin - 30, 25)\n      .lineTo(pageWidth - margin - 24, 30)\n      .lineTo(pageWidth - margin - 30, 35)\n      .fill(colors.white);\n\n    let yPos = 80;\n\n    // Atatürk Sözü - Büyük, Kalın, İtalik (İsteğiniz üzere)\n    doc\n      .fontSize(16)\n      .fillColor(colors.text)\n      .font(\"Helvetica-BoldOblique\")\n      .text(\n        '\"Biz her şeyi gençliğe bırakacağız... Geleceğin ümidi,',\n        margin,\n        yPos,\n        { align: \"center\", width: contentWidth },\n      );\n\n    yPos += 22;\n    doc.text(\n      'ışıklı çiçekleri onlardır. Bütün ümidim gençliktedir.\"',\n      margin,\n      yPos,\n      { align: \"center\", width: contentWidth },\n    );\n\n    yPos += 30;\n    doc\n      .fontSize(12)\n      .fillColor(colors.muted)\n      .font(\"Helvetica-Oblique\")\n      .text(\"- Mustafa Kemal Atatürk -\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 60;\n\n    // Ana Başlık\n    doc\n      .fontSize(24)\n      .fillColor(colors.primary)\n      .font(\"Helvetica-Bold\")\n      .text(\"🎓 BERAT ÇAKIROĞLU\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 30;\n    doc\n      .fontSize(18)\n      .fillColor(colors.turkishRed)\n      .text(\"KİŞİSEL ÇALIŞMA ANALİZ RAPORU\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 40;\n    // Tarih bilgisi\n    const currentDate = new Date();\n    doc\n      .fontSize(12)\n      .fillColor(colors.muted)\n      .font(\"Helvetica\")\n      .text(\n        `📅 Rapor Tarihi: ${currentDate.toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\", year: \"numeric\" })}`,\n        margin,\n        yPos,\n        { align: \"center\", width: contentWidth },\n      );\n\n    yPos += 18;\n    doc.text(\n      `📊 Analiz Dönemi: ${reportData.month || \"Bu Ay\"} | 🎯 Toplam ${reportData.totalActivities || 0} Aktivite`,\n      margin,\n      yPos,\n      { align: \"center\", width: contentWidth },\n    );\n\n    yPos += 50;\n\n    // Motivasyonel Başarı Bölümü\n    doc\n      .fontSize(14)\n      .fillColor(colors.success)\n      .font(\"Helvetica-Bold\")\n      .text(\"🌟 BAŞARILARINIZ\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 25;\n    const achievements = [];\n    if (reportData.totalQuestions > 50)\n      achievements.push(\n        `${reportData.totalQuestions} soru ile mükemmel çalışma temposu`,\n      );\n    if (reportData.correctAnswers > reportData.wrongAnswers)\n      achievements.push(`Doğru cevaplarınız yanlışlarınızdan fazla!`);\n    if (reportData.totalTasks > 10)\n      achievements.push(\n        `${reportData.totalTasks} görevi başarıyla tamamladınız`,\n      );\n    if (reportData.totalExams > 3)\n      achievements.push(\n        `${reportData.totalExams} deneme ile kendinizi test ettiniz`,\n      );\n\n    if (achievements.length === 0)\n      achievements.push(\"Her çalışma sizi hedefinize yaklaştırıyor!\");\n\n    achievements.slice(0, 4).forEach((achievement) => {\n      doc\n        .fontSize(10)\n        .fillColor(colors.text)\n        .font(\"Helvetica\")\n        .text(`✓ ${achievement}`, margin + 15, yPos);\n      yPos += 20;\n    });\n\n    // SAYFA 2: İstatistikler\n    doc.addPage();\n    yPos = margin;\n\n    doc\n      .fontSize(20)\n      .fillColor(colors.primary)\n      .font(\"Helvetica-Bold\")\n      .text(\"📊 DETAYLI İSTATİSTİKLER\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 50;\n\n    const statsData = [\n      {\n        label: \"Toplam Soru\",\n        value: reportData.totalQuestions || 0,\n        color: colors.primary,\n        icon: \"📚\",\n      },\n      {\n        label: \"Doğru Cevap\",\n        value: reportData.correctAnswers || 0,\n        color: colors.success,\n        icon: \"✅\",\n      },\n      {\n        label: \"Yanlış Cevap\",\n        value: reportData.wrongAnswers || 0,\n        color: colors.error,\n        icon: \"❌\",\n      },\n      {\n        label: \"Deneme Sınavı\",\n        value: reportData.totalExams || 0,\n        color: colors.secondary,\n        icon: \"📝\",\n      },\n      {\n        label: \"Tamamlanan Görev\",\n        value: reportData.totalTasks || 0,\n        color: colors.warning,\n        icon: \"✓\",\n      },\n      {\n        label: \"Toplam Aktivite\",\n        value: reportData.totalActivities || 0,\n        color: colors.gold,\n        icon: \"⭐\",\n      },\n    ];\n\n    // 2x3 düzeninde kartlar\n    const cardWidth = (contentWidth - 20) / 2;\n    const cardHeight = 70;\n    let cardX = margin,\n      cardY = yPos;\n\n    statsData.forEach((stat, index) => {\n      if (index % 2 === 0 && index > 0) {\n        cardY += cardHeight + 20;\n        cardX = margin;\n      }\n\n      // Geliştirilmiş kart tasarımı\n      doc\n        .rect(cardX, cardY, cardWidth, cardHeight)\n        .fillAndStroke(\"#F8F9FA\", colors.muted + \"40\");\n\n      // İkon ve değer\n      doc\n        .fontSize(12)\n        .fillColor(stat.color)\n        .text(stat.icon, cardX + 12, cardY + 12);\n      doc\n        .fontSize(24)\n        .fillColor(stat.color)\n        .font(\"Helvetica-Bold\")\n        .text(stat.value.toString(), cardX + 35, cardY + 8);\n      doc\n        .fontSize(10)\n        .fillColor(colors.text)\n        .font(\"Helvetica\")\n        .text(stat.label, cardX + 12, cardY + 45);\n\n      cardX += cardWidth + 20;\n    });\n\n    yPos = cardY + cardHeight + 40;\n\n    // Performans Analizi\n    if (reportData.totalQuestions > 0) {\n      const successRate = Math.round(\n        (reportData.correctAnswers / reportData.totalQuestions) * 100,\n      );\n      const netScore =\n        reportData.correctAnswers - reportData.wrongAnswers * 0.25;\n\n      doc\n        .fontSize(16)\n        .fillColor(colors.success)\n        .font(\"Helvetica-Bold\")\n        .text(\"🎯 PERFORMANS ANALİZİ\", margin, yPos);\n\n      yPos += 30;\n      doc\n        .fontSize(12)\n        .fillColor(colors.text)\n        .font(\"Helvetica\")\n        .text(`📈 Başarı Oranınız: %${successRate}`, margin + 15, yPos);\n\n      yPos += 20;\n      doc.text(`🎯 Net Puanınız: ${netScore.toFixed(2)}`, margin + 15, yPos);\n\n      yPos += 25;\n      let performanceMsg = \"\";\n      if (successRate >= 80)\n        performanceMsg = \"Mükemmel! Hedeflerinize çok yakınsınız! 🌟\";\n      else if (successRate >= 60)\n        performanceMsg =\n          \"Harika! Biraz daha çalışmayla hedefe ulaşacaksınız! 💪\";\n      else if (successRate >= 40)\n        performanceMsg =\n          \"İyi başlangıç! Daha fazla çalışmayla başarıya ulaşabilirsiniz! 📚\";\n      else\n        performanceMsg =\n          \"Her başarı hikayesi bir yerden başlar! Devam edin! 🚀\";\n\n      doc\n        .fontSize(11)\n        .fillColor(colors.primary)\n        .text(performanceMsg, margin + 15, yPos);\n    }\n\n    // SAYFA 3: Detaylı Aktiviteler\n    if (\n      reportData.tasks?.length > 0 ||\n      reportData.questionLogs?.length > 0 ||\n      reportData.examResults?.length > 0\n    ) {\n      doc.addPage();\n      yPos = margin;\n\n      doc\n        .fontSize(18)\n        .fillColor(colors.primary)\n        .font(\"Helvetica-Bold\")\n        .text(\"📋 DETAYLI AKTİVİTE RAPORU\", margin, yPos);\n\n      yPos += 35;\n\n      // Tamamlanan Görevler\n      if (reportData.tasks?.length > 0) {\n        doc\n          .fontSize(14)\n          .fillColor(colors.warning)\n          .font(\"Helvetica-Bold\")\n          .text(\"✅ Tamamlanan Görevler:\", margin, yPos);\n\n        yPos += 22;\n        reportData.tasks.slice(0, 8).forEach((task: any, index: number) => {\n          const categoryText = getCategoryText(task.category || \"genel\");\n          doc\n            .fontSize(10)\n            .fillColor(colors.text)\n            .font(\"Helvetica\")\n            .text(\n              `${index + 1}. ${task.title || \"Görev\"} - ${categoryText}`,\n              margin + 15,\n              yPos,\n            );\n          yPos += 16;\n        });\n        yPos += 15;\n      }\n\n      // Soru Çözüm Detayları\n      if (reportData.questionLogs?.length > 0) {\n        doc\n          .fontSize(14)\n          .fillColor(colors.secondary)\n          .font(\"Helvetica-Bold\")\n          .text(\"📚 Soru Çözüm Detayları:\", margin, yPos);\n\n        yPos += 22;\n        reportData.questionLogs\n          .slice(0, 6)\n          .forEach((log: any, index: number) => {\n            doc\n              .fontSize(10)\n              .fillColor(colors.text)\n              .font(\"Helvetica\")\n              .text(\n                `${index + 1}. ${log.exam_type} ${log.subject}: ${log.correct_count}D/${log.wrong_count}Y/${log.blank_count}B - ${log.study_date}`,\n                margin + 15,\n                yPos,\n              );\n            yPos += 16;\n          });\n        yPos += 15;\n      }\n\n      // Deneme Sonuçları\n      if (reportData.examResults?.length > 0) {\n        doc\n          .fontSize(14)\n          .fillColor(colors.error)\n          .font(\"Helvetica-Bold\")\n          .text(\"🎯 Deneme Sınavı Sonuçları:\", margin, yPos);\n\n        yPos += 22;\n        reportData.examResults\n          .slice(0, 4)\n          .forEach((exam: any, index: number) => {\n            doc\n              .fontSize(10)\n              .fillColor(colors.text)\n              .font(\"Helvetica\")\n              .text(\n                `${index + 1}. ${exam.exam_name}: TYT ${exam.tyt_net}net, AYT ${exam.ayt_net}net - ${exam.exam_date}`,\n                margin + 15,\n                yPos,\n              );\n            yPos += 16;\n          });\n      }\n    }\n\n    // SAYFA 4: Son Mesaj ve İletişim\n    doc.addPage();\n    yPos = margin + 80;\n\n    doc\n      .fontSize(18)\n      .fillColor(colors.success)\n      .font(\"Helvetica-Bold\")\n      .text(\"🌟 BU AY HARİKA BİR ÇALIŞMA SERGİLEDİNİZ!\", margin, yPos, {\n        align: \"center\",\n        width: contentWidth,\n      });\n\n    yPos += 50;\n    doc\n      .fontSize(12)\n      .fillColor(colors.text)\n      .font(\"Helvetica\")\n      .text(\n        \"Hedefinize doğru ilerliyor, her gün kendinizi geliştiriyorsunuz.\",\n        margin,\n        yPos,\n        { align: \"center\", width: contentWidth },\n      );\n\n    yPos += 20;\n    doc.text(\n      \"Bu rapor sadece bir özet, asıl başarı sizin azminizde gizli.\",\n      margin,\n      yPos,\n      { align: \"center\", width: contentWidth },\n    );\n\n    yPos += 20;\n    doc.text(\n      \"Her soru, her görev sizi hayalinizdeki üniversiteye yaklaştırıyor!\",\n      margin,\n      yPos,\n      { align: \"center\", width: contentWidth },\n    );\n\n    // Alt bilgi\n    yPos = pageHeight - 60;\n    doc\n      .fontSize(9)\n      .fillColor(colors.muted)\n      .text(\n        `Bu rapor ${new Date().toLocaleDateString(\"tr-TR\")} tarihinde otomatik oluşturulmuştur.`,\n        margin,\n        yPos,\n        { align: \"center\", width: contentWidth },\n      );\n\n    yPos += 15;\n    doc.text(\n      \"🇹🇷 Berat Çakıroğlu Kişisel Analiz Sistemi - Geleceğe Yatırım 🇹🇷\",\n      margin,\n      yPos,\n      { align: \"center\", width: contentWidth },\n    );\n  };\n\n  // Kategori metinlerini düzgün göstermek için yardımcı fonksiyon\n  const getCategoryText = (category: string) => {\n    const categoryMap: { [key: string]: string } = {\n      genel: \"Genel\",\n      turkce: \"Türkçe\",\n      sosyal: \"Sosyal Bilimler\",\n      matematik: \"Matematik\",\n      fizik: \"Fizik\",\n      kimya: \"Kimya\",\n      biyoloji: \"Biyoloji\",\n      \"tyt-geometri\": \"TYT Geometri\",\n      \"ayt-geometri\": \"AYT Geometri\",\n      \"ayt-matematik\": \"AYT Matematik\",\n      \"ayt-fizik\": \"AYT Fizik\",\n      \"ayt-kimya\": \"AYT Kimya\",\n      \"ayt-biyoloji\": \"AYT Biyoloji\",\n    };\n    return categoryMap[category] || category;\n  };\n\n  // PDF Download Endpoint - Kullanıcı PDF'i görebilsin\n  app.get(\"/api/download-report\", async (req, res) => {\n    try {\n      const reportData = {\n        totalQuestions: 52,\n        correctAnswers: 43,\n        wrongAnswers: 9,\n        totalExams: 2,\n        totalTasks: 1,\n        totalActivities: 4,\n      };\n\n      const PDFDocument = PDFKit;\n      const doc = new PDFDocument({ size: \"A4\", margin: 50 });\n\n      // PDF içeriği oluştur\n      generatePDFContent(doc, reportData);\n\n      // Response headers\n      res.setHeader(\"Content-Type\", \"application/pdf\");\n      res.setHeader(\n        \"Content-Disposition\",\n        'attachment; filename=\"Berat_Cakiroglu_Rapor.pdf\"',\n      );\n\n      // PDF stream'ini response'a pipe et\n      doc.pipe(res);\n      doc.end();\n    } catch (error) {\n      console.error(\"PDF download error:\", error);\n      res.status(500).json({ message: \"PDF oluşturulurken hata oluştu\" });\n    }\n  });\n\n  // Email Report Endpoint - Modern HTML email with embedded images\n  app.post(\"/api/send-report\", async (req, res) => {\n    try {\n      // Fetch REAL data from storage\n      const tasks = await storage.getTasks();\n      const questionLogs = await storage.getQuestionLogs();\n      const examResults = await storage.getExamResults();\n      const completedTasks = tasks.filter(task => task.completed);\n      \n      // Calculate statistics\n      let totalQuestions = 0;\n      let correctAnswers = 0;\n      let wrongAnswers = 0;\n      let blankAnswers = 0;\n      \n      // Subject-level statistics\n      const subjectStats: any = {};\n      const wrongTopicsMap: Map<string, { count: number; subject: string }> = new Map();\n      \n      questionLogs.forEach(log => {\n        const correct = parseInt(log.correct_count) || 0;\n        const wrong = parseInt(log.wrong_count) || 0;\n        const blank = parseInt(log.blank_count) || 0;\n        \n        totalQuestions += correct + wrong + blank;\n        correctAnswers += correct;\n        wrongAnswers += wrong;\n        blankAnswers += blank;\n        \n        // Per subject stats\n        if (!subjectStats[log.subject]) {\n          subjectStats[log.subject] = { correct: 0, wrong: 0, blank: 0, total: 0 };\n        }\n        subjectStats[log.subject].correct += correct;\n        subjectStats[log.subject].wrong += wrong;\n        subjectStats[log.subject].blank += blank;\n        subjectStats[log.subject].total += correct + wrong + blank;\n        \n        // Wrong topics tracking\n        if (log.wrong_topics && log.wrong_topics.length > 0) {\n          log.wrong_topics.forEach(topic => {\n            const existing = wrongTopicsMap.get(topic);\n            if (existing) {\n              existing.count++;\n            } else {\n              wrongTopicsMap.set(topic, { count: 1, subject: log.subject });\n            }\n          });\n        }\n      });\n      \n      // Prepare exam details with subjects\n      const examDetailsWithSubjects = await Promise.all(\n        examResults.map(async (exam) => {\n          const subjects = await storage.getExamSubjectNetsByExamId(exam.id);\n          return {\n            ...exam,\n            subjects: subjects.map(sub => ({\n              subject: sub.subject,\n              net_score: sub.net_score,\n              correct_count: sub.correct_count,\n              wrong_count: sub.wrong_count,\n              blank_count: sub.blank_count,\n              wrong_topics: [] // Can be populated from wrong_topics_json if available\n            }))\n          };\n        })\n      );\n      \n      // Calculate max TYT and AYT nets\n      const maxTytNet = Math.max(...examResults.map(e => parseFloat(e.tyt_net) || 0), 0);\n      const maxAytNet = Math.max(...examResults.map(e => parseFloat(e.ayt_net) || 0), 0);\n      \n      // Most solved subjects (top 3)\n      const mostSolvedSubjects = Object.entries(subjectStats)\n        .sort((a: any, b: any) => b[1].total - a[1].total)\n        .slice(0, 3)\n        .map(([name, stats]: any) => ({ name, count: stats.total }));\n      \n      // Most correct subjects (top 3)\n      const mostCorrectSubjects = Object.entries(subjectStats)\n        .sort((a: any, b: any) => b[1].correct - a[1].correct)\n        .slice(0, 3)\n        .map(([name, stats]: any) => ({ name, count: stats.correct }));\n      \n      // Most wrong subjects (top 3)\n      const mostWrongSubjects = Object.entries(subjectStats)\n        .sort((a: any, b: any) => b[1].wrong - a[1].wrong)\n        .slice(0, 3)\n        .map(([name, stats]: any) => ({ name, count: stats.wrong }));\n      \n      // Frequent wrong topics\n      const frequentWrongTopics = Array.from(wrongTopicsMap.entries())\n        .map(([topic, data]) => ({ topic, count: data.count, subject: data.subject }))\n        .sort((a, b) => b.count - a.count);\n      \n      const reportData = {\n        totalQuestions,\n        correctAnswers,\n        wrongAnswers,\n        blankAnswers,\n        totalExams: examResults.length,\n        totalTasks: tasks.length,\n        completedTasks: completedTasks.length,\n        totalActivities: questionLogs.length + examResults.length + completedTasks.length,\n        tyt_net: maxTytNet,\n        ayt_net: maxAytNet,\n        maxTytNet,\n        maxAytNet,\n        mostSolvedSubjects,\n        mostCorrectSubjects,\n        mostWrongSubjects,\n        frequentWrongTopics,\n        examDetailsWithSubjects\n      };\n\n      // Gmail SMTP konfigürasyonu\n      const transporter = nodemailer.createTransport({\n        service: \"gmail\",\n        host: \"smtp.gmail.com\",\n        port: 587,\n        secure: false,\n        auth: {\n          user: process.env.EMAIL_USER || process.env.GMAIL_USER,\n          pass: process.env.EMAIL_PASS || process.env.GMAIL_PASS,\n        },\n        tls: {\n          rejectUnauthorized: false,\n        },\n      });\n\n      // Resimleri yükle - UPDATED PATHS\n      const ataturkImage = fs.readFileSync(path.join(process.cwd(), 'client/public/ataturk.png'));\n      const ataturkSignature = fs.readFileSync(path.join(process.cwd(), 'client/public/ataturkimza.png'));\n      const turkishFlag = fs.readFileSync(path.join(process.cwd(), 'client/public/turkbayragi.png'));\n\n      // Başarı koşullarını kontrol et\n      const showAchievements = reportData.totalQuestions >= 1000 || \n        (reportData.tyt_net >= 60 && reportData.ayt_net >= 35);\n\n      // Performans mesajını aktivite sayısına göre ayarla  \n      let performanceMessage = '';\n      const activities = reportData.totalActivities || 0;\n      if (activities === 0) {\n        performanceMessage = 'Bu ay henüz aktivite kaydım yok. Çalışmaya başlamak için harika bir zaman!';\n      } else if (activities < 10) {\n        performanceMessage = `Bu ay ${activities} aktivite gerçekleştirdim. Yola çıktım ve ilerlemeye devam ediyorum! 🚀`;\n      } else if (activities < 30) {\n        performanceMessage = `Bu ay ${activities} aktivite ile istikrarlı bir performans sergiledim. Bu tempoda ilerliyorum! 💪`;\n      } else if (activities < 60) {\n        performanceMessage = `Bu ay ${activities} aktivite ile kararlı bir tempo yakaladım. Hedefineme yaklaşıyorum! 🎯`;\n      } else {\n        performanceMessage = `Bu ay ${activities} aktivite ile üst düzey bir ritim sergiledim! Hedefineme kesinlikle ulaşacağım! 🌟`;\n      }\n\n      // Modern HTML Email içeriği\n      const mailOptions = {\n        from: process.env.EMAIL_FROM || process.env.EMAIL_USER,\n        to: 'beratkaccow03@gmail.com, brtbllcankir03@gmail.com',\n        subject: `📊 Aylık Çalışma Raporum - ${new Date().toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" })}`,\n        html: `\n          <!DOCTYPE html>\n          <html>\n          <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          </head>\n          <body style=\"margin: 0; padding: 20px; background: #F3F4F6; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\">\n            \n            <div style=\"max-width: 800px; margin: 0 auto; background: linear-gradient(135deg, #E30A17 0%, #8B5CF6 50%, #E30A17 100%); padding: 25px; border-radius: 20px; box-shadow: 0 10px 40px rgba(0,0,0,0.3);\">\n              \n              <!-- Atatürk Sözü Bölümü - En Üst -->\n              <div style=\"background: rgba(255, 255, 255, 0.98); border-radius: 20px; padding: 35px; margin-bottom: 25px; text-align: center; border: 4px solid #E30A17; box-shadow: 0 8px 32px rgba(0,0,0,0.2);\">\n                \n                <!-- Türk Bayrağı -->\n                <div style=\"margin-bottom: 25px;\">\n                  <img src=\"cid:turkishflag\" alt=\"Türk Bayrağı\" style=\"width: 130px; height: auto; border-radius: 10px; box-shadow: 0 6px 16px rgba(0,0,0,0.25);\" />\n                </div>\n\n                <!-- Atatürk Sözü -->\n                <div style=\"margin: 25px 0;\">\n                  <p style=\"color: #1E293B; margin: 0; font-size: 21px; font-weight: bold; line-height: 1.7; font-style: italic; text-shadow: 1px 1px 3px rgba(0,0,0,0.1);\">\n                    \"Biz her şeyi gençliğe bırakacağız... Geleceğin ümidi,<br>\n                    ışıklı çiçekleri onlardır. Bütün ümidim gençliktedir.\"\n                  </p>\n                  <p style=\"color: #E30A17; margin: 18px 0 0 0; font-size: 17px; font-weight: bold; font-style: italic;\">\n                    - Mustafa Kemal Atatürk -\n                  </p>\n                </div>\n\n                <!-- Atatürk İmzası -->\n                <div style=\"margin: 25px 0;\">\n                  <img src=\"cid:ataturksignature\" alt=\"Atatürk İmza\" style=\"width: 200px; height: auto; opacity: 0.9;\" />\n                </div>\n\n                <!-- Atatürk Fotoğrafı -->\n                <div style=\"margin-top: 30px;\">\n                  <img src=\"cid:ataturkphoto\" alt=\"Mustafa Kemal Atatürk\" style=\"width: 150px; height: auto; border-radius: 15px; border: 4px solid #E30A17; box-shadow: 0 8px 24px rgba(0,0,0,0.35);\" />\n                </div>\n              </div>\n\n              <!-- Ana İçerik Alanı -->\n              <div style=\"background: white; border-radius: 20px; padding: 45px; box-shadow: 0 10px 40px rgba(0,0,0,0.2);\">\n                \n                <!-- Başlık -->\n                <div style=\"text-align: center; margin-bottom: 40px;\">\n                  <h1 style=\"color: #8B5CF6; margin: 0 0 12px 0; font-size: 34px; font-weight: bold; text-transform: uppercase;\">🎓 BERAT ÇAKIROĞLU</h1>\n                  <h2 style=\"color: #E30A17; margin: 0 0 18px 0; font-size: 24px; font-weight: bold;\">KİŞİSEL ÇALIŞMA ANALİZ RAPORU</h2>\n                  <p style=\"color: #6B7280; margin: 0; font-size: 16px;\">📅 ${new Date().toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\", year: \"numeric\" })} | 🎯 O üniversite kazanılacak!</p>\n                </div>\n\n                <!-- 1. Çözülen Soru ve Deneme -->\n                <div style=\"display: table; width: 100%; margin-bottom: 30px;\">\n                  <div style=\"display: table-cell; width: 50%; padding-right: 10px;\">\n                    <div style=\"background: linear-gradient(135deg, #8B5CF6 0%, #6D28D9 100%); color: white; padding: 30px; border-radius: 18px; text-align: center; box-shadow: 0 8px 24px rgba(139, 92, 246, 0.4); min-height: 120px; display: flex; flex-direction: column; justify-content: center;\">\n                      <div style=\"font-size: 48px; font-weight: bold; margin-bottom: 10px;\">${reportData.totalQuestions || 0}</div>\n                      <div style=\"font-size: 16px; opacity: 0.95; font-weight: 600; letter-spacing: 0.5px;\">📚 ÇÖZÜLEN SORU</div>\n                    </div>\n                  </div>\n                  <div style=\"display: table-cell; width: 50%; padding-left: 10px;\">\n                    <div style=\"background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%); color: white; padding: 30px; border-radius: 18px; text-align: center; box-shadow: 0 8px 24px rgba(239, 68, 68, 0.4); min-height: 120px; display: flex; flex-direction: column; justify-content: center;\">\n                      <div style=\"font-size: 48px; font-weight: bold; margin-bottom: 10px;\">${reportData.totalExams || 0}</div>\n                      <div style=\"font-size: 16px; opacity: 0.95; font-weight: 600; letter-spacing: 0.5px;\">🎯 ÇÖZÜLEN DENEME</div>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- 2. Doğru, Yanlış ve Boş Analizi -->\n                ${\n                  reportData.totalQuestions > 0\n                    ? `\n                <div style=\"background: linear-gradient(135deg, #F3F4F6 0%, #E5E7EB 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #10B981;\">\n                  <h3 style=\"color: #1E293B; margin: 0 0 25px 0; font-size: 20px; font-weight: bold;\">📊 DOĞRU, YANLIŞ VE BOŞ ANALİZİ</h3>\n                  <div style=\"display: table; width: 100%; margin-bottom: 20px;\">\n                    <div style=\"display: table-cell; width: 33.33%; padding-right: 7px;\">\n                      <div style=\"background: white; padding: 25px; border-radius: 14px; text-align: center; border: 3px solid #10B981;\">\n                        <div style=\"font-size: 42px; font-weight: bold; color: #10B981; margin-bottom: 8px;\">${reportData.correctAnswers || 0}</div>\n                        <div style=\"font-size: 15px; color: #059669; font-weight: 600;\">✅ Doğru</div>\n                      </div>\n                    </div>\n                    <div style=\"display: table-cell; width: 33.33%; padding: 0 7px;\">\n                      <div style=\"background: white; padding: 25px; border-radius: 14px; text-align: center; border: 3px solid #EF4444;\">\n                        <div style=\"font-size: 42px; font-weight: bold; color: #EF4444; margin-bottom: 8px;\">${reportData.wrongAnswers || 0}</div>\n                        <div style=\"font-size: 15px; color: #DC2626; font-weight: 600;\">❌ Yanlış</div>\n                      </div>\n                    </div>\n                    <div style=\"display: table-cell; width: 33.33%; padding-left: 7px;\">\n                      <div style=\"background: white; padding: 25px; border-radius: 14px; text-align: center; border: 3px solid #F59E0B;\">\n                        <div style=\"font-size: 42px; font-weight: bold; color: #F59E0B; margin-bottom: 8px;\">${reportData.blankAnswers || 0}</div>\n                        <div style=\"font-size: 15px; color: #D97706; font-weight: 600;\">⭕ Boş</div>\n                      </div>\n                    </div>\n                  </div>\n                  <div style=\"margin-top: 25px; text-align: center; padding: 20px; background: white; border-radius: 14px; border: 2px solid #8B5CF6;\">\n                    <div style=\"font-size: 38px; font-weight: bold; color: #8B5CF6; margin-bottom: 8px;\">${Math.round((reportData.correctAnswers / reportData.totalQuestions) * 100)}%</div>\n                    <div style=\"font-size: 16px; color: #6B7280; font-weight: 600;\">Başarı Oranım</div>\n                    <div style=\"font-size: 14px; color: #9CA3AF; margin-top: 8px;\">Net: ${reportData.correctAnswers - (reportData.wrongAnswers / 4)}</div>\n                  </div>\n                </div>\n                    `\n                    : \"\"\n                }\n\n                <!-- 3. Toplam Aktivite ve Tamamlanan Görevler -->\n                <div style=\"display: table; width: 100%; margin-bottom: 30px;\">\n                  <div style=\"display: table-cell; width: 50%; padding-right: 10px;\">\n                    <div style=\"background: linear-gradient(135deg, #10B981 0%, #059669 100%); color: white; padding: 30px; border-radius: 18px; text-align: center; box-shadow: 0 8px 24px rgba(16, 185, 129, 0.4); min-height: 180px; display: flex; flex-direction: column; justify-content: center;\">\n                      <h3 style=\"margin: 0 0 12px 0; font-size: 18px; font-weight: bold;\">📈 TOPLAM AKTİVİTE</h3>\n                      <div style=\"font-size: 48px; font-weight: bold; margin: 12px 0;\">${reportData.totalActivities || 0}</div>\n                      <p style=\"margin: 0; font-size: 14px; opacity: 0.95; line-height: 1.5;\">\n                        ${performanceMessage}\n                      </p>\n                    </div>\n                  </div>\n                  <div style=\"display: table-cell; width: 50%; padding-left: 10px;\">\n                    <div style=\"background: linear-gradient(135deg, #8B5CF6 0%, #6D28D9 100%); color: white; padding: 30px; border-radius: 18px; text-align: center; box-shadow: 0 8px 24px rgba(139, 92, 246, 0.4); min-height: 180px; display: flex; flex-direction: column; justify-content: center;\">\n                      <h3 style=\"margin: 0 0 12px 0; font-size: 18px; font-weight: bold;\">✅ TAMAMLANAN GÖREVLER</h3>\n                      <div style=\"font-size: 48px; font-weight: bold; margin: 12px 0;\">${reportData.completedTasks || 0}</div>\n                      <p style=\"margin: 0; font-size: 14px; opacity: 0.95;\">\n                        Toplam ${reportData.totalTasks || 0} görevden ${reportData.completedTasks || 0} tanesini tamamladım!\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                ${showAchievements ? `\n                <!-- Bu Ayın Öne Çıkan Başarıları -->\n                <div style=\"background: linear-gradient(135deg, #FEF3C7 0%, #FDE68A 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #F59E0B;\">\n                  <h3 style=\"color: #92400E; margin: 0 0 22px 0; font-size: 20px; font-weight: bold;\">💫 BU AYIN ÖNE ÇIKAN BAŞARILARI</h3>\n                  <ul style=\"color: #78350F; margin: 0; padding-left: 22px; line-height: 1.9; font-size: 15px;\">\n                    ${reportData.totalQuestions >= 1000 ? `<li style=\"margin-bottom: 8px;\"><strong>${reportData.totalQuestions}</strong> soru ile inanılmaz bir çalışma temposu sergiledim!</li>` : \"\"}\n                    ${reportData.tyt_net >= 60 ? `<li style=\"margin-bottom: 8px;\">TYT'de <strong>${reportData.tyt_net}</strong> net ile hedefime yaklaştım!</li>` : \"\"}\n                    ${reportData.ayt_net >= 35 ? `<li style=\"margin-bottom: 8px;\">AYT'de <strong>${reportData.ayt_net}</strong> net ile başarılı bir performans gösterdim!</li>` : \"\"}\n                    <li style=\"margin-bottom: 8px;\">Disiplinli çalışma alışkanlığımı sürdürüyorum</li>\n                    <li>Her gün hedefineme bir adım daha yaklaşıyorum</li>\n                  </ul>\n                </div>\n                ` : \"\"}\n\n                <!-- 4. Rekor Deneme Netleri -->\n                ${(reportData.maxTytNet > 0 || reportData.maxAytNet > 0) ? `\n                <div style=\"background: linear-gradient(135deg, #DBEAFE 0%, #BFDBFE 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #3B82F6;\">\n                  <h3 style=\"color: #1E40AF; margin: 0 0 20px 0; font-size: 20px; font-weight: bold;\">🏆 BU AYIN REKOR DENEME NETLERİ</h3>\n                  <div style=\"display: table; width: 100%;\">\n                    ${reportData.maxTytNet > 0 ? `\n                    <div style=\"display: table-cell; width: 50%; padding-right: 10px;\">\n                      <div style=\"background: white; padding: 25px; border-radius: 14px; text-align: center; border: 3px solid #8B5CF6;\">\n                        <div style=\"font-size: 16px; color: #6B7280; margin-bottom: 10px; font-weight: 600;\">TYT Rekor Net</div>\n                        <div style=\"font-size: 42px; font-weight: bold; color: #8B5CF6;\">${reportData.maxTytNet}</div>\n                      </div>\n                    </div>\n                    ` : ''}\n                    ${reportData.maxAytNet > 0 ? `\n                    <div style=\"display: table-cell; width: 50%; padding-left: ${reportData.maxTytNet > 0 ? '10px' : '0'};\">\n                      <div style=\"background: white; padding: 25px; border-radius: 14px; text-align: center; border: 3px solid #EF4444;\">\n                        <div style=\"font-size: 16px; color: #6B7280; margin-bottom: 10px; font-weight: 600;\">AYT Rekor Net</div>\n                        <div style=\"font-size: 42px; font-weight: bold; color: #EF4444;\">${reportData.maxAytNet}</div>\n                      </div>\n                    </div>\n                    ` : ''}\n                  </div>\n                </div>\n                ` : \"\"}\n\n                <!-- 5. Sık Hata Yapılan Konular -->\n                ${reportData.frequentWrongTopics && reportData.frequentWrongTopics.length > 0 ? `\n                <div style=\"background: linear-gradient(135deg, #FEE2E2 0%, #FECACA 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #EF4444;\">\n                  <h3 style=\"color: #991B1B; margin: 0 0 20px 0; font-size: 20px; font-weight: bold;\">⚠️ SIK HATA YAPILAN KONULAR</h3>\n                  <div style=\"color: #7F1D1D; font-size: 15px; line-height: 1.7;\">\n                    ${reportData.frequentWrongTopics.slice(0, 10).map((item, index) => `\n                      <div style=\"background: white; padding: 16px 20px; margin: 10px 0; border-radius: 10px; border-left: 4px solid #EF4444; display: flex; justify-content: space-between; align-items: center;\">\n                        <div>\n                          <strong style=\"color: #991B1B;\">${index + 1}. ${item.topic}</strong>\n                          <div style=\"font-size: 13px; color: #6B7280; margin-top: 4px;\">${item.subject}</div>\n                        </div>\n                        <div style=\"background: #EF4444; color: white; padding: 6px 14px; border-radius: 20px; font-weight: bold; font-size: 14px;\">\n                          ${item.count}x\n                        </div>\n                      </div>\n                    `).join('')}\n                  </div>\n                </div>\n                ` : \"\"}\n\n                <!-- 5. En Çok Hata Yapılan Dersler -->\n                ${reportData.mostWrongSubjects && reportData.mostWrongSubjects.length > 0 ? `\n                <div style=\"background: linear-gradient(135deg, #DBEAFE 0%, #BFDBFE 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #3B82F6;\">\n                  <h3 style=\"color: #1E40AF; margin: 0 0 20px 0; font-size: 20px; font-weight: bold;\">📉 EN ÇOK HATA YAPILAN DERSLER</h3>\n                  <div>\n                    ${reportData.mostWrongSubjects.slice(0, 3).map((subject, index) => `\n                      <div style=\"background: white; padding: 18px 22px; margin: 12px 0; border-radius: 12px; display: flex; justify-content: space-between; align-items: center; border-left: 4px solid #3B82F6;\">\n                        <span style=\"color: #1E3A8A; font-weight: 600; font-size: 16px;\">${index + 1}. ${subject.name}</span>\n                        <span style=\"color: #EF4444; font-weight: bold; font-size: 20px;\">${subject.count} hata</span>\n                      </div>\n                    `).join('')}\n                  </div>\n                </div>\n                ` : \"\"}\n\n                <!-- 6. En Çok Soru Çözülen Dersler -->\n                ${reportData.mostSolvedSubjects && reportData.mostSolvedSubjects.length > 0 ? `\n                <div style=\"background: linear-gradient(135deg, #D1FAE5 0%, #A7F3D0 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #10B981;\">\n                  <h3 style=\"color: #065F46; margin: 0 0 20px 0; font-size: 20px; font-weight: bold;\">📚 EN ÇOK SORU ÇÖZÜLEN DERSLER</h3>\n                  <div>\n                    ${reportData.mostSolvedSubjects.slice(0, 3).map((subject, index) => `\n                      <div style=\"background: white; padding: 18px 22px; margin: 12px 0; border-radius: 12px; display: flex; justify-content: space-between; align-items: center; border-left: 4px solid #10B981;\">\n                        <span style=\"color: #064E3B; font-weight: 600; font-size: 16px;\">${index + 1}. ${subject.name}</span>\n                        <span style=\"color: #10B981; font-weight: bold; font-size: 20px;\">${subject.count} soru</span>\n                      </div>\n                    `).join('')}\n                  </div>\n                </div>\n                ` : \"\"}\n\n                <!-- 7. En Çok Doğru Yapılan Dersler -->\n                ${reportData.mostCorrectSubjects && reportData.mostCorrectSubjects.length > 0 ? `\n                <div style=\"background: linear-gradient(135deg, #E0E7FF 0%, #C7D2FE 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #8B5CF6;\">\n                  <h3 style=\"color: #5B21B6; margin: 0 0 20px 0; font-size: 20px; font-weight: bold;\">🏆 EN ÇOK DOĞRU YAPILAN DERSLER</h3>\n                  <div>\n                    ${reportData.mostCorrectSubjects.slice(0, 3).map((subject, index) => `\n                      <div style=\"background: white; padding: 18px 22px; margin: 12px 0; border-radius: 12px; display: flex; justify-content: space-between; align-items: center; border-left: 4px solid #8B5CF6;\">\n                        <span style=\"color: #6D28D9; font-weight: 600; font-size: 16px;\">${index + 1}. ${subject.name}</span>\n                        <span style=\"color: #10B981; font-weight: bold; font-size: 20px;\">${subject.count} doğru</span>\n                      </div>\n                    `).join('')}\n                  </div>\n                </div>\n                ` : \"\"}\n\n                <!-- Deneme Detayları -->\n                ${reportData.examDetailsWithSubjects && reportData.examDetailsWithSubjects.length > 0 ? `\n                <div style=\"background: linear-gradient(135deg, #F3E8FF 0%, #E9D5FF 100%); padding: 30px; border-radius: 18px; margin-bottom: 30px; border-left: 6px solid #8B5CF6;\">\n                  <h3 style=\"color: #6B21A8; margin: 0 0 25px 0; font-size: 22px; font-weight: bold;\">📋 DENEME DETAYLARI</h3>\n                  ${reportData.examDetailsWithSubjects.map((exam, examIndex) => `\n                    <div style=\"background: white; padding: 25px; margin-bottom: 20px; border-radius: 14px; border: 2px solid #A78BFA;\">\n                      <!-- Deneme Başlığı -->\n                      <div style=\"margin-bottom: 20px; padding-bottom: 15px; border-bottom: 2px solid #E9D5FF;\">\n                        <h4 style=\"color: #7C3AED; margin: 0 0 8px 0; font-size: 18px; font-weight: bold;\">${exam.exam_name || `Deneme ${examIndex + 1}`}</h4>\n                        <div style=\"color: #6B7280; font-size: 14px;\">\n                          📅 ${new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: 'numeric', month: 'long', year: 'numeric' })} | \n                          📝 ${exam.exam_type || 'N/A'}\n                        </div>\n                      </div>\n\n                      <!-- Toplam Netler -->\n                      <div style=\"display: table; width: 100%; margin-bottom: 20px;\">\n                        ${exam.tyt_net ? `\n                        <div style=\"display: table-cell; width: 50%; padding-right: 10px;\">\n                          <div style=\"background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%); color: white; padding: 15px; border-radius: 10px; text-align: center;\">\n                            <div style=\"font-size: 14px; opacity: 0.9; margin-bottom: 5px;\">TYT Net</div>\n                            <div style=\"font-size: 28px; font-weight: bold;\">${exam.tyt_net}</div>\n                          </div>\n                        </div>\n                        ` : ''}\n                        ${exam.ayt_net ? `\n                        <div style=\"display: table-cell; width: 50%; padding-left: ${exam.tyt_net ? '10px' : '0'};\">\n                          <div style=\"background: linear-gradient(135deg, #EF4444 0%, #DC2626 100%); color: white; padding: 15px; border-radius: 10px; text-align: center;\">\n                            <div style=\"font-size: 14px; opacity: 0.9; margin-bottom: 5px;\">AYT Net</div>\n                            <div style=\"font-size: 28px; font-weight: bold;\">${exam.ayt_net}</div>\n                          </div>\n                        </div>\n                        ` : ''}\n                      </div>\n\n                      <!-- Ders Detayları -->\n                      ${exam.subjects && exam.subjects.length > 0 ? `\n                      <div style=\"margin-top: 20px;\">\n                        <h5 style=\"color: #6B21A8; margin: 0 0 15px 0; font-size: 16px; font-weight: bold;\">📚 Ders Bazında Performans</h5>\n                        ${exam.subjects.map((subject, subIndex) => `\n                          <div style=\"background: #F9FAFB; padding: 15px; margin: 10px 0; border-radius: 10px; border-left: 4px solid ${subIndex % 2 === 0 ? '#8B5CF6' : '#3B82F6'};\">\n                            <!-- Ders Adı -->\n                            <div style=\"font-weight: bold; color: #1F2937; margin-bottom: 10px; font-size: 15px;\">${subject.subject || 'Bilinmeyen Ders'}</div>\n                            \n                            <!-- Doğru Yanlış Boş Net -->\n                            <div style=\"display: table; width: 100%; margin-bottom: 10px;\">\n                              <div style=\"display: table-cell; width: 25%; padding-right: 5px;\">\n                                <div style=\"background: white; padding: 8px; border-radius: 6px; text-align: center; border: 2px solid #10B981;\">\n                                  <div style=\"font-size: 11px; color: #6B7280; margin-bottom: 3px;\">Doğru</div>\n                                  <div style=\"font-size: 16px; font-weight: bold; color: #10B981;\">${subject.correct_count || 0}</div>\n                                </div>\n                              </div>\n                              <div style=\"display: table-cell; width: 25%; padding: 0 5px;\">\n                                <div style=\"background: white; padding: 8px; border-radius: 6px; text-align: center; border: 2px solid #EF4444;\">\n                                  <div style=\"font-size: 11px; color: #6B7280; margin-bottom: 3px;\">Yanlış</div>\n                                  <div style=\"font-size: 16px; font-weight: bold; color: #EF4444;\">${subject.wrong_count || 0}</div>\n                                </div>\n                              </div>\n                              <div style=\"display: table-cell; width: 25%; padding: 0 5px;\">\n                                <div style=\"background: white; padding: 8px; border-radius: 6px; text-align: center; border: 2px solid #F59E0B;\">\n                                  <div style=\"font-size: 11px; color: #6B7280; margin-bottom: 3px;\">Boş</div>\n                                  <div style=\"font-size: 16px; font-weight: bold; color: #F59E0B;\">${subject.blank_count || 0}</div>\n                                </div>\n                              </div>\n                              <div style=\"display: table-cell; width: 25%; padding-left: 5px;\">\n                                <div style=\"background: linear-gradient(135deg, #8B5CF6 0%, #7C3AED 100%); padding: 8px; border-radius: 6px; text-align: center;\">\n                                  <div style=\"font-size: 11px; color: white; opacity: 0.9; margin-bottom: 3px;\">Net</div>\n                                  <div style=\"font-size: 16px; font-weight: bold; color: white;\">${subject.net_score || 0}</div>\n                                </div>\n                              </div>\n                            </div>\n\n                            <!-- Yanlış Konular -->\n                            ${subject.wrong_topics && subject.wrong_topics.length > 0 ? `\n                            <div style=\"margin-top: 12px; padding: 12px; background: white; border-radius: 8px;\">\n                              <div style=\"font-size: 12px; color: #991B1B; font-weight: bold; margin-bottom: 8px;\">❌ Yanlış Yapılan Konular:</div>\n                              <div style=\"font-size: 12px; color: #7F1D1D; line-height: 1.6;\">\n                                ${subject.wrong_topics.map(topic => `<div style=\"padding: 4px 0;\">• ${topic}</div>`).join('')}\n                              </div>\n                            </div>\n                            ` : '<div style=\"margin-top: 8px; font-size: 12px; color: #10B981; font-style: italic;\">✅ Bu derste yanlış konu kaydı yok</div>'}\n                          </div>\n                        `).join('')}\n                      </div>\n                      ` : ''}\n                    </div>\n                  `).join('')}\n                </div>\n                ` : \"\"}\n\n                <!-- Kapanış -->\n                <div style=\"text-align: center; margin-top: 35px; padding: 25px; background: linear-gradient(135deg, rgba(139, 92, 246, 0.15) 0%, rgba(227, 10, 23, 0.15) 100%); border-radius: 14px; border: 3px solid #E30A17;\">\n                  <p style=\"color: #8B5CF6; margin: 0 0 12px 0; font-size: 16px; font-weight: bold;\">\n                    🚀 Bu rapor ${new Date().toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\", year: \"numeric\" })} tarihinde otomatik olarak oluşturulmuştur.\n                  </p>\n                  <p style=\"color: #E30A17; margin: 0; font-size: 18px; font-weight: bold;\">\n                    🇹🇷 Berat Çakıroğlu Kişisel Analiz Sistemi 🇹🇷\n                  </p>\n                </div>\n              </div>\n            </div>\n          </body>\n          </html>\n        `,\n        attachments: [\n          {\n            filename: 'ataturk.png',\n            content: ataturkImage,\n            cid: 'ataturkphoto'\n          },\n          {\n            filename: 'ataturk-imza.png',\n            content: ataturkSignature,\n            cid: 'ataturksignature'\n          },\n          {\n            filename: 'turk-bayragi.png',\n            content: turkishFlag,\n            cid: 'turkishflag'\n          }\n        ],\n      };\n\n      // E-posta yapılandırması kontrolü\n      const emailUser = process.env.EMAIL_USER || process.env.GMAIL_USER;\n      const emailPass = process.env.EMAIL_PASS || process.env.GMAIL_PASS;\n      \n      if (!emailUser || !emailPass) {\n        return res.status(400).json({\n          success: false,\n          message: \"E-posta ayarları yapılandırılmamış! 📧\",\n          details: \"Rapor göndermek için e-posta ayarlarınızı yapmanız gerekiyor.\",\n          instructions: [\n            \"1. Replit Secrets bölümüne gidin\",\n            \"2. Aşağıdaki değişkenleri ekleyin:\",\n            \"   • EMAIL_USER: Gmail adresiniz (örn: ornek@gmail.com)\",\n            \"   • EMAIL_PASS: Gmail uygulama şifreniz\",\n            \"\",\n            \"⚠️ Önemli: Gmail için normal şifre değil, 'Uygulama Şifresi' kullanmalısınız!\",\n            \"\",\n            \"Gmail Uygulama Şifresi Alma Adımları:\",\n            \"1. Google Hesabım > Güvenlik bölümüne gidin\",\n            \"2. '2 Adımlı Doğrulama'yı aktif edin (zorunlu)\",\n            \"3. 'Uygulama şifreleri' kısmından yeni şifre oluşturun\",\n            \"4. Oluşan 16 haneli şifreyi EMAIL_PASS olarak kaydedin\"\n          ].join(\"\\n\")\n        });\n      }\n\n      // E-postayı gönder\n      try {\n        const info = await transporter.sendMail(mailOptions);\n        console.log(\"Email sent successfully:\", info.messageId);\n        res.json({\n          success: true,\n          message: \"✅ Rapor başarıyla e-posta adreslerine gönderildi!\",\n          details: `Rapor ${new Date().toLocaleString(\"tr-TR\")} tarihinde gönderildi.`\n        });\n      } catch (emailError: any) {\n        console.error(\"Email sending failed:\", emailError);\n\n        // Email hatasının türüne göre farklı mesajlar\n        if (emailError.code === \"ENOTFOUND\" || emailError.code === \"ECONNECTION\") {\n          res.status(500).json({\n            success: false,\n            message: \"🌐 İnternet bağlantısı hatası!\",\n            details: \"Email servisi ile bağlantı kurulamadı. Lütfen internet bağlantınızı kontrol edin.\",\n            error: emailError.message\n          });\n        } else if (emailError.responseCode === 550) {\n          res.status(400).json({\n            success: false,\n            message: \"📧 Geçersiz e-posta adresi!\",\n            details: \"Alıcı e-posta adresi bulunamadı veya geçersiz. Lütfen e-posta adreslerini kontrol edin.\",\n            error: emailError.message\n          });\n        } else if (emailError.responseCode === 535 || emailError.code === \"EAUTH\") {\n          res.status(401).json({\n            success: false,\n            message: \"🔐 Kimlik doğrulama hatası!\",\n            details: \"Gmail kullanıcı adı veya şifre yanlış.\",\n            instructions: [\n              \"• EMAIL_USER değişkeninin doğru Gmail adresi olduğundan emin olun\",\n              \"• EMAIL_PASS için Gmail Uygulama Şifresi kullandığınızdan emin olun\",\n              \"• Normal Gmail şifreniz çalışmaz, mutlaka Uygulama Şifresi oluşturun\",\n              \"• 2 Adımlı Doğrulama aktif olmalıdır\"\n            ].join(\"\\n\"),\n            error: emailError.message\n          });\n        } else {\n          res.status(500).json({\n            success: false,\n            message: \"❌ E-posta gönderiminde beklenmeyen hata!\",\n            details: emailError.message || \"Bilinmeyen bir hata oluştu.\",\n            help: \"Sorun devam ederse Replit Secrets bölümündeki EMAIL_USER ve EMAIL_PASS değerlerini kontrol edin.\"\n          });\n        }\n      }\n    } catch (error) {\n      console.error(\"Email error:\", error);\n      res\n        .status(500)\n        .json({ message: \"Rapor gönderilirken hata oluştu: \" + error.message });\n    }\n  });\n\n  // Test e-posta gönderimi - Farklı senaryolar için test endpoint'i\n  app.post(\"/api/test-emails\", async (req, res) => {\n    try {\n      const { email, testType } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ message: \"Email gerekli\" });\n      }\n\n      // Email format validation\n      const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n      if (!emailRegex.test(email)) {\n        return res\n          .status(400)\n          .json({ message: \"Geçerli bir email adresi giriniz\" });\n      }\n\n      // Test senaryoları için farklı veri setleri\n      const testScenarios = {\n        soru_eklendi: {\n          subject: \"🎯 Yeni Sorular Eklendi - Test\",\n          reportData: {\n            totalQuestions: 25,\n            correctAnswers: 20,\n            wrongAnswers: 5,\n            totalExams: 1,\n            totalTasks: 3,\n            totalActivities: 7,\n          },\n        },\n        deneme_tamamlandi: {\n          subject: \"📝 Deneme Sınavı Tamamlandı - Test\",\n          reportData: {\n            totalQuestions: 120,\n            correctAnswers: 85,\n            wrongAnswers: 35,\n            totalExams: 5,\n            totalTasks: 8,\n            totalActivities: 15,\n          },\n        },\n        hatali_konular: {\n          subject: \"⚠️ Hatalı Konular Analizi - Test\",\n          reportData: {\n            totalQuestions: 50,\n            correctAnswers: 30,\n            wrongAnswers: 20,\n            totalExams: 2,\n            totalTasks: 5,\n            totalActivities: 9,\n          },\n        },\n        gorev_eklendi: {\n          subject: \"✅ Yeni Görevler Eklendi - Test\",\n          reportData: {\n            totalQuestions: 15,\n            correctAnswers: 12,\n            wrongAnswers: 3,\n            totalExams: 1,\n            totalTasks: 12,\n            totalActivities: 20,\n          },\n        },\n        gorev_tamamlandi: {\n          subject: \"🎉 Görevler Tamamlandı - Test\",\n          reportData: {\n            totalQuestions: 40,\n            correctAnswers: 35,\n            wrongAnswers: 5,\n            totalExams: 3,\n            totalTasks: 15,\n            totalActivities: 25,\n          },\n        },\n        aylik_ozet: {\n          subject: \"📊 Aylık Özet Raporu - Test\",\n          reportData: {\n            totalQuestions: 200,\n            correctAnswers: 160,\n            wrongAnswers: 40,\n            totalExams: 8,\n            totalTasks: 25,\n            totalActivities: 50,\n          },\n        },\n      };\n\n      const scenario = testScenarios[testType] || testScenarios.aylik_ozet;\n\n      // PDF oluştur\n      const doc = new PDFKit({\n        size: \"A4\",\n        margin: 40,\n        bufferPages: true,\n      });\n\n      const buffers = [];\n      doc.on(\"data\", buffers.push.bind(buffers));\n      doc.on(\"end\", () => {\n        const pdfBuffer = Buffer.concat(buffers);\n\n        // Gmail SMTP konfigürasyonu\n        const transporter = nodemailer.createTransport({\n          service: \"gmail\",\n          host: \"smtp.gmail.com\",\n          port: 587,\n          secure: false,\n          auth: {\n            user: process.env.EMAIL_USER || process.env.GMAIL_USER,\n            pass: process.env.EMAIL_PASS || process.env.GMAIL_PASS,\n          },\n          tls: {\n            rejectUnauthorized: false,\n          },\n        });\n\n        // Test e-posta ayarları\n        const mailOptions = {\n          from: process.env.EMAIL_FROM || process.env.EMAIL_USER,\n          to: email,\n          subject: scenario.subject,\n          html: `\n            <div style=\"font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; max-width: 650px; margin: 0 auto; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); padding: 30px; border-radius: 16px;\">\n              \n              <!-- Atatürk'ün Sözü - En Üst -->\n              <div style=\"background: rgba(255, 255, 255, 0.95); border-radius: 12px; padding: 20px; margin-bottom: 20px; text-align: center; border-left: 6px solid #E53E3E;\">\n                <p style=\"color: #1E293B; margin: 0; font-size: 14px; font-weight: 600; line-height: 1.6; font-style: italic;\">\n                  \"Türk gençliği! Birinci vazifen; Türk istiklalini, Türk cumhuriyetini, ilelebet muhafaza ve müdafaa etmektir.\"\n                </p>\n                <p style=\"color: #64748B; margin: 8px 0 0 0; font-size: 12px; font-weight: bold;\">\n                  - Mustafa Kemal Atatürk\n                </p>\n              </div>\n\n              <div style=\"background: white; border-radius: 12px; padding: 30px; box-shadow: 0 8px 32px rgba(0,0,0,0.15);\">\n                \n                <!-- Test Mesajı -->\n                <div style=\"background: linear-gradient(135deg, #FEE2E2 0%, #FECACA 100%); padding: 20px; border-radius: 12px; margin-bottom: 25px; text-align: center; border: 2px solid #EF4444;\">\n                  <h3 style=\"color: #991B1B; margin: 0 0 10px 0; font-size: 18px;\">🧪 TEST E-POSTASI</h3>\n                  <p style=\"color: #B91C1C; margin: 0; font-size: 14px; line-height: 1.6; font-weight: 500;\">\n                    Bu bir test e-postasıdır. Test türü: <strong>${testType || \"aylik_ozet\"}</strong><br>\n                    ${new Date().toLocaleDateString(\"tr-TR\")} ${new Date().toLocaleTimeString(\"tr-TR\")} tarihinde gönderildi.\n                  </p>\n                </div>\n                \n                <!-- Başlık Kısmı -->\n                <div style=\"text-align: center; margin-bottom: 30px; border-bottom: 3px solid #8B5CF6; padding-bottom: 20px;\">\n                  <h1 style=\"color: #8B5CF6; margin: 0; font-size: 28px; font-weight: bold; margin-bottom: 8px;\">\n                    📊 Test Raporu\n                  </h1>\n                  <p style=\"color: #64748B; margin: 0; font-size: 16px; font-weight: 500;\">\n                    ${new Date().toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" })} Dönemi - Berat Çakıroğlu\n                  </p>\n                  <p style=\"color: #9CA3AF; margin: 5px 0 0 0; font-size: 12px;\">\n                    Test Rapor Tarihi: ${new Date().toLocaleDateString(\"tr-TR\")} ${new Date().toLocaleTimeString(\"tr-TR\")}\n                  </p>\n                </div>\n\n                <!-- İstatistik Kartları -->\n                <div style=\"display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px; margin-bottom: 25px;\">\n                  <div style=\"background: linear-gradient(135deg, #E0E7FF 0%, #C7D2FE 100%); padding: 18px; border-radius: 10px; text-align: center; border: 2px solid #8B5CF6;\">\n                    <div style=\"font-size: 32px; font-weight: bold; color: #5B21B6; margin-bottom: 5px;\">${scenario.reportData.totalTasks}</div>\n                    <div style=\"font-size: 13px; color: #6D28D9; font-weight: 700;\">Test Görevler</div>\n                  </div>\n                  <div style=\"background: linear-gradient(135deg, #DCFCE7 0%, #BBF7D0 100%); padding: 18px; border-radius: 10px; text-align: center; border: 2px solid #10B981;\">\n                    <div style=\"font-size: 32px; font-weight: bold; color: #065F46; margin-bottom: 5px;\">${scenario.reportData.totalQuestions}</div>\n                    <div style=\"font-size: 13px; color: #047857; font-weight: 700;\">Test Sorular</div>\n                  </div>\n                  <div style=\"background: linear-gradient(135deg, #FEE2E2 0%, #FECACA 100%); padding: 18px; border-radius: 10px; text-align: center; border: 2px solid #EF4444;\">\n                    <div style=\"font-size: 32px; font-weight: bold; color: #991B1B; margin-bottom: 5px;\">${scenario.reportData.totalExams}</div>\n                    <div style=\"font-size: 13px; color: #B91C1C; font-weight: 700;\">Test Denemeler</div>\n                  </div>\n                  <div style=\"background: linear-gradient(135deg, #FFF7ED 0%, #FDEDD3 100%); padding: 18px; border-radius: 10px; text-align: center; border: 2px solid #F59E0B;\">\n                    <div style=\"font-size: 32px; font-weight: bold; color: #92400E; margin-bottom: 5px;\">${scenario.reportData.totalActivities}</div>\n                    <div style=\"font-size: 13px; color: #A16207; font-weight: 700;\">Test Aktiviteler</div>\n                  </div>\n                </div>\n\n                <!-- Test Bilgisi -->\n                <div style=\"background: linear-gradient(135deg, #F3E8FF 0%, #E9D5FF 100%); padding: 25px; border-radius: 12px; text-align: center; margin-bottom: 25px; border: 2px solid #8B5CF6;\">\n                  <h3 style=\"color: #7C3AED; margin: 0 0 15px 0; font-size: 20px; font-weight: bold;\">🎯 Test Başarılı!</h3>\n                  <p style=\"color: #8B5CF6; margin: 0; font-size: 16px; font-weight: 600; line-height: 1.5;\">\n                    E-posta sistemi çalışıyor! Test verileri ile ${scenario.reportData.totalActivities} aktivite simüle edildi.<br>\n                    <span style=\"font-size: 14px; color: #9333EA;\">Gmail SMTP entegrasyonu başarılı! 🚀</span>\n                  </p>\n                </div>\n\n                <!-- Alt Bilgi -->\n                <div style=\"border-top: 3px solid #E5E7EB; padding-top: 20px; text-align: center;\">\n                  <p style=\"color: #6B7280; margin: 0 0 10px 0; font-size: 13px; font-weight: 500;\">\n                    📧 Bu test e-postası Berat Çakıroğlu Analiz Sistemi tarafından gönderildi\n                  </p>\n                  <p style=\"color: #9CA3AF; margin: 0; font-size: 12px;\">\n                    📱 Test türü: ${testType || \"aylik_ozet\"} | 📋 PDF test raporu ekte\n                  </p>\n                </div>\n              </div>\n            </div>\n          `,\n          attachments: [\n            {\n              filename: `test-raporu-${testType || \"aylik_ozet\"}-${new Date().toLocaleDateString(\"tr-TR\").replace(/\\./g, \"-\")}.pdf`,\n              content: pdfBuffer,\n              contentType: \"application/pdf\",\n            },\n          ],\n        };\n\n        // E-postayı gönder\n        if (process.env.EMAIL_USER && process.env.EMAIL_PASS) {\n          transporter\n            .sendMail(mailOptions)\n            .then(() => {\n              res.json({\n                message: `Test e-postası başarıyla gönderildi! Test türü: ${testType || \"aylik_ozet\"}`,\n                testType: testType || \"aylik_ozet\",\n                emailSent: true,\n              });\n            })\n            .catch((emailError) => {\n              console.error(\"Test email gönderim hatası:\", emailError);\n              res.status(500).json({\n                message: `Test e-posta gönderiminde hata: ${emailError.message}`,\n                testType: testType || \"aylik_ozet\",\n                emailSent: false,\n              });\n            });\n        } else {\n          res.json({\n            message:\n              \"E-posta kimlik bilgileri yapılandırılmamış - Test PDF oluşturuldu\",\n            testType: testType || \"aylik_ozet\",\n            emailSent: false,\n          });\n        }\n      });\n\n      // PDF içeriği oluştur\n      generatePDFContent(doc, scenario.reportData);\n      doc.end();\n    } catch (error) {\n      console.error(\"Test email error:\", error);\n      res\n        .status(500)\n        .json({ message: \"Test e-posta gönderiminde hata oluştu\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":110114},"server/storage.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { type Task, type InsertTask, type Mood, type InsertMood, type Goal, type InsertGoal, type QuestionLog, type InsertQuestionLog, type ExamResult, type InsertExamResult, type ExamSubjectNet, type InsertExamSubjectNet } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Görev işlemleri\n  getTasks(): Promise<Task[]>;\n  getTask(id: string): Promise<Task | undefined>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined>;\n  deleteTask(id: string): Promise<boolean>;\n  toggleTaskComplete(id: string): Promise<Task | undefined>;\n  getTasksByDate(dateISO: string): Promise<Task[]>;\n  getDailySummary(rangeDays: number): Promise<any>;\n  \n  // Ruh hali işlemleri\n  getMoods(): Promise<Mood[]>;\n  getLatestMood(): Promise<Mood | undefined>;\n  createMood(mood: InsertMood): Promise<Mood>;\n\n  // Hedef işlemleri\n  getGoals(): Promise<Goal[]>;\n  getGoal(id: string): Promise<Goal | undefined>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined>;\n  deleteGoal(id: string): Promise<boolean>;\n  \n  // Soru günlüğü işlemi\n  getQuestionLogs(): Promise<QuestionLog[]>;\n  createQuestionLog(log: InsertQuestionLog): Promise<QuestionLog>;\n  getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]>;\n  deleteQuestionLog(id: string): Promise<boolean>;\n  deleteAllQuestionLogs(): Promise<boolean>;\n  \n  // konu istatistikleri işlemleri\n  getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>>;\n  getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>>;\n  getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>>;\n  \n  // Sınav sonucu işlemleri\n  getExamResults(): Promise<ExamResult[]>;\n  createExamResult(result: InsertExamResult): Promise<ExamResult>;\n  deleteExamResult(id: string): Promise<boolean>;\n  deleteAllExamResults(): Promise<boolean>;\n  \n  // Sınav konusu network işlemleri\n  getExamSubjectNets(): Promise<ExamSubjectNet[]>;\n  getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]>;\n  createExamSubjectNet(examSubjectNet: InsertExamSubjectNet): Promise<ExamSubjectNet>;\n  updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined>;\n  deleteExamSubjectNet(id: string): Promise<boolean>;\n  deleteExamSubjectNetsByExamId(examId: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private tasks: Map<string, Task>;\n  private moods: Map<string, Mood>;\n  private goals: Map<string, Goal>;\n  private questionLogs: Map<string, QuestionLog>;\n  private examResults: Map<string, ExamResult>;\n  private examSubjectNets: Map<string, ExamSubjectNet>;\n\n  constructor() {\n    this.tasks = new Map();\n    this.moods = new Map();\n    this.goals = new Map();\n    this.questionLogs = new Map();\n    this.examResults = new Map();\n    this.examSubjectNets = new Map();\n    \n    // Bazı örnek hedeflerle başlatın\n    this.initializeSampleGoals();\n  }\n  \n  private async initializeSampleGoals() {\n    const sampleGoals = [\n      {\n        title: \"TYT Net Hedefi\",\n        description: \"2026 TYT'de 75 net hedefliyorum\",\n        targetValue: \"75\",\n        currentValue: \"68.75\",\n        unit: \"net\",\n        category: \"tyt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-20\"\n      },\n      {\n        title: \"AYT Net Hedefi\",\n        description: \"2026 AYT'de 60 net hedefliyorum\",\n        targetValue: \"60\",\n        currentValue: \"45.50\",\n        unit: \"net\",\n        category: \"ayt\" as const,\n        timeframe: \"aylık\" as const,\n        targetDate: \"2026-06-21\"\n      },\n      {\n        title: \"Sıralama Hedefi\",\n        description: \"10.000'inci sıranın üstünde olmak istiyorum\",\n        targetValue: \"10000\",\n        currentValue: \"15750\",\n        unit: \"sıralama\",\n        category: \"siralama\" as const,\n        timeframe: \"yıllık\" as const,\n        targetDate: \"2026-06-21\"\n      }\n    ];\n    \n    for (const goal of sampleGoals) {\n      await this.createGoal(goal);\n    }\n  }\n\n  // Görev işlemleri\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values()).sort((a, b) => {\n      // Öncelik sırasına göre (yüksek -> orta -> düşük) ve ardından oluşturulma tarihine göre sırala\n      const priorityOrder = { high: 0, medium: 1, low: 2 };\n      const aPriority = priorityOrder[a.priority as keyof typeof priorityOrder];\n      const bPriority = priorityOrder[b.priority as keyof typeof priorityOrder];\n      \n      if (aPriority !== bPriority) {\n        return aPriority - bPriority;\n      }\n      \n      return new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime();\n    });\n  }\n\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      id,\n      title: insertTask.title,\n      description: insertTask.description ?? null,\n      priority: insertTask.priority ?? \"medium\",\n      category: insertTask.category ?? \"genel\",\n      color: insertTask.color ?? \"#8B5CF6\", // mor\n      completed: insertTask.completed ?? false,\n      completedAt: null,\n      dueDate: insertTask.dueDate ?? null,\n      recurrenceType: insertTask.recurrenceType ?? \"none\",\n      recurrenceEndDate: insertTask.recurrenceEndDate ?? null,\n      createdAt: new Date(),\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<InsertTask>): Promise<Task | undefined> {\n    const existingTask = this.tasks.get(id);\n    if (!existingTask) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...existingTask,\n      ...updates,\n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  async deleteTask(id: string): Promise<boolean> {\n    return this.tasks.delete(id);\n  }\n\n  async toggleTaskComplete(id: string): Promise<Task | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) {\n      return undefined;\n    }\n\n    const updatedTask: Task = {\n      ...task,\n      completed: !task.completed,\n      completedAt: !task.completed ? new Date().toISOString() : null,\n    };\n    this.tasks.set(id, updatedTask);\n    return updatedTask;\n  }\n\n  // Ruh hali işlemleri\n  async getMoods(): Promise<Mood[]> {\n    return Array.from(this.moods.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getLatestMood(): Promise<Mood | undefined> {\n    const moods = await this.getMoods();\n    return moods[0];\n  }\n\n  async createMood(insertMood: InsertMood): Promise<Mood> {\n    const id = randomUUID();\n    const mood: Mood = {\n      id,\n      mood: insertMood.mood,\n      moodBg: insertMood.moodBg ?? null,\n      note: insertMood.note ?? null,\n      createdAt: new Date(),\n    };\n    this.moods.set(id, mood);\n    return mood;\n  }\n\n  // Yeni işlevsellik için yöntemler\n  async getTasksByDate(dateISO: string): Promise<Task[]> {\n    const tasks = await this.getTasks();\n    const today = new Date().toISOString().split('T')[0];\n    \n    return tasks.filter(task => {\n      // Eğer görevin son tarihi varsa, istenen tarihle eşleşip eşleşmediğini kontrol et\n      if (task.dueDate) {\n        const taskDate = task.dueDate.split('T')[0];\n        return taskDate === dateISO;\n      }\n\n      // Görevin son tarihi yoksa, bugün için tüm görevleri göster (tamamlanmış veya bekleyen)\n      if (dateISO === today) {\n        return true; // Bugün için tüm görevleri göster\n      }\n      \n      return false;\n    });\n  }\n\n  async getDailySummary(rangeDays: number = 30): Promise<any> {\n    const tasks = await this.getTasks();\n    const moods = await this.getMoods();\n    \n    const today = new Date();\n    const summaryData = [];\n    \n    for (let i = 0; i < rangeDays; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      \n      const dayTasks = tasks.filter(task => {\n        if (!task.completedAt) return false;\n        const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n        return completedDate === dateStr;\n      });\n      \n      const dayMoods = moods.filter(mood => {\n        if (!mood.createdAt) return false;\n        const moodDate = new Date(mood.createdAt).toISOString().split('T')[0];\n        return moodDate === dateStr;\n      });\n      \n      summaryData.push({\n        date: dateStr,\n        tasksCompleted: dayTasks.length,\n        totalTasks: tasks.filter(task => {\n          if (!task.createdAt) return false;\n          const createdDate = new Date(task.createdAt).toISOString().split('T')[0];\n          return createdDate <= dateStr;\n        }).length,\n        moods: dayMoods,\n        productivity: dayTasks.length > 0 ? Math.min(dayTasks.length * 20, 100) : 0\n      });\n    }\n    \n    return summaryData;\n  }\n  \n  // Hedef operasyonları\n  async getGoals(): Promise<Goal[]> {\n    return Array.from(this.goals.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getGoal(id: string): Promise<Goal | undefined> {\n    return this.goals.get(id);\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = {\n      id,\n      title: insertGoal.title,\n      description: insertGoal.description ?? null,\n      category: insertGoal.category ?? \"genel\",\n      targetDate: insertGoal.targetDate ?? null,\n      completed: insertGoal.completed ?? false,\n      currentValue: insertGoal.currentValue ?? \"0\",\n      targetValue: insertGoal.targetValue ?? \"100\",\n      unit: insertGoal.unit ?? \"net\",\n      timeframe: insertGoal.timeframe ?? \"aylık\",\n      createdAt: new Date(),\n    };\n    this.goals.set(id, goal);\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<InsertGoal>): Promise<Goal | undefined> {\n    const existingGoal = this.goals.get(id);\n    if (!existingGoal) {\n      return undefined;\n    }\n\n    const updatedGoal: Goal = {\n      ...existingGoal,\n      ...updates,\n    };\n    this.goals.set(id, updatedGoal);\n    return updatedGoal;\n  }\n\n  async deleteGoal(id: string): Promise<boolean> {\n    return this.goals.delete(id);\n  }\n\n  // Soru günlüğü işlemleri\n  async getQuestionLogs(): Promise<QuestionLog[]> {\n    return Array.from(this.questionLogs.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async createQuestionLog(insertLog: InsertQuestionLog): Promise<QuestionLog> {\n    const id = randomUUID();\n    \n    // Yanlış konuları normalleştirerek konu öneklerini kaldırın\n    const normalizedWrongTopics = insertLog.wrong_topics ? \n      insertLog.wrong_topics.map(topic => this.normalizeTopic(topic)) : [];\n    \n    const log: QuestionLog = {\n      id,\n      exam_type: insertLog.exam_type,\n      subject: insertLog.subject,\n      topic: insertLog.topic ?? null,\n      correct_count: insertLog.correct_count,\n      wrong_count: insertLog.wrong_count,\n      blank_count: insertLog.blank_count ?? \"0\",\n      wrong_topics: normalizedWrongTopics,\n      wrong_topics_json: insertLog.wrong_topics_json ?? null,\n      time_spent_minutes: insertLog.time_spent_minutes ?? null,\n      study_date: insertLog.study_date,\n      createdAt: new Date(),\n    };\n    this.questionLogs.set(id, log);\n    return log;\n  }\n\n  async getQuestionLogsByDateRange(startDate: string, endDate: string): Promise<QuestionLog[]> {\n    const logs = Array.from(this.questionLogs.values());\n    return logs.filter(log => {\n      const logDate = log.study_date;\n      return logDate >= startDate && logDate <= endDate;\n    }).sort((a, b) => new Date(b.study_date).getTime() - new Date(a.study_date).getTime());\n  }\n\n  async deleteQuestionLog(id: string): Promise<boolean> {\n    return this.questionLogs.delete(id);\n  }\n\n  async deleteAllQuestionLogs(): Promise<boolean> {\n    this.questionLogs.clear();\n    return true;\n  }\n  \n  // Sınav sonucu işlemleri\n  async getExamResults(): Promise<ExamResult[]> {\n    return Array.from(this.examResults.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async createExamResult(insertResult: InsertExamResult): Promise<ExamResult> {\n    const id = randomUUID();\n    const result: ExamResult = {\n      id,\n      exam_name: insertResult.exam_name,\n      exam_date: insertResult.exam_date,\n      exam_type: insertResult.exam_type ?? null,\n      notes: insertResult.notes ?? null,\n      ranking: insertResult.ranking ?? null,\n      tyt_net: insertResult.tyt_net ?? \"0\",\n      ayt_net: insertResult.ayt_net ?? \"0\",\n      subjects_data: insertResult.subjects_data ?? null,\n      createdAt: new Date(),\n    };\n    this.examResults.set(id, result);\n    return result;\n  }\n\n  async deleteExamResult(id: string): Promise<boolean> {\n    const deleted = this.examResults.delete(id);\n    if (deleted) {\n      // İlişkili sınav konu netlerini cascade olarak sil\n      await this.deleteExamSubjectNetsByExamId(id);\n    }\n    return deleted;\n  }\n\n  async deleteAllExamResults(): Promise<boolean> {\n    this.examResults.clear();\n    this.examSubjectNets.clear(); // Ayrıca tüm konu ağlarını temizle\n    return true;\n  }\n  // Flashcard işlemleri (silinecek)\n  \n  // TYT/AYT konu öneklerini kaldırarak konu adlarını normalleştirin\n  private normalizeTopic(topic: string): string {\n    // TYT veya AYT ile başlayan ve ardından herhangi bir karakter dizisi, boşluk, tire ve ardından gerçek konu adı gelen konuları normalleştir\n    return topic.replace(/^(TYT|AYT)\\s+[^-]+\\s+-\\s+/, '').trim();\n  }\n\n  // Konu istatistik işlemleri (kullanıcılar tarafından belirtilen belirli yanlış konular)\n  async getTopicStats(): Promise<Array<{ topic: string; wrongMentions: number; totalSessions: number; mentionFrequency: number }>> {\n    const logs = Array.from(this.questionLogs.values());\n    const examResults = Array.from(this.examResults.values());\n    const topicStats = new Map<string, { wrongMentions: number; sessionsAppeared: Set<string> }>();\n\n    // Süreç soru günlükleri\n    logs.forEach(log => {\n      // Sadece özellikle belirtilen yanlış konuları takip et, genel konuları değil\n      if (log.wrong_topics && log.wrong_topics.length > 0) {\n        log.wrong_topics.forEach(topic => {\n          const normalizedTopic = this.normalizeTopic(topic);\n          if (!topicStats.has(normalizedTopic)) {\n            topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n          }\n          const topicStat = topicStats.get(normalizedTopic)!;\n          topicStat.wrongMentions += 1; // Bu konunun yanlış olarak ne kadar sıklıkla belirtildiğini say\n          topicStat.sessionsAppeared.add(log.id); // Bu konunun göründüğü benzersiz oturumları takip et\n        });\n      }\n    });\n\n    // Süreç sınav sonuçları yanlış konuları\n    examResults.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.values(subjectsData).forEach((subjectData: any) => {\n            if (subjectData.wrong_topics && Array.isArray(subjectData.wrong_topics)) {\n              subjectData.wrong_topics.forEach((topic: string) => {\n                if (topic && topic.trim().length > 0) {\n                  const normalizedTopic = this.normalizeTopic(topic);\n                  if (!topicStats.has(normalizedTopic)) {\n                    topicStats.set(normalizedTopic, { wrongMentions: 0, sessionsAppeared: new Set() });\n                  }\n                  const topicStat = topicStats.get(normalizedTopic)!;\n                  topicStat.wrongMentions += 2; // Ağırlık hataları daha yüksek (2 kat)\n                  topicStat.sessionsAppeared.add(`exam_${exam.id}`);\n                }\n              });\n            }\n          });\n        } catch (e) {\n          // Bozuk JSON'ları atla\n        }\n      }\n    });\n\n    const totalSessions = logs.length;\n    \n    return Array.from(topicStats.entries())\n      .map(([topic, stats]) => ({\n        topic,\n        wrongMentions: stats.wrongMentions,\n        totalSessions: stats.sessionsAppeared.size,\n        mentionFrequency: totalSessions > 0 ? (stats.sessionsAppeared.size / totalSessions) * 100 : 0\n      }))\n      .filter(stat => stat.wrongMentions >= 2) // Gürültüyü önlemek için en az iki kez bahsedilen konuları göster\n      .sort((a, b) => b.wrongMentions - a.wrongMentions);\n  }\n\n  async getPriorityTopics(): Promise<Array<{ topic: string; wrongMentions: number; mentionFrequency: number; priority: 'critical' | 'high' | 'medium' | 'low'; color: string }>> {\n    const topicStats = await this.getTopicStats();\n    \n    return topicStats.map(stat => {\n      let priority: 'critical' | 'high' | 'medium' | 'low';\n      let color: string;\n      \n      // Yanlış bahsetme sayısı ve sıklığına göre öncelik\n      if (stat.wrongMentions >= 10 || stat.mentionFrequency >= 50) {\n        priority = 'critical';\n        color = '#DC2626'; // Kırmızı\n      } else if (stat.wrongMentions >= 6 || stat.mentionFrequency >= 30) {\n        priority = 'high';\n        color = '#EA580C'; // Turuncu\n      } else if (stat.wrongMentions >= 3 || stat.mentionFrequency >= 15) {\n        priority = 'medium';\n        color = '#D97706'; // Amber\n      } else {\n        priority = 'low';\n        color = '#16A34A'; // Yeşil\n      }\n      \n      return {\n        topic: stat.topic,\n        wrongMentions: stat.wrongMentions,\n        mentionFrequency: stat.mentionFrequency,\n        priority,\n        color\n      };\n    });\n  }\n\n  async getSubjectSolvedStats(): Promise<Array<{ subject: string; totalQuestions: number; totalTimeMinutes: number; averageTimePerQuestion: number }>> {\n    const logs = Array.from(this.questionLogs.values());\n    const subjectStats = new Map<string, { totalQuestions: number; totalTimeMinutes: number }>();\n\n    logs.forEach(log => {\n      const totalQuestions = parseInt(log.correct_count) + parseInt(log.wrong_count) + parseInt(log.blank_count || \"0\");\n      const timeSpent = log.time_spent_minutes || 0;\n      \n      if (!subjectStats.has(log.subject)) {\n        subjectStats.set(log.subject, { totalQuestions: 0, totalTimeMinutes: 0 });\n      }\n      \n      const stats = subjectStats.get(log.subject)!;\n      stats.totalQuestions += totalQuestions;\n      stats.totalTimeMinutes += timeSpent;\n    });\n\n    return Array.from(subjectStats.entries())\n      .map(([subject, stats]) => ({\n        subject,\n        totalQuestions: stats.totalQuestions,\n        totalTimeMinutes: stats.totalTimeMinutes,\n        averageTimePerQuestion: stats.totalQuestions > 0 ? stats.totalTimeMinutes / stats.totalQuestions : 0\n      }))\n      .filter(stat => stat.totalQuestions > 0)\n      .sort((a, b) => b.totalQuestions - a.totalQuestions);\n  }\n\n  // Yanlış bahsetme sayısı ve sıklığına göre öncelikSınav konusu ağ işlemleri\n  async getExamSubjectNets(): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values()).sort((a, b) => \n      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()\n    );\n  }\n\n  async getExamSubjectNetsByExamId(examId: string): Promise<ExamSubjectNet[]> {\n    return Array.from(this.examSubjectNets.values())\n      .filter(net => net.exam_id === examId)\n      .sort((a, b) => a.subject.localeCompare(b.subject));\n  }\n\n  async createExamSubjectNet(insertNet: InsertExamSubjectNet): Promise<ExamSubjectNet> {\n    // Sınavın varlığını doğrulayın\n    const examExists = this.examResults.has(insertNet.exam_id);\n    if (!examExists) {\n      throw new Error(`Exam with id ${insertNet.exam_id} does not exist`);\n    }\n    \n    const id = randomUUID();\n    const examSubjectNet: ExamSubjectNet = {\n      id,\n      exam_id: insertNet.exam_id,\n      exam_type: insertNet.exam_type,\n      subject: insertNet.subject,\n      net_score: insertNet.net_score,\n      correct_count: insertNet.correct_count ?? \"0\",\n      wrong_count: insertNet.wrong_count ?? \"0\",\n      blank_count: insertNet.blank_count ?? \"0\",\n      createdAt: new Date(),\n    };\n    this.examSubjectNets.set(id, examSubjectNet);\n    return examSubjectNet;\n  }\n\n  async updateExamSubjectNet(id: string, updates: Partial<InsertExamSubjectNet>): Promise<ExamSubjectNet | undefined> {\n    const existing = this.examSubjectNets.get(id);\n    if (!existing) {\n      return undefined;\n    }\n\n    const updated: ExamSubjectNet = {\n      ...existing,\n      ...updates,\n    };\n    this.examSubjectNets.set(id, updated);\n    return updated;\n  }\n\n  async deleteExamSubjectNet(id: string): Promise<boolean> {\n    return this.examSubjectNets.delete(id);\n  }\n\n  async deleteExamSubjectNetsByExamId(examId: string): Promise<boolean> {\n    const netsToDelete = Array.from(this.examSubjectNets.entries())\n      .filter(([_, net]) => net.exam_id === examId);\n    \n    let deletedAny = false;\n    for (const [id, _] of netsToDelete) {\n      if (this.examSubjectNets.delete(id)) {\n        deletedAny = true;\n      }\n    }\n    return deletedAny;\n  }\n}\nexport const storage = new MemStorage();\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":21903},"server/vite.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2527},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  priority: text(\"priority\", { enum: [\"low\", \"medium\", \"high\"] }).notNull().default(\"medium\"),\n  category: text(\"category\", { enum: [\"genel\", \"turkce\", \"sosyal\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tyt-geometri\", \"ayt-geometri\", \"ayt-matematik\", \"ayt-fizik\", \"ayt-kimya\", \"ayt-biyoloji\"] }).notNull().default(\"genel\"),\n  color: text(\"color\").default(\"#8B5CF6\"), // Varsayılan mor renk\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: text(\"completed_at\"),\n  dueDate: text(\"due_date\"),\n  recurrenceType: text(\"recurrence_type\", { enum: [\"none\", \"weekly\", \"monthly\"] }).notNull().default(\"none\"),\n  recurrenceEndDate: text(\"recurrence_end_date\"), // İsteğe bağlı - yinelenen görevlerin oluşturulmasını ne zaman durdurmak istediğiniz\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moods = pgTable(\"moods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  mood: text(\"mood\").notNull(), // Sınırsız emoji desteği\n  moodBg: text(\"mood_bg\"), // Arka plan rengi\n  note: text(\"note\"), // Daha iyi açıklık için sözlerden yeniden adlandırıldı\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const goals = pgTable(\"goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  targetValue: text(\"target_value\").notNull(), // örneğin, “75”, “10000”\n  currentValue: text(\"current_value\").notNull().default(\"0\"),\n  unit: text(\"unit\").notNull(), // örneğin, \"net\", \"sıralama\"\n  category: text(\"category\", { enum: [\"tyt\", \"ayt\", \"siralama\", \"genel\"] }).notNull().default(\"genel\"),\n  timeframe: text(\"timeframe\", { enum: [\"günlük\", \"haftalık\", \"aylık\", \"yıllık\"] }).notNull().default(\"aylık\"),\n  targetDate: text(\"target_date\"),\n  completed: boolean(\"completed\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const questionLogs = pgTable(\"question_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(), // Türkçe, Matematik, Fizik etc.\n  topic: text(\"topic\"), // İsteğe bağlı - konu içindeki belirli konu için ayrıntılı analiz\n  correct_count: text(\"correct_count\").notNull(),\n  wrong_count: text(\"wrong_count\").notNull(),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  wrong_topics: text(\"wrong_topics\").array().default([]), // Hataların yapıldığı konuların dizisi (eski)\n  wrong_topics_json: text(\"wrong_topics_json\"), // Yapılandırılmış yanlış konu verileri için JSON dizesi {topic, difficulty, category, notes}\n  time_spent_minutes: integer(\"time_spent_minutes\"), // İsteğe bağlı - soruları çözmek için harcanan süre (dakika)\n  study_date: text(\"study_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const examResults = pgTable(\"exam_results\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_name: text(\"exam_name\").notNull(),\n  exam_date: text(\"exam_date\").notNull(),\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }), // Geriye dönük uyumluluk için isteğe bağlı\n  tyt_net: text(\"tyt_net\").notNull().default(\"0\"),\n  ayt_net: text(\"ayt_net\").notNull().default(\"0\"),\n  subjects_data: text(\"subjects_data\"), // Ayrıntılı konu analizi içeren JSON dizesi\n  ranking: text(\"ranking\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sınav başına ayrıntılı konu düzeyinde net puanlar için yeni tablo\nexport const examSubjectNets = pgTable(\"exam_subject_nets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  exam_id: varchar(\"exam_id\").notNull(), // Referanslar examResults.id\n  exam_type: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull(),\n  subject: text(\"subject\").notNull(), // Türkçe, Matematik, Fizik, Kimya, Biyoloji, etc.\n  net_score: text(\"net_score\").notNull(), // Konu bazında net puan\n  correct_count: text(\"correct_count\").notNull().default(\"0\"),\n  wrong_count: text(\"wrong_count\").notNull().default(\"0\"),\n  blank_count: text(\"blank_count\").notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const flashcards = pgTable(\"flashcards\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  examType: text(\"exam_type\", { enum: [\"TYT\", \"AYT\"] }).notNull().default(\"TYT\"),\n  subject: text(\"subject\", { enum: [\"turkce\", \"matematik\", \"fizik\", \"kimya\", \"biyoloji\", \"tarih\", \"cografya\", \"felsefe\", \"genel\"] }).notNull().default(\"genel\"),\n  topic: text(\"topic\"), // Konular için alan eklendi\n  difficulty: text(\"difficulty\", { enum: [\"easy\", \"medium\", \"hard\"] }).notNull().default(\"medium\"),\n  lastReviewed: timestamp(\"last_reviewed\"),\n  nextReview: timestamp(\"next_review\").defaultNow(),\n  reviewCount: text(\"review_count\").notNull().default(\"0\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nconst taskSchemaBase = createInsertSchema(tasks);\nexport const insertTaskSchema = taskSchemaBase.omit({ id: true, createdAt: true, completedAt: true });\n\nconst moodSchemaBase = createInsertSchema(moods);\nexport const insertMoodSchema = moodSchemaBase.omit({ id: true, createdAt: true });\n\nconst goalSchemaBase = createInsertSchema(goals);\nexport const insertGoalSchema = goalSchemaBase.omit({ id: true, createdAt: true });\n\nconst questionLogSchemaBase = createInsertSchema(questionLogs);\nexport const insertQuestionLogSchema = questionLogSchemaBase.omit({ id: true, createdAt: true }).extend({\n  // Hem eski wrong_topics dizisini hem de yeni yapılandırılmış biçimi izin ver\n  wrong_topics: z.array(z.string()).optional(),\n  wrong_topics_json: z.string().optional(),\n});\n\nconst examResultSchemaBase = createInsertSchema(examResults);\nexport const insertExamResultSchema = examResultSchemaBase.omit({ id: true, createdAt: true }).extend({\n  // Geriye dönük uyumluluk için exam_type seçeneğini isteğe bağlı hale getir\n  exam_type: z.enum([\"TYT\", \"AYT\"]).optional(),\n});\n\nconst flashcardSchemaBase = createInsertSchema(flashcards);\nexport const insertFlashcardSchema = flashcardSchemaBase.omit({ id: true, createdAt: true, reviewCount: true });\n\nconst examSubjectNetSchemaBase = createInsertSchema(examSubjectNets);\nexport const insertExamSubjectNetSchema = examSubjectNetSchemaBase.omit({ id: true, createdAt: true });\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Mood = typeof moods.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof goals.$inferSelect;\nexport type InsertQuestionLog = z.infer<typeof insertQuestionLogSchema>;\nexport type QuestionLog = typeof questionLogs.$inferSelect;\nexport type InsertExamResult = z.infer<typeof insertExamResultSchema>;\nexport type ExamResult = typeof examResults.$inferSelect;\nexport type InsertFlashcard = z.infer<typeof insertFlashcardSchema>;\nexport type Flashcard = typeof flashcards.$inferSelect;\nexport type InsertExamSubjectNet = z.infer<typeof insertExamSubjectNetSchema>;\nexport type ExamSubjectNet = typeof examSubjectNets.$inferSelect;\n","size_bytes":7757},"client/src/App.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport Homepage from \"@/pages/homepage\";\nimport Home from \"@/pages/home\";\nimport Dashboard from \"@/pages/dashboard\";\nimport NetCalculator from \"@/pages/net-calculator\";\nimport Timer from \"@/pages/timer\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Homepage} />\n      <Route path=\"/tasks\" component={Home} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/net-calculator\" component={NetCalculator} />\n      <Route path=\"/timer\" component={Timer} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1468},"client/src/index.css":{"content":"/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/*  heatmapte güncel gün için GPU hızlandırmalı solunum animasyonu */\n@keyframes breathingPulse {\n  0%, 100% {\n    transform: scale3d(1, 1, 1);\n    opacity: 0.9;\n  }\n  50% {\n    transform: scale3d(1.05, 1.05, 1);\n    opacity: 1;\n  }\n}\n\n/* heatmapte güncel gün için GPU hızlandırmalı solunum animasyonup */\n@keyframes breathing {\n  0%, 100% {\n    transform: scale3d(1, 1, 1);\n    opacity: 0.8;\n  }\n  50% {\n    transform: scale3d(1.1, 1.1, 1);\n    opacity: 1;\n  }\n}\n\n/* Performans optimizasyonları için animasyonlar */\n.animate-breathing-pulse {\n  transform: translateZ(0); /* GPU katmanını zorla */\n}\n\n.animate-breathing {\n  transform: translateZ(0); /* GPU katmanını zorla */\n}\n\n/* Optimize edilmiş hover efektleri */\n.hover-scale {\n  transition: transform 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.hover-scale:hover {\n  transform: scale3d(1.05, 1.05, 1);\n}\n\n/* Optimize edilmiş buton geçişleri */\n.btn-optimized {\n  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);\n  transform: translateZ(0);\n}\n\n.btn-optimized:hover {\n  transform: translateY(-1px) translateZ(0);\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n}\n\n.btn-optimized:active {\n  transform: translateY(0) translateZ(0);\n}\n\n:root {\n  /* Açık Tema - Mor-Beyaz-Siyah */\n  /* kullanmam muhtemelen */\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(0 0% 0%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(0 0% 0%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(0 0% 0%);\n  --primary: hsl(271 76% 53%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(271 76% 95%);\n  --secondary-foreground: hsl(0 0% 0%);\n  --muted: hsl(0 0% 96%);\n  --muted-foreground: hsl(0 0% 45%);\n  --accent: hsl(271 76% 90%);\n  --accent-foreground: hsl(0 0% 0%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(271 20% 85%);\n  --input: hsl(271 20% 90%);\n  --ring: hsl(271 76% 53%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(0 0% 0%);\n  --sidebar-primary: hsl(271 76% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(271 76% 95%);\n  --sidebar-accent-foreground: hsl(0 0% 0%);\n  --sidebar-border: hsl(271 20% 85%);\n  --sidebar-ring: hsl(271 76% 53%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  /* Karanlık Tema - Mor-Beyaz-Siyah */\n  --background: hsl(0 0% 9%);\n  --foreground: hsl(0 0% 100%);\n  --card: hsl(0 0% 12%);\n  --card-foreground: hsl(0 0% 100%);\n  --popover: hsl(0 0% 12%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(271 76% 65%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(0 0% 18%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 18%);\n  --muted-foreground: hsl(0 0% 65%);\n  --accent: hsl(271 50% 25%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(0 0% 25%);\n  --input: hsl(0 0% 25%);\n  --ring: hsl(271 76% 65%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 9%);\n  --sidebar-foreground: hsl(0 0% 100%);\n  --sidebar-primary: hsl(271 76% 65%);\n  --sidebar-primary-foreground: hsl(0 0% 0%);\n  --sidebar-accent: hsl(0 0% 18%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(0 0% 25%);\n  --sidebar-ring: hsl(271 76% 65%);\n  --font-sans: \"Inter\", \"system-ui\", \"sans-serif\";\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n@layer utilities {\n  .task-item {\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  .task-item:hover {\n    transform: translateY(-1px);\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.1);\n  }\n  \n  .dark .task-item:hover {\n    box-shadow: 0 4px 12px 0 rgba(0, 0, 0, 0.3);\n  }\n\n  /* Hava Durumu Animasyon Efektleri */\n  .rain-animation {\n    background: linear-gradient(transparent 0%, rgba(59, 130, 246, 0.1) 100%);\n    position: relative;\n  }\n\n  .rain-animation::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-image: \n      linear-gradient(90deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px),\n      linear-gradient(180deg, rgba(59, 130, 246, 0.3) 1px, transparent 1px);\n    background-size: 20px 20px;\n    animation: rain-fall 2s linear infinite;\n    opacity: 0.3;\n  }\n\n  .sun-rays-animation {\n    background: radial-gradient(circle, rgba(251, 191, 36, 0.1) 0%, transparent 70%);\n    position: relative;\n    overflow: hidden;\n  }\n\n  .sun-rays-animation::before {\n    content: '';\n    position: absolute;\n    top: -50%;\n    left: -50%;\n    width: 200%;\n    height: 200%;\n    background: conic-gradient(from 0deg, transparent, rgba(251, 191, 36, 0.1), transparent, rgba(251, 191, 36, 0.05), transparent);\n    animation: sun-rotation 20s linear infinite;\n    pointer-events: none;\n  }\n\n  @keyframes rain-fall {\n    0% {\n      background-position: 0 -20px;\n    }\n    100% {\n      background-position: 0 20px;\n    }\n  }\n\n  @keyframes sun-rotation {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n\n  /* Kışın kar yağarsa hava durumu için kar animasyonu */\n  .snow-animation {\n    background: linear-gradient(transparent 0%, rgba(219, 234, 254, 0.1) 100%);\n    position: relative;\n  }\n\n  .snow-animation::before {\n    content: '❄️ ❅ ❄️ ❅ ❄️';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    font-size: 1rem;\n    color: rgba(219, 234, 254, 0.5);\n    animation: snow-fall 8s linear infinite;\n    white-space: nowrap;\n    overflow: hidden;\n  }\n\n  @keyframes snow-fall {\n    0% {\n      transform: translateY(-100px);\n    }\n    100% {\n      transform: translateY(100px);\n    }\n  }\n}\n\n/* Modern Purple Scrollbar Styles - Kaliteli ve Şık */\n/* Webkit tabanlı tarayıcılar için (Chrome, Safari, Edge) */\n.custom-scrollbar::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-track {\n  background: hsl(248 39% 39% / 0.1);\n  border-radius: 4px;\n  margin: 2px;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(271 76% 53%), hsl(271 76% 45%));\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);\n  transition: all 0.3s ease;\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(271 76% 45%), hsl(271 76% 40%));\n  box-shadow: 0 4px 8px rgba(139, 92, 246, 0.4);\n  transform: scale(1.1);\n}\n\n.custom-scrollbar::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(271 76% 40%), hsl(271 76% 35%));\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.5);\n}\n\n.custom-scrollbar::-webkit-scrollbar-corner {\n  background: transparent;\n}\n\n/* Firefox için scrollbar styling */\n.custom-scrollbar {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(271 76% 53%) hsl(248 39% 39% / 0.1);\n}\n\n/* Global scrollbar - tüm sayfa için */\n* {\n  scrollbar-width: thin;\n  scrollbar-color: hsl(271 76% 53%) hsl(248 39% 39% / 0.1);\n}\n\n*::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n*::-webkit-scrollbar-track {\n  background: hsl(248 39% 39% / 0.1);\n  border-radius: 4px;\n  margin: 2px;\n}\n\n*::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, hsl(271 76% 53%), hsl(271 76% 45%));\n  border-radius: 4px;\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.3);\n  transition: all 0.3s ease;\n}\n\n*::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, hsl(271 76% 45%), hsl(271 76% 40%));\n  box-shadow: 0 4px 8px rgba(139, 92, 246, 0.4);\n  transform: scale(1.1);\n}\n\n*::-webkit-scrollbar-thumb:active {\n  background: linear-gradient(135deg, hsl(271 76% 40%), hsl(271 76% 35%));\n  box-shadow: 0 2px 4px rgba(139, 92, 246, 0.5);\n}\n\n*::-webkit-scrollbar-corner {\n  background: transparent;\n}\n\n/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */\n/* BERATCAKIROGLU OZEL ANALIZ TAKIP SISTEMI */","size_bytes":10481},"client/src/main.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":421},"client/src/components/add-task-modal.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { InsertTask } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AddTaskModal({ open, onOpenChange }: AddTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n    recurrenceType: \"none\" | \"weekly\" | \"monthly\";\n    recurrenceEndDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\", \n    dueDate: new Date().toISOString().split('T')[0], \n    recurrenceType: \"none\",\n    recurrenceEndDate: \"\",\n  });\n\n  const { toast } = useToast();\n\n  const createTaskMutation = useMutation({\n    mutationFn: (data: InsertTask) => \n      apiRequest(\"POST\", \"/api/tasks\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev eklendi\",\n        description: \"Yeni görev başarıyla eklendi.\",\n      });\n      onOpenChange(false);\n      resetForm();\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev eklenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      priority: \"medium\",\n      category: \"genel\",\n      color: \"#8B5CF6\", \n      dueDate: new Date().toISOString().split('T')[0], \n      recurrenceType: \"none\",\n      recurrenceEndDate: \"\",\n    });\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTaskMutation.mutate({\n      title: formData.title.trim(),\n      description: formData.description.trim() || undefined,\n      priority: formData.priority,\n      category: formData.category,\n      color: formData.color,\n      dueDate: formData.dueDate,\n      recurrenceType: formData.recurrenceType,\n      recurrenceEndDate: formData.recurrenceEndDate || undefined,\n      completed: false,\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n    resetForm();\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Yeni Görev Ekle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Görev başlığı */}\n          <div>\n            <Label htmlFor=\"task-title\">Görev Başlığı</Label>\n            <Input\n              id=\"task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              data-testid=\"input-task-title\"\n            />\n          </div>\n\n          {/* Görev Açıklaması */}\n          <div>\n            <Label htmlFor=\"task-description\">Açıklama</Label>\n            <Textarea\n              id=\"task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-task-description\"\n            />\n          </div>\n\n          {/* Görev Önceliği & Kategorisi */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <SelectItem value=\"tyt-geometri\">TYT Geometri</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">AYT Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">AYT Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">AYT Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">AYT Biyoloji</SelectItem>\n                  <SelectItem value=\"ayt-geometri\">AYT Geometri</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Görev Son Tarihi & Yinelenme */}\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"task-due-date\">Son Tarih</Label>\n              <Input\n                id=\"task-due-date\"\n                type=\"date\"\n                value={formData.dueDate}\n                onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n                className=\"w-full\"\n                data-testid=\"input-task-due-date\"\n              />\n            </div>\n\n            {/* Yinelenme Türü */}\n            <div>\n              <Label htmlFor=\"task-recurrence\">Yinelenme</Label>\n              <Select\n                value={formData.recurrenceType}\n                onValueChange={(value: \"none\" | \"weekly\" | \"monthly\") => \n                  setFormData(prev => ({ ...prev, recurrenceType: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-task-recurrence\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Yinelenmeyen</SelectItem>\n                  <SelectItem value=\"weekly\">📅 Haftalık</SelectItem>\n                  <SelectItem value=\"monthly\">🗓️ Aylık</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Yinelenme Bitiş Tarihi - Sadece Yinelenme Etkinse Göster */}\n            {formData.recurrenceType !== \"none\" && (\n              <div>\n                <Label htmlFor=\"task-recurrence-end\">Yinelenme Bitiş Tarihi (İsteğe Bağlı)</Label>\n                <Input\n                  id=\"task-recurrence-end\"\n                  type=\"date\"\n                  value={formData.recurrenceEndDate}\n                  onChange={(e) => setFormData(prev => ({ ...prev, recurrenceEndDate: e.target.value }))}\n                  className=\"w-full\"\n                  data-testid=\"input-task-recurrence-end\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  {formData.recurrenceType === \"weekly\" \n                    ? \"Her hafta yeni görev oluşturulacak\" \n                    : \"Her ay yeni görev oluşturulacak\"}\n                  {formData.recurrenceEndDate && ` (${formData.recurrenceEndDate} tarihine kadar)`}\n                </p>\n              </div>\n            )}\n          </div>\n\n          {/* Renk Seçici */}\n          <div>\n            <Label htmlFor=\"task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={createTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-task\"\n            >\n              {createTaskMutation.isPending ? \"Ekleniyor...\" : \"Görev Ekle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":11688},"client/src/components/advanced-charts.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, RadarChart, PolarGrid, PolarAngleAxis, PolarRadiusAxis, Radar } from \"recharts\";\nimport { TrendingUp, Target, Brain, AlertTriangle, BarChart3, Book, Calculator, Atom, FlaskConical, Dna, User, Calendar, TrendingDown, Check, CheckCircle } from \"lucide-react\";\nimport { ExamResult, QuestionLog } from \"@shared/schema\";\nimport { useMemo, useState, memo, useCallback, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface MissingTopic {\n  topic: string;\n  subject: string;\n  source: 'exam' | 'question';\n  frequency: number;\n  lastSeen: string;\n  difficulty?: string;\n  category?: string;\n}\n\ninterface ExamNetData {\n  date: string;\n  examName: string;\n  tytNet: number;\n  aytNet: number;\n  tytTarget: number;\n  aytTarget: number;\n}\n\ninterface SubjectAnalysisData {\n  subject: string;\n  correct: number;\n  wrong: number;\n  totalQuestions: number;\n  netScore: number;\n  color: string;\n}\n\nfunction AdvancedChartsComponent() {\n  const [analysisMode, setAnalysisMode] = useState<'net' | 'subject'>('net');\n  const [completedTopics, setCompletedTopics] = useState<Set<string>>(new Set());\n  const [celebratingTopics, setCelebratingTopics] = useState<Set<string>>(new Set());\n  const [completedErrorTopics, setCompletedErrorTopics] = useState<Set<string>>(new Set());\n  const [celebratingErrorTopics, setCelebratingErrorTopics] = useState<Set<string>>(new Set());\n  const [removedTopics, setRemovedTopics] = useState<Set<string>>(new Set());\n  const [removedErrorTopics, setRemovedErrorTopics] = useState<Set<string>>(new Set());\n  const { toast } = useToast();\n\n  // localStorage'dan state'leri yükle\n  useEffect(() => {\n    try {\n      const savedRemovedTopics = localStorage.getItem('removedTopics');\n      const savedRemovedErrorTopics = localStorage.getItem('removedErrorTopics');\n      const savedCompletedTopics = localStorage.getItem('completedTopics');\n      const savedCompletedErrorTopics = localStorage.getItem('completedErrorTopics');\n      \n      if (savedRemovedTopics) {\n        setRemovedTopics(new Set(JSON.parse(savedRemovedTopics)));\n      }\n      if (savedRemovedErrorTopics) {\n        setRemovedErrorTopics(new Set(JSON.parse(savedRemovedErrorTopics)));\n      }\n      if (savedCompletedTopics) {\n        setCompletedTopics(new Set(JSON.parse(savedCompletedTopics)));\n      }\n      if (savedCompletedErrorTopics) {\n        setCompletedErrorTopics(new Set(JSON.parse(savedCompletedErrorTopics)));\n      }\n    } catch (error) {\n      console.error('Error loading state from localStorage:', error);\n    }\n  }, []);\n\n  // localStorage'a state'leri kaydet\n  useEffect(() => {\n    try {\n      localStorage.setItem('removedTopics', JSON.stringify(Array.from(removedTopics)));\n    } catch (error) {\n      console.error('Error saving removedTopics to localStorage:', error);\n    }\n  }, [removedTopics]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('removedErrorTopics', JSON.stringify(Array.from(removedErrorTopics)));\n    } catch (error) {\n      console.error('Error saving removedErrorTopics to localStorage:', error);\n    }\n  }, [removedErrorTopics]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('completedTopics', JSON.stringify(Array.from(completedTopics)));\n    } catch (error) {\n      console.error('Error saving completedTopics to localStorage:', error);\n    }\n  }, [completedTopics]);\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('completedErrorTopics', JSON.stringify(Array.from(completedErrorTopics)));\n    } catch (error) {\n      console.error('Error saving completedErrorTopics to localStorage:', error);\n    }\n  }, [completedErrorTopics]);\n\n  // Konu isimlerinden TYT/AYT ve konu başlıklarını kaldırmak için yardımcı işlev.\n  const normalizeTopic = (topic: string): string => {\n    // \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırır\n    return topic.replace(/^(TYT|AYT)\\s+[^-]+\\s*-\\s*/, '').trim();\n  };\n\n  const { data: examResults = [], isLoading: isLoadingExams } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: questionLogs = [], isLoading: isLoadingQuestions } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n\n  const isLoading = isLoadingExams || isLoadingQuestions;\n\n  // Konu bazında eksik konuları toplar\n  const missingTopics = useMemo(() => {\n    const topicMap = new Map<string, MissingTopic>();\n\n    // Soru günlüklerini işleyin\n    questionLogs.forEach(log => {\n      if (log.wrong_topics && log.wrong_topics.length > 0) {\n        log.wrong_topics.forEach(topicItem => {\n          // Hem string[] hem de object[] formatlarını işleyin\n          const rawTopic = typeof topicItem === 'string' ? topicItem : (topicItem as any)?.topic;\n          if (rawTopic) {\n            //  \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırma\n            const topic = normalizeTopic(rawTopic);\n            // TYT/AYT bilgisini de konuya ekle\n            const subjectWithExamType = `${log.exam_type} ${log.subject}`;\n            const key = `${subjectWithExamType}-${topic}`;\n            if (topicMap.has(key)) {\n              const existing = topicMap.get(key)!;\n              existing.frequency += 1;\n              existing.lastSeen = log.study_date > existing.lastSeen ? log.study_date : existing.lastSeen;\n            } else {\n              topicMap.set(key, {\n                topic,\n                subject: subjectWithExamType,\n                source: 'question',\n                frequency: 1,\n                lastSeen: log.study_date,\n                difficulty: typeof topicItem === 'object' ? (topicItem as any)?.difficulty : undefined,\n                category: typeof topicItem === 'object' ? (topicItem as any)?.category : undefined\n              });\n            }\n          }\n        });\n      }\n    });\n\n    // Sınav sonuçlarını işleyin - eksik konuları subjects_data'dan çıkarmamız gerekiyor\n    examResults.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n            if (data.wrong_topics && data.wrong_topics.length > 0) {\n              const subjectNameMap: {[key: string]: string} = {\n                'turkce': 'Türkçe',\n                'matematik': 'Matematik',\n                'sosyal': 'Sosyal',\n                'fen': 'Fen',\n                'fizik': 'Fizik',\n                'kimya': 'Kimya',\n                'biyoloji': 'Biyoloji'\n              };\n              const subjectName = subjectNameMap[subjectKey] || subjectKey;\n              // TYT/AYT bilgisini de konuya ekle\n              const examType = exam.exam_type || 'TYT';\n              const subjectWithExamType = `${examType} ${subjectName}`;\n              \n              data.wrong_topics.forEach((rawTopic: string) => {\n                //  \"TYT Türkçe - \" veya \"AYT Fizik - \" gibi desenleri konu isimlerinden kaldırma\n                const topic = normalizeTopic(rawTopic);\n                const key = `${subjectWithExamType}-${topic}`;\n                if (topicMap.has(key)) {\n                  const existing = topicMap.get(key)!;\n                  existing.frequency += 1;\n                  existing.lastSeen = exam.exam_date > existing.lastSeen ? exam.exam_date : existing.lastSeen;\n                } else {\n                  topicMap.set(key, {\n                    topic,\n                    subject: subjectWithExamType,\n                    source: 'exam',\n                    frequency: 1,\n                    lastSeen: exam.exam_date\n                  });\n                }\n              });\n            }\n          });\n        } catch (e) {\n          console.error('Error parsing subjects_data:', e);\n        }\n      }\n    });\n\n    return Array.from(topicMap.values()).sort((a, b) => b.frequency - a.frequency);\n  }, [questionLogs, examResults]);\n\n  // Net Analiz Verilerini İşleyin - Uygun olmayan sınav türleri için null göstermesi için düzeltildi\n  const netAnalysisData = useMemo(() => {\n    return examResults.map(exam => {\n      // Sınavın TYT veya AYT olup olmadığını belirleyin\n      const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n      \n      return {\n        date: new Date(exam.exam_date).toLocaleDateString('tr-TR', { day: '2-digit', month: '2-digit' }),\n        examName: exam.exam_name,\n        // Uygun olmayan sınav türleri için null kullanın, böylece sıfır göstermek yerine satırı kırar\n        tytNet: examType === 'TYT' ? (parseFloat(exam.tyt_net) || 0) : null,\n        aytNet: examType === 'AYT' ? (parseFloat(exam.ayt_net) || 0) : null,\n        tytTarget: 90,\n        aytTarget: 50,\n        sortDate: exam.exam_date\n      };\n    }).sort((a, b) => new Date(a.sortDate).getTime() - new Date(b.sortDate).getTime());\n  }, [examResults]);\n\n  // Konu Analiz Verilerini İşleyin - TYT ve AYT için ayrı\n  const { tytSubjectAnalysisData, aytSubjectAnalysisData } = useMemo(() => {\n    const tytSubjectMap = new Map<string, { correct: number; wrong: number; total: number }>();\n    const aytSubjectMap = new Map<string, { correct: number; wrong: number; total: number }>();\n\n    // Sınav sonuçlarını konu verileri için işleyin, sınav türüne göre ayırın\n    examResults.forEach(exam => {\n      if (exam.subjects_data) {\n        try {\n          const subjectsData = JSON.parse(exam.subjects_data);\n          Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n            const subjectNameMap: {[key: string]: string} = {\n              'turkce': 'Türkçe',\n              'matematik': 'Matematik', \n              'sosyal': 'Sosyal',\n              'fen': 'Fen',\n              'fizik': 'Fizik',\n              'kimya': 'Kimya',\n              'biyoloji': 'Biyoloji'\n            };\n            const subjectName = subjectNameMap[subjectKey] || subjectKey;\n            const correct = parseInt(data.correct) || 0;\n            const wrong = parseInt(data.wrong) || 0;\n            \n            if (correct > 0 || wrong > 0) {\n              // Sınav türüne göre uygun haritayı seçin\n              const targetMap = exam.exam_type === 'TYT' ? tytSubjectMap : aytSubjectMap;\n              \n              if (targetMap.has(subjectName)) {\n                const existing = targetMap.get(subjectName)!;\n                existing.correct += correct;\n                existing.wrong += wrong;\n                existing.total += (correct + wrong);\n              } else {\n                targetMap.set(subjectName, {\n                  correct,\n                  wrong,\n                  total: correct + wrong\n                });\n              }\n            }\n          });\n        } catch (e) {\n          console.error('Error parsing subjects_data:', e);\n        }\n      }\n    });\n\n    const subjectColors: {[key: string]: string} = {\n      'Türkçe': '#ef4444',\n      'Matematik': '#3b82f6', \n      'Sosyal': '#f59e0b',\n      'Fen': '#10b981',\n      'Fizik': '#8b5cf6',\n      'Kimya': '#ec4899',\n      'Biyoloji': '#06b6d4'\n    };\n\n    const processSubjectData = (subjectMap: Map<string, any>) => {\n      return Array.from(subjectMap.entries()).map(([subject, data]) => ({\n        subject,\n        correct: data.correct,\n        wrong: data.wrong,\n        totalQuestions: data.total,\n        netScore: data.correct - (data.wrong * 0.25),\n        color: subjectColors[subject] || '#6b7280',\n        correctRate: data.total > 0 ? (data.correct / data.total) * 100 : 0,\n        wrongRate: data.total > 0 ? (data.wrong / data.total) * 100 : 0\n      }));\n    };\n\n    return {\n      tytSubjectAnalysisData: processSubjectData(tytSubjectMap),\n      aytSubjectAnalysisData: processSubjectData(aytSubjectMap)\n    };\n  }, [examResults]);\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"bg-card rounded-lg border p-8 text-center\">\n          <div className=\"animate-spin w-8 h-8 border-2 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Analiz verileri yükleniyor...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Geliştirilmiş Eksik Konular Bölümü - Daha Büyük ve Daha Modern */}\n      <Card className=\"bg-gradient-to-br from-red-50/70 via-white to-orange-50/60 dark:from-red-950/40 dark:via-slate-800/60 dark:to-orange-950/30 backdrop-blur-lg border-2 border-red-200/40 dark:border-red-800/40 shadow-2xl hover:shadow-3xl transition-all duration-700 group relative overflow-hidden\">\n        {/* Animasyonlu Arka Plan Elemanları */}\n        <div className=\"absolute top-0 right-0 w-56 h-56 bg-gradient-to-br from-red-500/15 to-orange-500/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-16 -left-16 w-48 h-48 bg-gradient-to-tr from-orange-500/15 to-red-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-br from-red-400/5 to-orange-400/5 rounded-full blur-2xl\"></div>\n        \n        <CardHeader className=\"bg-gradient-to-r from-red-500/15 to-orange-500/15 rounded-t-lg border-b border-red-200/40 pb-8 relative\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-4 bg-gradient-to-br from-red-500 via-red-600 to-orange-500 rounded-2xl shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110\">\n              <AlertTriangle className=\"h-8 w-8 text-white drop-shadow-lg\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-red-600 to-orange-600 bg-clip-text text-transparent\">\n                🎯 Eksik Olduğum Konular\n              </CardTitle>\n              <p className=\"text-sm text-red-600/70 dark:text-red-400/70 font-medium mt-2\">\n                Soru çözümü ve deneme sınavlarından toplanan eksik konu analizi\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-8 pb-8 relative min-h-[400px]\">\n          {isLoading ? (\n            <div className=\"text-center py-16\">\n              <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-red-100 to-orange-100 dark:from-red-900/30 dark:to-orange-900/30 rounded-full mb-6 shadow-lg\">\n                <div className=\"animate-spin w-10 h-10 border-4 border-red-200 border-t-red-500 rounded-full\"></div>\n              </div>\n              <h4 className=\"text-xl font-semibold text-red-700 dark:text-red-300 mb-3\">Eksik konular analiz ediliyor...</h4>\n              <div className=\"flex justify-center space-x-1\">\n                <div className=\"w-3 h-3 rounded-full bg-red-500 animate-bounce\"></div>\n                <div className=\"w-3 h-3 rounded-full bg-orange-500 animate-bounce delay-100\"></div>\n                <div className=\"w-3 h-3 rounded-full bg-red-600 animate-bounce delay-200\"></div>\n              </div>\n            </div>\n          ) : missingTopics.length === 0 ? (\n            <div className=\"text-center py-16 text-muted-foreground\">\n              <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-green-100 to-emerald-100 dark:from-green-900/30 dark:to-emerald-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <Target className=\"h-12 w-12 text-green-500\" />\n              </div>\n              <h4 className=\"text-2xl font-semibold text-green-700 dark:text-green-300 mb-3\">Harika! Henüz eksik konu yok</h4>\n              <p className=\"text-base opacity-75\">Soru çözümü ve deneme sınavı ekledikçe eksik konular burada görünecek</p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n              {missingTopics.slice(0, 15).filter(topic => !removedTopics.has(`${topic.subject}-${topic.topic}`)).map((topic, index) => (\n                <div key={index} className={`bg-white/70 dark:bg-gray-900/70 rounded-2xl p-6 border border-red-200/50 dark:border-red-700/50 hover:shadow-2xl transition-all duration-300 hover:scale-105 backdrop-blur-sm relative overflow-hidden group/card ${\n                  celebratingTopics.has(`${topic.subject}-${topic.topic}`) ? 'animate-pulse bg-green-100/80 dark:bg-green-900/40 border-green-300 dark:border-green-600' : ''\n                } ${\n                  completedTopics.has(`${topic.subject}-${topic.topic}`) && !celebratingTopics.has(`${topic.subject}-${topic.topic}`) ? 'opacity-50 transform scale-95' : ''\n                }`}>\n                  <div className={`absolute inset-0 bg-gradient-to-br transition-opacity duration-300 ${\n                    celebratingTopics.has(`${topic.subject}-${topic.topic}`) \n                      ? 'bg-gradient-to-br from-green-200/60 to-emerald-200/40 dark:from-green-800/40 dark:to-emerald-800/30 opacity-100' \n                      : 'from-red-50/50 to-orange-50/30 dark:from-red-950/20 dark:to-orange-950/10 opacity-0 group-hover/card:opacity-100'\n                  }`}></div>\n                  <div className=\"relative\">\n                    <div className=\"flex items-center justify-between mb-3\">\n                      <span className=\"text-base font-bold text-red-700 dark:text-red-300\">{topic.subject}</span>\n                      <div className=\"flex items-center gap-3\">\n                        <Checkbox\n                          checked={completedTopics.has(`${topic.subject}-${topic.topic}`)}\n                          onCheckedChange={(checked) => {\n                            const topicKey = `${topic.subject}-${topic.topic}`;\n                            if (checked) {\n                              setCompletedTopics(prev => new Set([...prev, topicKey]));\n                              setCelebratingTopics(prev => new Set([...prev, topicKey]));\n                              toast({ title: \"🎉 Tebrikler!\", description: `${topic.topic} konusunu tamamladınız!` });\n\n                              // 1.5 saniye sonra kutunun animasyonunu kaldır ve 3 saniye sonra kutuyu kaldır\n                              setTimeout(() => {\n                                setCelebratingTopics(prev => {\n                                  const newSet = new Set(prev);\n                                  newSet.delete(topicKey);\n                                  return newSet;\n                                });\n                              }, 1500);\n                              \n                              // 1.5 saniye sonra kutuyu kaldır\n                              setTimeout(() => {\n                                setRemovedTopics(prev => new Set([...prev, topicKey]));\n                              }, 1500);\n                            }\n                          }}\n                          className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <p className=\"text-base text-gray-700 dark:text-gray-300 font-medium leading-relaxed flex-1\">{topic.topic}</p>\n                      {celebratingTopics.has(`${topic.subject}-${topic.topic}`) && (\n                        <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400 animate-bounce\">\n                          <CheckCircle className=\"h-5 w-5\" />\n                          <span className=\"text-sm font-bold\">Tebrikler!</span>\n                        </div>\n                      )}\n                    </div>\n                    <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                      <span className={`px-3 py-1.5 rounded-full font-medium shadow-sm ${topic.source === 'exam' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300' : 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-300'}`}>\n                        {topic.source === 'exam' ? '🎯 Deneme' : '📝 Soru'}\n                      </span>\n                      <span className=\"text-xs font-medium\">{new Date(topic.lastSeen).toLocaleDateString('tr-TR')}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Geliştirilmiş Hata Sıklığı Analizi Bölümü - Daha Büyük ve Daha Modern */}\n      <Card className=\"bg-gradient-to-br from-orange-50/70 via-white to-red-50/60 dark:from-orange-950/40 dark:via-slate-800/60 dark:to-red-950/30 backdrop-blur-lg border-2 border-orange-200/40 dark:border-orange-800/40 shadow-2xl hover:shadow-3xl transition-all duration-700 group relative overflow-hidden\">\n        {/* Animasyonlu Arka Plan Elemanları */}\n        <div className=\"absolute top-0 right-0 w-56 h-56 bg-gradient-to-br from-orange-500/15 to-red-500/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-16 -left-16 w-48 h-48 bg-gradient-to-tr from-red-500/15 to-orange-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-40 h-40 bg-gradient-to-br from-orange-400/5 to-red-400/5 rounded-full blur-2xl\"></div>\n        \n        <CardHeader className=\"bg-gradient-to-r from-orange-500/15 to-red-500/15 rounded-t-lg border-b border-orange-200/40 pb-8 relative\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"p-4 bg-gradient-to-br from-orange-500 via-red-500 to-orange-600 rounded-2xl shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110\">\n              <Brain className=\"h-8 w-8 text-white drop-shadow-lg\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-3xl font-bold bg-gradient-to-r from-orange-600 to-red-600 bg-clip-text text-transparent\">\n                🔍 Hata Sıklığı Analizi\n              </CardTitle>\n              <p className=\"text-sm text-orange-600/70 dark:text-orange-400/70 font-medium mt-2\">\n                Yanlış konu analizi ve kategori bazında hata sıklığı takibi\n              </p>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-8 pb-8 relative min-h-[400px]\">\n          {(() => {\n            // konu bazında tüm yanlış verilerini topla\n            let allWrongTopicData: Array<{\n              topic: string;\n              source: 'question' | 'exam';\n              subject: string;\n              exam_type: string;\n              wrong_count: number;\n              study_date: string;\n              difficulty?: 'kolay' | 'orta' | 'zor';\n              category?: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n            }> = [];\n\n            // Soru günlüklerini işle - hem yapılandırılmış (wrong_topics_json) hem de basit (wrong_topics)\n            questionLogs.forEach(log => {\n              if (log.wrong_topics && log.wrong_topics.length > 0) {\n                // Öncelikle wrong_topics_json'dan yapılandırılmış verileri ayrıştırmayı deneyin\n                let structuredTopics: Array<{\n                  topic: string;\n                  difficulty: 'kolay' | 'orta' | 'zor';\n                  category: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n                }> = [];\n                \n                try {\n                  if (log.wrong_topics_json && log.wrong_topics_json.trim() !== '' && log.wrong_topics_json !== 'null' && log.wrong_topics_json !== '[]') {\n                    structuredTopics = JSON.parse(log.wrong_topics_json);\n                  }\n                } catch (e) {\n                  console.error('Error parsing wrong_topics_json:', e);\n                }\n\n                // Yapılandırılmış konular mevcutsa ekleyin\n                if (structuredTopics.length > 0) {\n                  structuredTopics.forEach(topicItem => {\n                    allWrongTopicData.push({\n                      topic: normalizeTopic(topicItem.topic),\n                      source: 'question',\n                      subject: log.subject, // isim ön ekini burada tutun  \n                      exam_type: log.exam_type,\n                      wrong_count: parseInt(log.wrong_count) || 0,\n                      study_date: log.study_date,\n                      difficulty: topicItem.difficulty,\n                      category: topicItem.category\n                    });\n                  });\n                } else {\n                  // Fall back to simple wrong_topics array\n                  log.wrong_topics.forEach(topic => {\n                    const topicName = typeof topic === 'string' ? topic : (topic as any)?.topic || '';\n                    if (topicName) {\n                      allWrongTopicData.push({\n                        topic: normalizeTopic(topicName),\n                        source: 'question',\n                        subject: log.subject, // isim ön ekini burada tutun\n                        exam_type: log.exam_type,\n                        wrong_count: parseInt(log.wrong_count) || 0,\n                        study_date: log.study_date\n                      });\n                    }\n                  });\n                }\n              }\n            });\n\n            // Process exam results\n            examResults.forEach(exam => {\n              if (exam.subjects_data) {\n                try {\n                  const subjectsData = JSON.parse(exam.subjects_data);\n                  Object.entries(subjectsData).forEach(([subjectKey, data]: [string, any]) => {\n                    if (data.wrong_topics && data.wrong_topics.length > 0) {\n                      const subjectNameMap: {[key: string]: string} = {\n                        'turkce': 'Türkçe',\n                        'matematik': 'Matematik',\n                        'sosyal': 'Sosyal',\n                        'fen': 'Fen',\n                        'fizik': 'Fizik',\n                        'kimya': 'Kimya',\n                        'biyoloji': 'Biyoloji'\n                      };\n                      const subjectName = subjectNameMap[subjectKey] || subjectKey;\n                      \n                      data.wrong_topics.forEach((topic: string) => {\n                        allWrongTopicData.push({\n                          topic: normalizeTopic(topic),\n                          source: 'exam',\n                          subject: subjectName, // isim ön ekini burada tutun\n                          exam_type: exam.exam_type || 'TYT',\n                          wrong_count: parseInt(data.wrong) || 0,\n                          study_date: exam.exam_date\n                        });\n                      });\n                    }\n                  });\n                } catch (e) {\n                  console.error('Error parsing subjects_data:', e);\n                }\n              }\n            });\n\n            // Konu bazında gruplandır ve verileri topla\n            const topicAggregated = allWrongTopicData.reduce((acc, item) => {\n              const key = `${item.subject}-${item.topic}`;\n              if (acc[key]) {\n                acc[key].frequency += 1;\n                acc[key].totalWrong += item.wrong_count;\n                if (item.study_date > acc[key].lastSeen) {\n                  acc[key].lastSeen = item.study_date;\n                  acc[key].difficulty = item.difficulty;\n                  acc[key].category = item.category;\n                }\n              } else {\n                acc[key] = {\n                  topic: item.topic,\n                  subject: item.subject,\n                  exam_type: item.exam_type,\n                  frequency: 1,\n                  totalWrong: item.wrong_count,\n                  lastSeen: item.study_date,\n                  difficulty: item.difficulty,\n                  category: item.category,\n                  sources: [item.source]\n                };\n              }\n              return acc;\n            }, {} as {[key: string]: any});\n\n            const wrongTopicAnalysisData = Object.values(topicAggregated).sort((a: any, b: any) => b.frequency - a.frequency);\n            \n            if (isLoading) {\n              return (\n                <div className=\"text-center py-16\">\n                  <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-orange-100 to-red-100 dark:from-orange-900/30 dark:to-red-900/30 rounded-full mb-6 shadow-lg\">\n                    <div className=\"animate-spin w-10 h-10 border-4 border-orange-200 border-t-orange-500 rounded-full\"></div>\n                  </div>\n                  <h4 className=\"text-xl font-semibold text-orange-700 dark:text-orange-300 mb-3\">Hata sıklığı analiz ediliyor...</h4>\n                  <div className=\"flex justify-center space-x-1\">\n                    <div className=\"w-3 h-3 rounded-full bg-orange-500 animate-bounce\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-red-500 animate-bounce delay-100\"></div>\n                    <div className=\"w-3 h-3 rounded-full bg-orange-600 animate-bounce delay-200\"></div>\n                  </div>\n                </div>\n              );\n            }\n            \n            if (wrongTopicAnalysisData.length === 0) {\n              return (\n                <div className=\"text-center py-16 text-muted-foreground\">\n                  <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                    <Brain className=\"h-12 w-12 text-blue-500\" />\n                  </div>\n                  <h4 className=\"text-2xl font-semibold text-blue-700 dark:text-blue-300 mb-3\">Henüz hata analizi verisi yok</h4>\n                  <p className=\"text-base opacity-75\">Soru veya deneme ekleyip yanlış konuları girdikçe hata sıklığınız burada görünecek</p>\n                </div>\n              );\n            }\n            \n            return (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\n                {wrongTopicAnalysisData.slice(0, 15).filter((item: any) => !removedErrorTopics.has(`${item.exam_type}-${item.subject}-${item.topic}`)).map((item: any, index) => {\n                  const errorTopicKey = `${item.exam_type}-${item.subject}-${item.topic}`;\n                  return (\n                  <div key={index} className={`bg-white/70 dark:bg-gray-900/70 rounded-2xl p-6 border border-orange-200/50 dark:border-orange-700/50 hover:shadow-2xl transition-all duration-300 hover:scale-105 backdrop-blur-sm relative overflow-hidden group/card ${\n                    celebratingErrorTopics.has(errorTopicKey) ? 'animate-pulse bg-green-100/80 dark:bg-green-900/40 border-green-300 dark:border-green-600' : ''\n                  }`}>\n                    <div className=\"absolute inset-0 bg-gradient-to-br from-orange-50/50 to-red-50/30 dark:from-orange-950/20 dark:to-red-950/10 opacity-0 group-hover/card:opacity-100 transition-opacity duration-300\"></div>\n                    <div className=\"relative\">\n                      <div className=\"flex items-center justify-between mb-4\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className={`w-4 h-4 rounded-full shadow-md ${\n                            item.exam_type === 'TYT' ? 'bg-blue-500' : 'bg-purple-500'\n                          }`}></div>\n                          <span className=\"text-base font-bold text-orange-700 dark:text-orange-300\">\n                            {item.exam_type} {item.subject}\n                          </span>\n                        </div>\n                        <div className=\"flex items-center gap-3\">\n                          <Checkbox\n                            checked={completedErrorTopics.has(errorTopicKey)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setCompletedErrorTopics(prev => new Set([...prev, errorTopicKey]));\n                                setCelebratingErrorTopics(prev => new Set([...prev, errorTopicKey]));\n                                toast({ title: \"🎉 Tebrikler!\", description: `${item.topic} konusundaki hatanızı çözdünüz!` });\n\n                                // 2 saniye sonra kutunun animasyonunu kaldır ve 3 saniye sonra kutuyu kaldır\n                                setTimeout(() => {\n                                  setCelebratingErrorTopics(prev => {\n                                    const newSet = new Set(prev);\n                                    newSet.delete(errorTopicKey);\n                                    return newSet;\n                                  });\n                                }, 1500);\n                                \n                                // 1.5 sn\n                                setTimeout(() => {\n                                  setRemovedErrorTopics(prev => new Set([...prev, errorTopicKey]));\n                                }, 1500);\n                              } else {\n                                setCompletedErrorTopics(prev => {\n                                  const newSet = new Set(prev);\n                                  newSet.delete(errorTopicKey);\n                                  return newSet;\n                                });\n                                setRemovedErrorTopics(prev => {\n                                  const newSet = new Set(prev);\n                                  newSet.delete(errorTopicKey);\n                                  return newSet;\n                                });\n                              }\n                            }}\n                            className=\"data-[state=checked]:bg-green-500 data-[state=checked]:border-green-500\"\n                          />\n                          <div className=\"text-sm text-orange-600 dark:text-orange-400 bg-gradient-to-r from-orange-100 to-red-100 dark:from-orange-900/40 dark:to-red-900/40 px-3 py-1.5 rounded-full font-semibold shadow-md\">\n                            {item.frequency} Kez\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3 mb-4\">\n                        <div className=\"text-sm bg-white/50 dark:bg-gray-800/50 p-3 rounded-xl\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"font-semibold text-gray-700 dark:text-gray-300 mb-2 flex-1\">{item.topic}</div>\n                            {celebratingErrorTopics.has(errorTopicKey) && (\n                              <div className=\"flex items-center gap-2 text-green-600 dark:text-green-400 animate-bounce\">\n                                <CheckCircle className=\"h-5 w-5\" />\n                                <span className=\"text-sm font-bold\">Tebrikler!</span>\n                              </div>\n                            )}\n                          </div>\n                          <div className=\"flex gap-2 flex-wrap\">\n                            {item.difficulty && (\n                              <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                                item.difficulty === 'kolay' ? 'bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-300' :\n                                item.difficulty === 'orta' ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/40 dark:text-yellow-300' :\n                                'bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300'\n                              }`}>\n                                📊 {item.difficulty.charAt(0).toUpperCase() + item.difficulty.slice(1)}\n                              </span>\n                            )}\n                            {item.category && (\n                              <span className=\"text-xs px-2 py-1 rounded-full bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300 font-medium\">\n                                🔍 {item.category === 'kavram' ? 'Kavram Eksikliği' :\n                                    item.category === 'hesaplama' ? 'Hesaplama Hatası' :\n                                    item.category === 'analiz' ? 'Analiz Sorunu' : 'Dikkatsizlik'}\n                              </span>\n                            )}\n                            <span className={`text-xs px-2 py-1 rounded-full font-medium ${\n                              item.sources && item.sources.includes('exam') ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300' : 'bg-purple-100 text-purple-700 dark:bg-purple-900/40 dark:text-purple-300'\n                            }`}>\n                              {item.sources && item.sources.includes('exam') ? '🎯 Deneme' : '📝 Soru'} Hatası\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-between text-sm text-muted-foreground pt-3 border-t border-orange-200/40 dark:border-orange-700/40\">\n                        <div className=\"flex items-center gap-2\">\n                          <Calendar className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">{new Date(item.lastSeen).toLocaleDateString('tr-TR')}</span>\n                        </div>\n                        <div className=\"flex items-center gap-2\">\n                          <TrendingDown className=\"h-4 w-4\" />\n                          <span className=\"font-medium\">Son hata</span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  );\n                })}\n              </div>\n            );\n          })()}\n        </CardContent>\n      </Card>\n\n      {/* Analiz Bölümü */}\n      <Card className=\"bg-gradient-to-br from-indigo-50/50 via-card to-purple-50/50 dark:from-indigo-950/30 dark:via-card dark:to-purple-950/30 backdrop-blur-sm border-2 border-indigo-200/30 dark:border-indigo-800/30 shadow-2xl\">\n        <CardHeader className=\"bg-gradient-to-r from-indigo-500/10 to-purple-500/10 rounded-t-lg border-b border-indigo-200/30\">\n          <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\n            <div>\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent flex items-center gap-2\">\n                <BarChart3 className=\"h-6 w-6 text-indigo-500\" />\n                📊 Net & Ders Analizi\n              </CardTitle>\n              <p className=\"text-sm text-indigo-600/70 dark:text-indigo-400/70 font-medium\">\n                {analysisMode === 'net' ? 'Deneme net gelişim grafiği ve hedef karşılaştırması' : 'Ders bazında doğru/yanlış dağılımı'}\n              </p>\n            </div>\n\n            {/* Analiz Modu Değiştirme */}\n            <div className=\"flex bg-indigo-100/50 dark:bg-indigo-900/30 rounded-xl p-1 border border-indigo-200/50 dark:border-indigo-700/50\">\n              <Button\n                variant={analysisMode === 'net' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setAnalysisMode('net')}\n                className={`px-4 py-2 rounded-lg transition-all duration-300 whitespace-nowrap ${\n                  analysisMode === 'net' \n                    ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg' \n                    : 'text-indigo-600 dark:text-indigo-400 hover:bg-indigo-200/50 dark:hover:bg-indigo-800/50'\n                }`}\n                data-testid=\"button-analysis-net\"\n              >\n                <TrendingUp className=\"h-4 w-4 mr-2\" />\n                📈 Net Analiz\n              </Button>\n              <Button\n                variant={analysisMode === 'subject' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setAnalysisMode('subject')}\n                className={`px-4 py-2 rounded-lg transition-all duration-300 whitespace-nowrap ${\n                  analysisMode === 'subject' \n                    ? 'bg-gradient-to-r from-indigo-500 to-purple-500 text-white shadow-lg' \n                    : 'text-indigo-600 dark:text-indigo-400 hover:bg-indigo-200/50 dark:hover:bg-indigo-800/50'\n                }`}\n                data-testid=\"button-analysis-subject\"\n              >\n                <Target className=\"h-4 w-4 mr-2\" />\n                🎯 Ders Analiz\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"pt-6\">\n          {analysisMode === 'net' ? (\n            // TYT/AYT Net Analizi\n            netAnalysisData.length === 0 ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-blue-100 to-indigo-100 dark:from-blue-900/30 dark:to-indigo-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                  <TrendingUp className=\"h-10 w-10 text-blue-500\" />\n                </div>\n                <h4 className=\"text-lg font-semibold text-blue-700 dark:text-blue-300 mb-2\">Henüz bir deneme verisi girilmedi.</h4>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Hedefler ve Mevcut Network Ekranı */}\n                <div className=\"grid grid-cols-2 gap-4 mb-6\">\n                  <div className=\"bg-blue-50/80 dark:bg-blue-950/30 rounded-xl p-4 text-center border border-blue-200/50 dark:border-blue-800/40\">\n                    <div className=\"text-lg font-bold text-blue-700 dark:text-blue-300 mb-1\">TYT Hedef: 90</div>\n                    <div className=\"text-sm text-blue-600 dark:text-blue-400\">\n                      TYT DENEME: {(() => {\n                        // En son TYT sınavını bul (tytNet > 0 veya exam_type TYT ise)\n                        const tytExams = examResults.filter(exam => \n                          exam.exam_type === 'TYT' || (parseFloat(exam.tyt_net) > 0 && parseFloat(exam.ayt_net) === 0)\n                        ).sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n                        return tytExams.length > 0 ? parseFloat(tytExams[0].tyt_net) : 0;\n                      })()} net\n                    </div>\n                  </div>\n                  <div className=\"bg-green-50/80 dark:bg-green-950/30 rounded-xl p-4 text-center border border-green-200/50 dark:border-green-800/40\">\n                    <div className=\"text-lg font-bold text-green-700 dark:text-green-300 mb-1\">AYT Hedef: 50</div>\n                    <div className=\"text-sm text-green-600 dark:text-green-400\">\n                      AYT DENEME: {(() => {\n                        // En son AYT sınavını bul (aytNet > 0 veya exam_type AYT ise)\n                        const aytExams = examResults.filter(exam => \n                          exam.exam_type === 'AYT' || (parseFloat(exam.ayt_net) > 0 && parseFloat(exam.tyt_net) === 0)\n                        ).sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n                        return aytExams.length > 0 ? parseFloat(aytExams[0].ayt_net) : 0;\n                      })()} net\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"h-96 bg-gradient-to-br from-indigo-50/30 to-purple-50/30 dark:from-indigo-950/20 dark:to-purple-950/20 rounded-xl p-4\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <LineChart data={netAnalysisData} margin={{ top: 40, right: 60, bottom: 50, left: 40 }}>\n                    <defs>\n                      <linearGradient id=\"tytGlow\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0}/>\n                      </linearGradient>\n                      <linearGradient id=\"aytGlow\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#059669\" stopOpacity={0.3}/>\n                        <stop offset=\"95%\" stopColor=\"#059669\" stopOpacity={0}/>\n                      </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"4 4\" stroke=\"currentColor\" opacity={0.15} />\n                    <XAxis \n                      dataKey=\"date\" \n                      tick={{ fontSize: 12, fontWeight: 600 }}\n                      className=\"text-foreground\"\n                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      angle={-30}\n                      textAnchor=\"end\"\n                      height={50}\n                    />\n                    <YAxis \n                      tick={{ fontSize: 12, fontWeight: 600 }}\n                      className=\"text-foreground\"\n                      axisLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      tickLine={{ stroke: 'currentColor', opacity: 0.4 }}\n                      label={{ value: 'Net Sayısı', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fontWeight: 600 } }}\n                      domain={[0, 100]}\n                    />\n                    <Tooltip \n                      contentStyle={{ \n                        backgroundColor: 'hsl(var(--card))',\n                        border: '2px solid hsl(var(--border))',\n                        borderRadius: '16px',\n                        fontSize: '14px',\n                        boxShadow: '0 20px 40px rgba(0,0,0,0.15)',\n                        padding: '16px',\n                        backdropFilter: 'blur(8px)'\n                      }}\n                      labelFormatter={(label, payload) => {\n                        const data = payload?.[0]?.payload;\n                        return data ? `📊 ${data.examName} - ${label}` : label;\n                      }}\n                      formatter={(value: any, name: any) => {\n                        // ekran boşsa tooltip gösterme\n                        if (value === null) return [null, null];\n                        \n                        if (name === 'tytTarget') return [`${value} net`, '🔵 TYT Hedef: 90 net'];\n                        if (name === 'aytTarget') return [`${value} net`, '🔵 AYT Hedef: 50 net'];\n                        if (name === 'tytNet') return [`${value} net`, '🟢 TYT DENEME'];\n                        if (name === 'aytNet') return [`${value} net`, '🟢 AYT DENEME'];\n                        return [`${value} net`, name];\n                      }}\n                    />\n                    <Legend \n                      wrapperStyle={{ paddingTop: '30px', fontSize: '14px', fontWeight: 600 }}\n                      iconType=\"line\"\n                    />\n\n                    {/* Hedef çizgileri */}\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"tytTarget\" \n                      stroke=\"#3b82f6\" \n                      strokeDasharray=\"10 6\" \n                      strokeWidth={3}\n                      dot={false} \n                      connectNulls={false}\n                      name=\"🎯 TYT Hedef (90)\"\n                      opacity={0.8}\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"aytTarget\" \n                      stroke=\"#059669\" \n                      strokeDasharray=\"10 6\" \n                      strokeWidth={3}\n                      dot={false} \n                      connectNulls={false}\n                      name=\"🎯 AYT Hedef (50)\"\n                      opacity={0.8}\n                    />\n\n                    {/* Gerçek netler */}\n                    <Line \n                      type=\"linear\" \n                      dataKey=\"tytNet\" \n                      stroke=\"#3b82f6\" \n                      strokeWidth={5}\n                      dot={{ fill: '#3b82f6', strokeWidth: 4, r: 8, stroke: '#ffffff', shadow: true }} \n                      activeDot={{ r: 12, stroke: '#3b82f6', strokeWidth: 4, fill: '#ffffff', shadow: '0 0 15px rgba(59, 130, 246, 0.6)' }}\n                      connectNulls={true}\n                      name=\"🔵 TYT Net\"\n                    />\n                    <Line \n                      type=\"linear\" \n                      dataKey=\"aytNet\" \n                      stroke=\"#059669\" \n                      strokeWidth={5}\n                      dot={{ fill: '#059669', strokeWidth: 4, r: 8, stroke: '#ffffff', shadow: true }} \n                      activeDot={{ r: 12, stroke: '#059669', strokeWidth: 4, fill: '#ffffff', shadow: '0 0 15px rgba(5, 150, 105, 0.6)' }}\n                      connectNulls={true}\n                      name=\"🟢 AYT Net\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n                </div>\n              </div>\n            )\n          ) : (\n            // TYT / AYT Ders Analizi\n            (tytSubjectAnalysisData.length === 0 && aytSubjectAnalysisData.length === 0) ? (\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-purple-100 to-indigo-100 dark:from-purple-900/30 dark:to-indigo-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                  <Target className=\"h-10 w-10 text-purple-500\" />\n                </div>\n                <h4 className=\"text-lg font-semibold text-purple-700 dark:text-purple-300 mb-2\">Ders verisi bulunmuyor</h4>\n                <p className=\"text-sm opacity-75 mb-4\">Deneme ekleyerek ders dağılmı grafik ve analizi burda yapılacak.</p>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* İkiz Radar Grafikleri - TYT ve AYT yan yana */}\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  {/* TYT Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-blue-50/30 to-indigo-50/30 dark:from-blue-950/20 dark:to-indigo-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-blue-700 dark:text-blue-300\">🔵 TYT Ders Analizi</h3>\n                    {tytSubjectAnalysisData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={tytSubjectAnalysisData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"tytCorrectGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#22c55e\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#16a34a\" stopOpacity={0.1}/>\n                            </linearGradient>\n                            <linearGradient id=\"tytWrongGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#ef4444\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#dc2626\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 p-3 rounded-lg shadow-lg border\">\n                                  <p className=\"font-semibold mb-1\">{label}</p>\n                                  {payload.map((entry, index) => (\n                                    <div key={index} className=\"flex items-center gap-2 text-sm\">\n                                      <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: entry.color }}></div>\n                                      <span>{entry.name === '✅ Doğru Cevaplar' ? '✅' : '❌'} {entry.name}: {entry.value}</span>\n                                    </div>\n                                  ))}\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar name=\"✅ Doğru Cevaplar\" dataKey=\"correct\" stroke=\"#22c55e\" strokeWidth={2} fill=\"url(#tytCorrectGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#22c55e' }} />\n                          <Radar name=\"❌ Yanlış Cevaplar\" dataKey=\"wrong\" stroke=\"#ef4444\" strokeWidth={2} fill=\"url(#tytWrongGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#ef4444' }} />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📊</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz TYT deneme verisi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n\n                  {/* AYT Grafiği */}\n                  <div className=\"h-[400px] bg-gradient-to-br from-green-50/30 to-emerald-50/30 dark:from-green-950/20 dark:to-emerald-950/20 rounded-xl p-4\">\n                    <h3 className=\"text-lg font-bold text-center mb-4 text-green-700 dark:text-green-300\">🟢 AYT Ders Analizi</h3>\n                    {aytSubjectAnalysisData.length > 0 ? (\n                      <ResponsiveContainer width=\"100%\" height=\"85%\">\n                        <RadarChart data={aytSubjectAnalysisData} margin={{ top: 20, right: 30, bottom: 20, left: 30 }}>\n                          <defs>\n                            <linearGradient id=\"aytCorrectGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#22c55e\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#16a34a\" stopOpacity={0.1}/>\n                            </linearGradient>\n                            <linearGradient id=\"aytWrongGlow\" x1=\"0\" y1=\"0\" x2=\"1\" y2=\"1\">\n                              <stop offset=\"0%\" stopColor=\"#ef4444\" stopOpacity={0.4}/>\n                              <stop offset=\"100%\" stopColor=\"#dc2626\" stopOpacity={0.1}/>\n                            </linearGradient>\n                          </defs>\n                          <PolarGrid stroke=\"currentColor\" className=\"opacity-25\" strokeWidth={1} />\n                          <PolarAngleAxis dataKey=\"subject\" tick={{ fontSize: 12, fontWeight: 600 }} />\n                          <PolarRadiusAxis angle={0} domain={[0, 'dataMax']} tick={{ fontSize: 10 }} />\n                          <Tooltip content={({ active, payload, label }) => {\n                            if (active && payload && payload.length) {\n                              return (\n                                <div className=\"bg-white/95 dark:bg-gray-800/95 p-3 rounded-lg shadow-lg border\">\n                                  <p className=\"font-semibold mb-1\">{label}</p>\n                                  {payload.map((entry, index) => (\n                                    <div key={index} className=\"flex items-center gap-2 text-sm\">\n                                      <div className=\"w-2 h-2 rounded-full\" style={{ backgroundColor: entry.color }}></div>\n                                      <span>{entry.name === '✅ Doğru Cevaplar' ? '✅' : '❌'} {entry.name}: {entry.value}</span>\n                                    </div>\n                                  ))}\n                                </div>\n                              );\n                            }\n                            return null;\n                          }} />\n                          <Radar name=\"✅ Doğru Cevaplar\" dataKey=\"correct\" stroke=\"#22c55e\" strokeWidth={2} fill=\"url(#aytCorrectGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#22c55e' }} />\n                          <Radar name=\"❌ Yanlış Cevaplar\" dataKey=\"wrong\" stroke=\"#ef4444\" strokeWidth={2} fill=\"url(#aytWrongGlow)\" fillOpacity={0.3} dot={{ r: 4, fill: '#ef4444' }} />\n                          <Legend wrapperStyle={{ paddingTop: '10px', fontSize: '12px' }} iconType=\"circle\" />\n                        </RadarChart>\n                      </ResponsiveContainer>\n                    ) : (\n                      <div className=\"flex items-center justify-center h-full text-center\">\n                        <div>\n                          <div className=\"text-4xl mb-2\">📊</div>\n                          <p className=\"text-sm text-muted-foreground\">Henüz AYT deneme verisi yok</p>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n\n                {/* TYT ve AYT Ders Özeti */}\n                <div className=\"space-y-4\">\n                  {/* TYT ÖZet Kartları */}\n                  {tytSubjectAnalysisData.length > 0 && (\n                    <div>\n                      <h4 className=\"text-lg font-semibold mb-3 text-blue-700 dark:text-blue-300\">🔵 TYT Ders Özeti</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                        {tytSubjectAnalysisData.map((subject, index) => (\n                          <div key={index} className=\"bg-blue-50/60 dark:bg-blue-900/20 rounded-xl p-4 border border-blue-200/40 dark:border-blue-700/40 hover:shadow-lg transition-all duration-200\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">{subject.subject}</h4>\n                              <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: subject.color }}></div>\n                            </div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-green-600 dark:text-green-400\">✓ Doğru</span>\n                                <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">{subject.correct}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-red-600 dark:text-red-400\">✗ Yanlış</span>\n                                <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">{subject.wrong}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center border-t pt-2\">\n                                <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Net</span>\n                                <span className=\"text-sm font-bold\" style={{ color: subject.color }}>{subject.netScore.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  {/* AYT Özet Kartları */}\n                  {aytSubjectAnalysisData.length > 0 && (\n                    <div>\n                      <h4 className=\"text-lg font-semibold mb-3 text-green-700 dark:text-green-300\">🟢 AYT Ders Özeti</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4\">\n                        {aytSubjectAnalysisData.map((subject, index) => (\n                          <div key={index} className=\"bg-green-50/60 dark:bg-green-900/20 rounded-xl p-4 border border-green-200/40 dark:border-green-700/40 hover:shadow-lg transition-all duration-200\">\n                            <div className=\"flex items-center justify-between mb-3\">\n                              <h4 className=\"font-semibold text-gray-800 dark:text-gray-200\">{subject.subject}</h4>\n                              <div className=\"w-4 h-4 rounded-full\" style={{ backgroundColor: subject.color }}></div>\n                            </div>\n                            <div className=\"space-y-2 mb-4\">\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-green-600 dark:text-green-400\">✓ Doğru</span>\n                                <span className=\"text-sm font-semibold text-green-600 dark:text-green-400\">{subject.correct}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center\">\n                                <span className=\"text-xs text-red-600 dark:text-red-400\">✗ Yanlış</span>\n                                <span className=\"text-sm font-semibold text-red-600 dark:text-red-400\">{subject.wrong}</span>\n                              </div>\n                              <div className=\"flex justify-between items-center border-t pt-2\">\n                                <span className=\"text-xs font-medium text-gray-600 dark:text-gray-400\">Net</span>\n                                <span className=\"text-sm font-bold\" style={{ color: subject.color }}>{subject.netScore.toFixed(1)}</span>\n                              </div>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\n// Performans optimizasyonu için React.memo ile sarılmış bileşen\nexport const AdvancedCharts = memo(AdvancedChartsComponent);\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":63202},"client/src/components/countdown-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useEffect } from \"react\";\n\ninterface CountdownWidgetProps {\n  className?: string;\n}\n\nexport function CountdownWidget({ className = \"\" }: CountdownWidgetProps) {\n  const [tytCountdown, setTytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const [aytCountdown, setAytCountdown] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n\n  useEffect(() => {\n    // TYT Tarih: Haziran 20, 2026 Cumartesi 10:15\n    const tytDate = new Date(\"2026-06-20T10:15:00\");\n    // AYT Tarih: Haziran 21, 2026 Pazar 10:15\n    const aytDate = new Date(\"2026-06-21T10:15:00\");\n\n    const updateCountdown = () => {\n      const now = new Date();\n      \n      // TYT net hesaplama\n      const tytDiff = tytDate.getTime() - now.getTime();\n      if (tytDiff > 0) {\n        const days = Math.floor(tytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((tytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((tytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((tytDiff % (1000 * 60)) / 1000);\n        setTytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setTytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n      \n      // AYT net hesaplama\n      const aytDiff = aytDate.getTime() - now.getTime();\n      if (aytDiff > 0) {\n        const days = Math.floor(aytDiff / (1000 * 60 * 60 * 24));\n        const hours = Math.floor((aytDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n        const minutes = Math.floor((aytDiff % (1000 * 60 * 60)) / (1000 * 60));\n        const seconds = Math.floor((aytDiff % (1000 * 60)) / 1000);\n        setAytCountdown({ days, hours, minutes, seconds });\n      } else {\n        setAytCountdown({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n      }\n    };\n\n    // Hemen güncelle ve ardından her saniye güncelle\n    updateCountdown();\n    const interval = setInterval(updateCountdown, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const formatTime = (time: { days: number; hours: number; minutes: number; seconds: number }) => {\n    return {\n      days: time.days.toString().padStart(3, '0'),\n      hours: time.hours.toString().padStart(2, '0'),\n      minutes: time.minutes.toString().padStart(2, '0'),\n      seconds: time.seconds.toString().padStart(2, '0')\n    };\n  };\n\n  return (\n    <div className={`relative overflow-hidden bg-gradient-to-br from-card via-card/95 to-card/80 backdrop-blur-md rounded-3xl border border-border/30 p-8 shadow-2xl hover:shadow-3xl transition-all duration-500 hover:scale-[1.02] ${className}`}>\n      {/* Arka Plan Deseni */}\n      <div className=\"absolute inset-0 opacity-[0.03]\">\n        <div className=\"absolute inset-0\" style={{\n          backgroundImage: `radial-gradient(circle at 25% 25%, rgba(var(--primary), 0.5) 1px, transparent 1px), radial-gradient(circle at 75% 75%, rgba(var(--primary), 0.3) 1px, transparent 1px)`,\n          backgroundSize: '50px 50px'\n        }}></div>\n      </div>\n      <div className=\"relative text-center mb-10\">\n        <div className=\"absolute top-0 left-1/2 transform -translate-x-1/2 w-32 h-32 bg-gradient-to-r from-primary/10 via-primary/5 to-primary/10 rounded-full blur-3xl -z-10\"></div>\n        <h3 className=\"text-3xl md:text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-purple-600 via-primary to-emerald-600 bg-clip-text text-transparent mb-3\">\n          YKS 2026 Geri Sayımı\n        </h3>\n        <div className=\"flex items-center justify-center space-x-2\">\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-transparent via-blue-500 to-primary rounded-full\"></div>\n          <div className=\"w-2 h-2 bg-primary rounded-full animate-pulse\"></div>\n          <div className=\"w-12 h-0.5 bg-gradient-to-r from-primary via-emerald-500 to-transparent rounded-full\"></div>\n        </div>\n        <p className=\"text-muted-foreground text-sm mt-2\">Hedefime olan mesafem ;</p>\n      </div>\n\n      {/* Zincir Bağlantılı Geri Sayım Düzeni */}\n      <div className=\"flex flex-col lg:flex-row items-center justify-center gap-8 lg:gap-16\">\n        \n        {/* TYT Net */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-blue-600 via-purple-600 to-blue-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-blue-600 to-purple-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">T</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent mb-2\">\n                TYT 2026\n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Temel Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(tytCountdown).days },\n                { label: 'Saat', value: formatTime(tytCountdown).hours },\n                { label: 'Dk', value: formatTime(tytCountdown).minutes },\n                { label: 'Sn', value: formatTime(tytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-blue-600 to-purple-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        {/* Zincir Bağlantılı Geri Sayım Düzeni */}\n        <div className=\"relative flex items-center justify-center\">\n          {/* Yan Bağlantılar */}\n          <div className=\"lg:hidden flex flex-col items-center space-y-2\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"w-8 h-8 border-4 border-primary/30 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-md animate-bounce\" \n                   style={{ animationDelay: `${i * 200}ms`, animationDuration: '2s' }}></div>\n            ))}\n          </div>\n          \n          <div className=\"hidden lg:flex items-center space-x-3\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"w-6 h-6 border-3 border-primary/40 rounded-full bg-gradient-to-br from-primary/20 to-primary/10 shadow-lg animate-pulse\" \n                   style={{ animationDelay: `${i * 300}ms`, animationDuration: '2.5s' }}></div>\n            ))}\n          </div>\n\n          {/* Merkez bağlantı elemanı */}\n          <div className=\"absolute inset-0 flex items-center justify-center\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-primary to-primary/60 rounded-full shadow-2xl flex items-center justify-center\">\n              <div className=\"w-6 h-6 bg-white rounded-full opacity-90 animate-ping\"></div>\n            </div>\n          </div>\n        </div>\n\n        {/* AYT Zaman */}\n        <div className=\"relative group\">\n          <div className=\"absolute -inset-1 bg-gradient-to-r from-emerald-600 via-teal-600 to-emerald-600 rounded-2xl blur opacity-25 group-hover:opacity-40 transition duration-300 animate-pulse\"></div>\n          <div className=\"relative bg-gradient-to-br from-card to-card/90 rounded-2xl border border-border/30 p-6 shadow-xl\">\n            <div className=\"text-center mb-4\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-gradient-to-br from-emerald-600 to-teal-600 rounded-full mb-3 shadow-lg\">\n                <span className=\"text-2xl font-bold text-white\">A</span>\n              </div>\n              <h4 className=\"text-xl font-bold bg-gradient-to-r from-emerald-600 to-teal-600 bg-clip-text text-transparent mb-2\">\n                AYT 2026  \n              </h4>\n              <div className=\"text-xs text-muted-foreground\">Alan Yeterlilik Testi</div>\n            </div>\n            <div className=\"grid grid-cols-4 gap-3\">\n              {[\n                { label: 'Gün', value: formatTime(aytCountdown).days },\n                { label: 'Saat', value: formatTime(aytCountdown).hours },\n                { label: 'Dk', value: formatTime(aytCountdown).minutes },\n                { label: 'Sn', value: formatTime(aytCountdown).seconds }\n              ].map(({ label, value }) => (\n                <div key={label} className=\"text-center\">\n                  <div className=\"bg-gradient-to-br from-emerald-600 to-teal-600 text-white rounded-xl px-2 py-3 shadow-lg min-h-[60px] flex flex-col justify-center\">\n                    <span className=\"text-lg md:text-xl font-bold font-mono leading-tight\">{value}</span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-1 font-medium\">{label}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Alt Motivasyon Bölümü */}\n      <div className=\"relative text-center mt-12 space-y-4\">\n        <div className=\"text-base text-foreground font-medium\">\n          ✨ Hedefime ulaşmak için kalan zaman ✨\n        </div>\n        <div className=\"flex items-center justify-center space-x-3\">\n          <div className=\"w-3 h-3 bg-gradient-to-r from-blue-500 to-purple-500 rounded-full animate-pulse shadow-lg\"></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-4 h-4 bg-gradient-to-r from-primary to-primary/60 rounded-full animate-bounce shadow-lg\" style={{ animationDelay: '0.3s' }}></div>\n          <div className=\"w-1 h-1 bg-muted-foreground rounded-full\"></div>\n          <div className=\"w-3 h-3 bg-gradient-to-r from-emerald-500 to-teal-500 rounded-full animate-pulse shadow-lg\" style={{ animationDelay: '0.6s' }}></div>\n        </div>\n        <div className=\"text-xs text-muted-foreground italic\">\n          \"Başarı, hazırlığın fırsatla buluştuğu andır\"\n        </div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":10726},"client/src/components/dashboard-summary-cards.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, Target, BookOpen, Award, Brain, Zap, Calendar, BarChart3, Sparkles } from \"lucide-react\";\nimport { ExamResult, QuestionLog } from \"@shared/schema\";\nimport { useState, useEffect } from \"react\";\n\nexport function DashboardSummaryCards() {\n  const [animationDelay, setAnimationDelay] = useState(0);\n  const [isVisible, setIsVisible] = useState(false);\n  \n  const { data: examResults = [], isLoading: examLoading } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n  \n  const { data: questionLogs = [], isLoading: questionLoading } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 100);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const isLoading = examLoading || questionLoading;\n  \n\n  // TYT ve AYT net ortalamalarını hesapla\n  const calculateNetAverages = () => {\n    // Sınav tarihine göre azalan şekilde sırala ve son 5 sınavı al\n    const sortedExams = [...examResults].sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime());\n    const last5Exams = sortedExams.slice(0, 5);\n    const tytNets = last5Exams.filter(exam => exam.tyt_net !== undefined && exam.tyt_net !== null && exam.tyt_net !== '').map(exam => parseFloat(exam.tyt_net.toString()));\n    const aytNets = last5Exams.filter(exam => exam.ayt_net !== undefined && exam.ayt_net !== null && exam.ayt_net !== '').map(exam => parseFloat(exam.ayt_net.toString()));\n    \n    const tytAvg = tytNets.length > 0 ? tytNets.reduce((sum, net) => sum + net, 0) / tytNets.length : 0;\n    const aytAvg = aytNets.length > 0 ? aytNets.reduce((sum, net) => sum + net, 0) / aytNets.length : 0;\n    \n    return { tytAvg: tytAvg.toFixed(1), aytAvg: aytAvg.toFixed(1), examCount: last5Exams.length };\n  };\n\n  // Toplam çözülmüş soruları ve günlük ortalamayı hesapla\n  const calculateQuestionStats = () => {\n    const totalCorrect = questionLogs.reduce((total, log) => total + (Number(log.correct_count) || 0), 0);\n    const totalWrong = questionLogs.reduce((total, log) => total + (Number(log.wrong_count) || 0), 0);\n    const totalBlank = questionLogs.reduce((total, log) => total + (Number(log.blank_count) || 0), 0);\n    const totalQuestions = totalCorrect + totalWrong + totalBlank;\n\n    // Günlük ortalamayı benzersiz tarihlere göre hesapla\n    const uniqueDates = Array.from(new Set(questionLogs.map(log => log.study_date)));\n    const dailyAverage = uniqueDates.length > 0 ? (totalQuestions / uniqueDates.length).toFixed(1) : '0';\n\n    // En aktif günü bul\n    const dayActivity: { [key: string]: number } = {};\n    questionLogs.forEach(log => {\n      const date = log.study_date;\n      const count = (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0);\n      dayActivity[date] = (dayActivity[date] || 0) + count;\n    });\n    \n    let mostActiveDay: string | null = null;\n    let maxActivity = 0;\n    Object.entries(dayActivity).forEach(([date, count]) => {\n      if (count > maxActivity) {\n        maxActivity = count;\n        mostActiveDay = date;\n      }\n    });\n    \n    return { \n      totalQuestions, \n      dailyAverage, \n      totalCorrect, \n      totalWrong,\n      activeDays: uniqueDates.length,\n      mostActiveDay,\n      maxActivity\n    };\n  };\n\n  // TYT ve AYT net başarı oranlarına göre en güçlü ve en zayıf konuları hesapla\n  const calculateSubjectPerformance = () => {\n    const subjectStats: { [key: string]: { correct: number; attempted: number } } = {};\n    \n    questionLogs.forEach(log => {\n      const subject = log.subject;\n      const correct = Number(log.correct_count) || 0;\n      const wrong = Number(log.wrong_count) || 0;\n      const blank = Number(log.blank_count) || 0;\n      // Başarı oranını boş bırakılanlar hariç hesapla (doğru / (doğru + yanlış))\n      const attempted = correct + wrong;\n      const total = attempted + blank;\n      \n      if (!subjectStats[subject]) {\n        subjectStats[subject] = { correct: 0, attempted: 0 };\n      }\n      \n      subjectStats[subject].correct += correct;\n      subjectStats[subject].attempted += attempted;\n    });\n    \n    const subjects = Object.entries(subjectStats)\n      .map(([subject, stats]) => ({\n        subject,\n        successRate: stats.attempted > 0 ? (stats.correct / stats.attempted) * 100 : 0,\n        totalQuestions: stats.attempted\n      }))\n      .filter(s => s.totalQuestions >= 5) // En az 5 denenen sorusu olan konuları dikkate al\n      .sort((a, b) => b.successRate - a.successRate);\n    \n    const strongest = subjects[0];\n    const weakest = subjects[subjects.length - 1];\n    \n    return { strongest, weakest };\n  };\n\n  const netAverages = calculateNetAverages();\n  const questionStats = calculateQuestionStats();\n  const subjectPerformance = calculateSubjectPerformance();\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8 mb-12\">\n        {[1, 2, 3].map((i) => (\n          <div key={i} className=\"bg-gradient-to-br from-white/50 to-white/30 dark:from-gray-900/50 dark:to-gray-800/30 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden animate-pulse\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/5 to-blue-500/5 dark:from-purple-400/10 dark:to-blue-400/10\"></div>\n            <div className=\"relative space-y-4\">\n              <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-3/4\"></div>\n              <div className=\"h-8 bg-gray-200 dark:bg-gray-700 rounded-lg w-1/2\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg w-full\"></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mb-12\">\n      {/* Başlık */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center gap-3 mb-2\">\n          <div className=\"p-2 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl shadow-lg\">\n            <BarChart3 className=\"h-6 w-6 text-white\" />\n          </div>\n          <h2 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n            Performans Özeti\n          </h2>\n        </div>\n        <p className=\"text-muted-foreground\"></p>\n      </div>\n\n      <div className={`grid grid-cols-1 lg:grid-cols-3 gap-8 transition-all duration-1000 ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`}>\n        {/* Geliştirilmiş TYT/AYT Net Ortalamaları Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-exam-averages\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-blue-500/20 to-indigo-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-green-500/15 to-emerald-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          {/* Işıltılı Animasyon */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Sparkles className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-3 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl shadow-lg\">\n                  <Target className=\"h-6 w-6 text-white\" />\n                </div>\n                <div>\n                  <h3 className=\"text-xl font-bold text-foreground\">Deneme Ortalamaları</h3>\n                  <p className=\"text-sm text-muted-foreground\">Son {netAverages.examCount} deneme</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-blue-600 dark:text-blue-400 mb-1\" data-testid=\"text-tyt-average\">\n                      {netAverages.tytAvg}\n                    </div>\n                    <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">TYT Net Ortalama</div>\n                    <div className=\"w-full bg-blue-100 dark:bg-blue-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${Math.min((parseFloat(netAverages.tytAvg) / 120) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                    <span className=\"text-xs font-bold text-blue-600 dark:text-blue-400\">TYT</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-3xl font-black text-green-600 dark:text-green-400 mb-1\" data-testid=\"text-ayt-average\">\n                      {netAverages.aytAvg}\n                    </div>\n                    <div className=\"text-sm font-medium text-green-700 dark:text-green-300\">AYT Net Ortalama</div>\n                    <div className=\"w-full bg-green-100 dark:bg-green-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${Math.min((parseFloat(netAverages.aytAvg) / 80) * 100, 100)}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  <div className=\"ml-4 p-3 bg-green-100 dark:bg-green-900/30 rounded-xl\">\n                    <span className=\"text-xs font-bold text-green-600 dark:text-green-400\">AYT</span>\n                  </div>\n                </div>\n              </div>\n              \n              {netAverages.examCount === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Target className=\"h-12 w-12 mx-auto mb-3 opacity-50\" />\n                  <p className=\"font-medium mb-1\">Henüz deneme kaydı bulunmuyor</p>\n                  <p className=\"text-sm\">İlk denememi eklemeden gözükmez.</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Soru İstatistikleri Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-question-stats\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-purple-500/20 to-pink-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-orange-500/15 to-red-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n          \n          {/* Enerji Simgesi Animasyonu */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Zap className=\"h-5 w-5 text-yellow-500 animate-bounce\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl shadow-lg\">\n                <BookOpen className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-foreground\">Soru İstatistikleri</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {questionStats.mostActiveDay ? (\n                    <span className=\"flex items-center gap-1\">\n                      En Aktif Olunan Gün → \n                      <span className=\"font-semibold text-purple-600 dark:text-purple-400\">\n                        {new Date(questionStats.mostActiveDay).toLocaleDateString('tr-TR', { \n                          day: 'numeric', \n                          month: 'short'\n                        })} ({questionStats.maxActivity} soru)\n                      </span>\n                    </span>\n                  ) : (\n                    'Henüz aktif gün bulunmuyor'\n                  )}\n                </p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-purple-200/30 dark:border-purple-700/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <div className=\"text-3xl font-black text-purple-600 dark:text-purple-400\" data-testid=\"text-total-questions\">\n                      {questionStats.totalQuestions.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Toplam Çözülen Soru</div>\n                  </div>\n                  <div className=\"p-3 bg-purple-100 dark:bg-purple-900/30 rounded-xl\">\n                    <Brain className=\"h-6 w-6 text-purple-600 dark:text-purple-400\" />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <div>\n                    <div className=\"text-2xl font-black text-blue-600 dark:text-blue-400\" data-testid=\"text-daily-average\">\n                      {questionStats.dailyAverage}\n                    </div>\n                    <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Günlük Ortalama</div>\n                  </div>\n                  <div className=\"p-3 bg-blue-100 dark:bg-blue-900/30 rounded-xl\">\n                    <Calendar className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n                  </div>\n                </div>\n              </div>\n\n              {/* Doğru ve Yanlış Cevaplar Yan Yana */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                {/* Doğru Cevaplar Kutusu */}\n                <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-green-600 dark:text-green-400 mb-2\" data-testid=\"text-total-correct\">\n                      {questionStats.totalCorrect.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-sm font-medium text-green-700 dark:text-green-300\">Toplam Doğru</div>\n                    <div className=\"w-full bg-green-100 dark:bg-green-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${questionStats.totalQuestions > 0 ? (questionStats.totalCorrect / questionStats.totalQuestions) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Yanlış Cevaplar Kutusu */}\n                <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-4 backdrop-blur-sm border border-red-200/30 dark:border-red-700/30\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-black text-red-600 dark:text-red-400 mb-2\" data-testid=\"text-total-wrong\">\n                      {questionStats.totalWrong.toLocaleString('tr-TR')}\n                    </div>\n                    <div className=\"text-sm font-medium text-red-700 dark:text-red-300\">Toplam Yanlış</div>\n                    <div className=\"w-full bg-red-100 dark:bg-red-900/30 rounded-full h-2 mt-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-red-500 to-red-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${questionStats.totalQuestions > 0 ? (questionStats.totalWrong / questionStats.totalQuestions) * 100 : 0}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Konu Performansı Kartı */}\n        <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden hover:scale-[1.02] transition-all duration-500 shadow-lg hover:shadow-2xl\" data-testid=\"card-subject-performance\">\n          {/* Animasyonlu Arka Plan Öğeleri */}\n          <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-orange-500/20 to-red-600/20 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-700\"></div>\n          <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-yellow-500/15 to-orange-600/15 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-700\"></div>\n\n          {/* Kupa Animasyonu */}\n          <div className=\"absolute top-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n            <Award className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n          </div>\n\n          <div className=\"relative z-10\">\n            <div className=\"flex items-center gap-3 mb-6\">\n              <div className=\"p-3 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl shadow-lg\">\n                <Award className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <h3 className=\"text-xl font-bold text-foreground\">Ders Performansı</h3>\n                <p className=\"text-sm text-muted-foreground\">En güçlü ve zayıf dersler</p>\n              </div>\n            </div>\n            \n            <div className=\"space-y-6\">\n              {subjectPerformance.strongest ? (\n                <>\n                  <div className=\"bg-gradient-to-r from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl p-4 border border-green-200/50 dark:border-green-700/30\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <div className=\"p-2 bg-green-500 rounded-lg\">\n                          <TrendingUp className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <div className=\"font-bold text-green-700 dark:text-green-300\" data-testid=\"text-strongest-subject\">\n                            {subjectPerformance.strongest.subject}\n                          </div>\n                          <div className=\"text-xs text-green-600 dark:text-green-400\">En güçlü ders</div>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"text-2xl font-black text-green-600 dark:text-green-400\">\n                          {subjectPerformance.strongest.successRate.toFixed(1)}%\n                        </div>\n                        <div className=\"text-xs text-green-600 dark:text-green-400\">\n                          {subjectPerformance.strongest.totalQuestions} soru\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"w-full bg-green-200 dark:bg-green-800/30 rounded-full h-2 mt-3\">\n                      <div \n                        className=\"bg-gradient-to-r from-green-500 to-emerald-600 h-2 rounded-full transition-all duration-1000\"\n                        style={{ width: `${subjectPerformance.strongest.successRate}%` }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  {subjectPerformance.weakest && subjectPerformance.weakest.subject !== subjectPerformance.strongest.subject && (\n                    <div className=\"bg-gradient-to-r from-red-50 to-pink-50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl p-4 border border-red-200/50 dark:border-red-700/30\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-3\">\n                          <div className=\"p-2 bg-red-500 rounded-lg\">\n                            <TrendingDown className=\"h-4 w-4 text-white\" />\n                          </div>\n                          <div>\n                            <div className=\"font-bold text-red-700 dark:text-red-300\" data-testid=\"text-weakest-subject\">\n                              {subjectPerformance.weakest.subject}\n                            </div>\n                            <div className=\"text-xs text-red-600 dark:text-red-400\">Geliştirilmesi gereken</div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"text-2xl font-black text-red-600 dark:text-red-400\">\n                            {subjectPerformance.weakest.successRate.toFixed(1)}%\n                          </div>\n                          <div className=\"text-xs text-red-600 dark:text-red-400\">\n                            {subjectPerformance.weakest.totalQuestions} soru\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-red-200 dark:bg-red-800/30 rounded-full h-2 mt-3\">\n                        <div \n                          className=\"bg-gradient-to-r from-red-500 to-pink-600 h-2 rounded-full transition-all duration-1000\"\n                          style={{ width: `${subjectPerformance.weakest.successRate}%` }}\n                        ></div>\n                      </div>\n                    </div>\n                  )}\n                </>\n              ) : (\n                <div className=\"text-center py-12 text-muted-foreground\">\n                  <div className=\"relative mb-4\">\n                    <Brain className=\"h-16 w-16 mx-auto opacity-30\" />\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"w-8 h-8 border-2 border-dashed border-gray-300 rounded-full animate-spin\"></div>\n                    </div>\n                  </div>\n                  <p className=\"font-medium text-lg mb-2\">Yeterli veri bulunmuyor</p>\n                  <p className=\"text-sm\">Her dersten en az 5 soru çöz</p>\n                  <div className=\"mt-4 px-6 py-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-full text-xs font-medium text-purple-700 dark:text-purple-300 inline-block\">\n                    Analiz için veri topluyorum...\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":24832},"client/src/components/edit-task-modal.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useEffect } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { Task, InsertTask } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditTaskModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  task: Task | null;\n}\n\nexport function EditTaskModal({ open, onOpenChange, task }: EditTaskModalProps) {\n  const [formData, setFormData] = useState<{\n    title: string;\n    description: string;\n    priority: \"low\" | \"medium\" | \"high\";\n    category: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\";\n    color: string;\n    dueDate: string;\n  }>({\n    title: \"\",\n    description: \"\",\n    priority: \"medium\",\n    category: \"genel\",\n    color: \"#8B5CF6\",\n    dueDate: new Date().toISOString().split('T')[0],\n  });\n\n  const { toast } = useToast();\n\n  // Görev değiştiğinde form verilerini güncelle\n  useEffect(() => {\n    if (task) {\n      setFormData({\n        title: task.title || \"\",\n        description: task.description || \"\",\n        priority: task.priority || \"medium\",\n        category: task.category || \"genel\",\n        color: task.color || \"#8B5CF6\",\n        dueDate: task.dueDate ? task.dueDate.split('T')[0] : new Date().toISOString().split('T')[0],\n      });\n    }\n  }, [task]);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: (data: { id: string; updates: Partial<InsertTask> }) => \n      apiRequest(\"PUT\", `/api/tasks/${data.id}`, data.updates),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev başarıyla güncellendi.\",\n      });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev güncellenemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!task) return;\n\n    if (!formData.title.trim()) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Görev başlığı gereklidir.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    updateTaskMutation.mutate({\n      id: task.id,\n      updates: {\n        title: formData.title.trim(),\n        description: formData.description.trim() || undefined,\n        priority: formData.priority,\n        category: formData.category,\n        color: formData.color,\n        dueDate: formData.dueDate,\n      }\n    });\n  };\n\n  const handleCancel = () => {\n    onOpenChange(false);\n  };\n\n  if (!task) return null;\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-lg\">\n        <DialogHeader>\n          <DialogTitle>Görevi Düzenle</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          {/* Görev Başlığı */}\n          <div>\n            <Label htmlFor=\"edit-task-title\">Görev Başlığı</Label>\n            <Input\n              id=\"edit-task-title\"\n              placeholder=\"Görev başlığını girin...\"\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              data-testid=\"input-edit-task-title\"\n            />\n          </div>\n\n          {/* Görev Açıklaması */}\n          <div>\n            <Label htmlFor=\"edit-task-description\">Açıklama</Label>\n            <Textarea\n              id=\"edit-task-description\"\n              placeholder=\"Görev detaylarını açıklayın...\"\n              value={formData.description}\n              onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n              className=\"h-20 resize-none\"\n              data-testid=\"input-edit-task-description\"\n            />\n          </div>\n\n          {/* Öncelik & Kategori */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <Label htmlFor=\"edit-task-priority\">Öncelik</Label>\n              <Select\n                value={formData.priority}\n                onValueChange={(value: \"low\" | \"medium\" | \"high\") => \n                  setFormData(prev => ({ ...prev, priority: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"low\">Düşük</SelectItem>\n                  <SelectItem value=\"medium\">Orta</SelectItem>\n                  <SelectItem value=\"high\">Yüksek</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Label htmlFor=\"edit-task-category\">Ders Kategorisi</Label>\n              <Select\n                value={formData.category}\n                onValueChange={(value: \"genel\" | \"turkce\" | \"sosyal\" | \"matematik\" | \"fizik\" | \"kimya\" | \"biyoloji\" | \"tyt-geometri\" | \"ayt-geometri\" | \"ayt-matematik\" | \"ayt-fizik\" | \"ayt-kimya\" | \"ayt-biyoloji\") => \n                  setFormData(prev => ({ ...prev, category: value }))\n                }\n              >\n                <SelectTrigger data-testid=\"select-edit-task-category\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"genel\">Genel</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b\">TYT Dersleri</div>\n                  <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                  <SelectItem value=\"sosyal\">Sosyal Bilimler</SelectItem>\n                  <SelectItem value=\"matematik\">Matematik</SelectItem>\n                  <SelectItem value=\"fizik\">Fizik</SelectItem>\n                  <SelectItem value=\"kimya\">Kimya</SelectItem>\n                  <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                  <SelectItem value=\"tyt-geometri\">TYT Geometri</SelectItem>\n                  <div className=\"px-2 py-1 text-xs font-semibold text-muted-foreground border-b border-t\">AYT Dersleri</div>\n                  <SelectItem value=\"ayt-matematik\">AYT Matematik</SelectItem>\n                  <SelectItem value=\"ayt-fizik\">AYT Fizik</SelectItem>\n                  <SelectItem value=\"ayt-kimya\">AYT Kimya</SelectItem>\n                  <SelectItem value=\"ayt-biyoloji\">AYT Biyoloji</SelectItem>\n                  <SelectItem value=\"ayt-geometri\">AYT Geometri</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Son Tarih */}\n          <div>\n            <Label htmlFor=\"edit-task-due-date\">Son Tarih</Label>\n            <Input\n              id=\"edit-task-due-date\"\n              type=\"date\"\n              value={formData.dueDate}\n              onChange={(e) => setFormData(prev => ({ ...prev, dueDate: e.target.value }))}\n              className=\"w-full\"\n              data-testid=\"input-edit-task-due-date\"\n            />\n          </div>\n\n          {/* Renk Seçici */}\n          <div>\n            <Label htmlFor=\"edit-task-color\">Görev Rengi</Label>\n            <div className=\"flex items-center space-x-3\">\n              <Input\n                id=\"edit-task-color\"\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData(prev => ({ ...prev, color: e.target.value }))}\n                className=\"w-16 h-10 rounded cursor-pointer\"\n                data-testid=\"input-edit-task-color\"\n              />\n              <div className=\"flex space-x-2\">\n                {[\"#8B5CF6\", \"#EC4899\", \"#10B981\", \"#F59E0B\", \"#EF4444\", \"#3B82F6\"].map((color) => (\n                  <button\n                    key={color}\n                    type=\"button\"\n                    onClick={() => setFormData(prev => ({ ...prev, color }))}\n                    className={`w-6 h-6 rounded-full border-2 ${\n                      formData.color === color ? \"border-gray-400\" : \"border-transparent\"\n                    }`}\n                    style={{ backgroundColor: color }}\n                    title={color}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"submit\"\n              disabled={updateTaskMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-update-task\"\n            >\n              {updateTaskMutation.isPending ? \"Güncelleniyor...\" : \"Güncelle\"}\n            </Button>\n            <Button \n              type=\"button\"\n              variant=\"secondary\"\n              onClick={handleCancel}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-edit-task\"\n            >\n              İptal\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":9869},"client/src/components/emoji-picker.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface EmojiPickerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  selectedEmoji: string;\n  onEmojiSelect: (emoji: string) => void;\n  note: string;\n  onNoteChange: (note: string) => void;\n}\n\nconst EMOJI_CATEGORIES = {\n  smileys: [\"😀\", \"😃\", \"😄\", \"😁\", \"😆\", \"😅\", \"🤣\", \"😂\", \"🙂\", \"🙃\", \"😉\", \"😊\", \"😇\", \"🥰\", \"😍\", \"🤩\", \"😘\", \"😗\", \"😚\", \"😙\", \"😋\", \"😛\", \"😜\", \"🤪\", \"😝\", \"🤗\", \"🤭\", \"🤫\", \"🤔\", \"🤐\", \"🤨\", \"😐\", \"😑\", \"😶\", \"😏\", \"😒\", \"🙄\", \"😬\", \"🤥\", \"😔\", \"😪\", \"🤤\", \"😴\", \"😷\", \"🤒\", \"🤕\", \"🤢\", \"🤮\", \"🤧\", \"🥵\", \"🥶\", \"🥴\", \"😵\", \"🤯\", \"🤠\", \"🥳\", \"😎\", \"🤓\", \"🧐\"],\n  hearts: [\"❤️\", \"🧡\", \"💛\", \"💚\", \"💙\", \"💜\", \"🤎\", \"🖤\", \"🤍\", \"💕\", \"💞\", \"💓\", \"💗\", \"💖\", \"💘\", \"💝\", \"💟\", \"💔\", \"❣️\", \"💋\", \"👄\", \"🫶\", \"💏\", \"👨‍❤️‍👨\", \"👩‍❤️‍👩\", \"💑\", \"👨‍❤️‍👩\", \"👩‍❤️‍👨\"],\n  animals: [\"🐶\", \"🐱\", \"🐭\", \"🐹\", \"🐰\", \"🦊\", \"🐻\", \"🐼\", \"🐨\", \"🐯\", \"🦁\", \"🐮\", \"🐷\", \"🐽\", \"🐸\", \"🐵\", \"🙈\", \"🙉\", \"🙊\", \"🐒\", \"🐔\", \"🐧\", \"🐦\", \"🐤\", \"🐣\", \"🐥\", \"🦆\", \"🦅\", \"🦉\", \"🦇\", \"🐺\", \"🐗\", \"🐴\", \"🦄\", \"🐝\", \"🐛\", \"🦋\", \"🐌\", \"🐞\", \"🐜\", \"🦟\", \"🦗\", \"🕷️\", \"🕸️\", \"🦂\", \"🐢\", \"🐍\", \"🦎\", \"🦖\", \"🦕\", \"🐙\", \"🦑\", \"🦐\", \"🦞\", \"🦀\", \"🐡\", \"🐠\", \"🐟\", \"🐝\", \"🐞\"],\n  food: [\"🍎\", \"🍊\", \"🍋\", \"🍌\", \"🍉\", \"🍇\", \"🍓\", \"🍈\", \"🍒\", \"🍑\", \"🥭\", \"🍍\", \"🥥\", \"🥝\", \"🍅\", \"🍆\", \"🥑\", \"🥦\", \"🥬\", \"🥒\", \"🌶️\", \"🌽\", \"🥕\", \"🧄\", \"🧅\", \"🥔\", \"🍠\", \"🥐\", \"🥯\", \"🍞\", \"🥖\", \"🥨\", \"🧀\", \"🥚\", \"🍳\", \"🧈\", \"🥞\", \"🧇\", \"🥓\", \"🥩\", \"🍗\", \"🍖\", \"🦴\", \"🌭\", \"🍔\", \"🍟\", \"🍕\"],\n  activities: [\"⚽\", \"🏀\", \"🏈\", \"⚾\", \"🥎\", \"🎾\", \"🏐\", \"🏉\", \"🥏\", \"🎱\", \"🪀\", \"🏓\", \"🏸\", \"🏒\", \"🏑\", \"🥍\", \"🏏\", \"🪃\", \"🥅\", \"⛳\", \"🪁\", \"🏹\", \"🎣\", \"🤿\", \"🥊\", \"🥋\", \"🎽\", \"🛹\", \"🛷\", \"⛸️\", \"🥌\", \"🎿\", \"⛷️\", \"🏂\", \"🪂\", \"🏋️‍♀️\", \"🏋️‍♂️\", \"🤼‍♀️\", \"🤼‍♂️\", \"🤸‍♀️\", \"🤸‍♂️\", \"⛹️‍♀️\", \"⛹️‍♂️\", \"🤺\", \"🤾‍♀️\", \"🤾‍♂️\", \"🏌️‍♀️\", \"🏌️‍♂️\", \"🏇\", \"🧘‍♀️\", \"🧘‍♂️\", \"🏄‍♀️\", \"🏄‍♂️\", \"🏊‍♀️\", \"🏊‍♂️\"],\n  study: [\"📚\", \"📖\", \"📝\", \"✏️\", \"📒\", \"📓\", \"📔\", \"📕\", \"📗\", \"📘\", \"📙\", \"📑\", \"🔖\", \"🏷️\", \"💼\", \"📁\", \"📂\", \"🗂️\", \"📅\", \"📆\", \"🗓️\", \"📇\", \"📈\", \"📉\", \"📊\", \"📋\", \"📌\", \"📍\", \"📎\", \"🖇️\", \"📏\", \"📐\", \"✂️\", \"🗃️\", \"🗄️\", \"🗑️\", \"🔒\", \"🔓\", \"🔏\", \"🔐\", \"🔑\", \"🗝️\", \"🔨\", \"🪓\", \"⛏️\", \"⚒️\", \"🛠️\", \"🗡️\", \"🔗\", \"⛓️\", \"🧰\", \"🧲\", \"⚗️\", \"🧪\", \"🧫\", \"🧬\", \"🔬\", \"🔭\", \"📡\", \"💉\", \"🩸\", \"💊\", \"🩹\"]\n};\n\nexport function EmojiPicker({ open, onOpenChange, selectedEmoji, onEmojiSelect, note, onNoteChange }: EmojiPickerProps) {\n  const [showPreview, setShowPreview] = useState(false);\n\n  const handleEmojiSelect = (emoji: string) => {\n    onEmojiSelect(emoji);\n    setShowPreview(true);\n  };\n\n  const handleSave = () => {\n    setShowPreview(false);\n    onOpenChange(false);\n  };\n\n  const handleClear = () => {\n    onEmojiSelect('😊');\n    onNoteChange('');\n    setShowPreview(false);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-foreground\">Ruh Halim İçin Emoji Seçme Alanı</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Önizleme Bölümü */}\n          {showPreview && (\n            <div className=\"relative\">\n              <div \n                className={`inline-flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-500 ${\n                  selectedEmoji ? 'bg-primary/10 border border-primary/20' : 'bg-muted'\n                } ${note.trim() ? 'animate-pulse' : ''}`}\n                style={{\n                  animation: note.trim() ? 'breathe 2s ease-in-out infinite' : 'none'\n                }}\n              >\n                {selectedEmoji && (\n                  <span className=\"text-2xl\" role=\"img\" aria-label=\"selected emoji\">\n                    {selectedEmoji}\n                  </span>\n                )}\n                {note.trim() && (\n                  <span \n                    className={`text-foreground ${\n                      note.length > 50 ? 'text-sm' : note.length > 20 ? 'text-base' : 'text-lg'\n                    }`}\n                  >\n                    {note}\n                  </span>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* Emoji Kategorileri */}\n          <Tabs defaultValue=\"smileys\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-6\">\n              <TabsTrigger value=\"smileys\" className=\"text-xs\">😊</TabsTrigger>\n              <TabsTrigger value=\"hearts\" className=\"text-xs\">❤️</TabsTrigger>\n              <TabsTrigger value=\"animals\" className=\"text-xs\">🐱</TabsTrigger>\n              <TabsTrigger value=\"food\" className=\"text-xs\">🍎</TabsTrigger>\n              <TabsTrigger value=\"activities\" className=\"text-xs\">⚽</TabsTrigger>\n              <TabsTrigger value=\"study\" className=\"text-xs\">📚</TabsTrigger>\n            </TabsList>\n\n            {Object.entries(EMOJI_CATEGORIES).map(([category, emojis]) => (\n              <TabsContent key={category} value={category} className=\"space-y-2\">\n                <div className=\"grid grid-cols-8 gap-2 max-h-48 overflow-y-auto p-2 border rounded-lg bg-muted/50\">\n                  {emojis.map((emoji) => (\n                    <button\n                      key={emoji}\n                      onClick={() => handleEmojiSelect(emoji)}\n                      className={`text-2xl p-2 rounded hover:bg-secondary transition-colors ${\n                        selectedEmoji === emoji ? 'bg-primary/20 ring-2 ring-primary' : ''\n                      }`}\n                      title={emoji}\n                    >\n                      {emoji}\n                    </button>\n                  ))}\n                </div>\n              </TabsContent>\n            ))}\n          </Tabs>\n\n          {/* Not Bölümü - Tek Satır */}\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-foreground\">Kısa Not(mouse imleci ile gözükür)</label>\n            <Input\n              value={note}\n              onChange={(e) => onNoteChange(e.target.value)}\n              placeholder=\"Kısa bir not yazın...\"\n              maxLength={60}\n              className=\"w-full\"\n            />\n            <div className=\"text-xs text-muted-foreground text-right\">\n              {note.length}/60 karakter\n            </div>\n          </div>\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex justify-between space-x-2\">\n            <Button variant=\"outline\" onClick={handleClear}>\n              Temizle\n            </Button>\n            <div className=\"space-x-2\">\n              <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n                İptal\n              </Button>\n              <Button \n                onClick={handleSave}\n                disabled={!selectedEmoji && !note.trim()}\n                className=\"min-w-[80px]\"\n              >\n                Kaydet\n              </Button>\n            </div>\n          </div>\n        </div>\n      </DialogContent>\n\n      <style dangerouslySetInnerHTML={{\n        __html: `\n          @keyframes breathe {\n            0%, 100% { transform: scale(1); opacity: 1; }\n            50% { transform: scale(1.05); opacity: 0.8; }\n          }\n        `\n      }} />\n    </Dialog>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":8711},"client/src/components/enhanced-weather-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getQueryOptions } from \"@/lib/queryClient\";\nimport { Droplets, Wind, Eye, Thermometer, Sun, Moon, Activity, Shirt, Plane, Car, Heart, Dumbbell, CloudRain, Gauge, Sunrise, Sunset, Clock, ArrowUp, ArrowDown, Calendar, TrendingUp, TrendingDown } from \"lucide-react\";\nimport { useEffect, useState } from \"react\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n    sunProgress: number;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function EnhancedWeatherWidget() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  useEffect(() => {\n    const timer = setInterval(() => setCurrentTime(new Date()), 60000);\n    return () => clearInterval(timer);\n  }, []);\n\n  // Mevcut saate göre güneşin konumunu hesaplayın\n  const calculateSunPosition = (sunriseStr: string, sunsetStr: string, currentTime: Date) => {\n    const today = new Date();\n    const sunrise = new Date();\n    const sunset = new Date();\n    \n    // Gündoğumu ve günbatımı saatlerini ayrıştır (format: SS:DD)\n    const [sunriseHour, sunriseMin] = sunriseStr.split(':').map(Number);\n    const [sunsetHour, sunsetMin] = sunsetStr.split(':').map(Number);\n    \n    sunrise.setHours(sunriseHour, sunriseMin, 0, 0);\n    sunset.setHours(sunsetHour, sunsetMin, 0, 0);\n    \n    const currentMs = currentTime.getTime();\n    const sunriseMs = sunrise.getTime();\n    const sunsetMs = sunset.getTime();\n    \n    // If before sunrise or after sunset, place sun at start or end\n    if (currentMs < sunriseMs) {\n      return { progress: 0, x: 20, y: 50 }; // Start position\n    }\n    if (currentMs > sunsetMs) {\n      return { progress: 1, x: 180, y: 50 }; // End position\n    }\n    \n    // Calculate progress through the day (0 to 1)\n    const dayProgress = (currentMs - sunriseMs) / (sunsetMs - sunriseMs);\n    \n    // Calculate position along the arc: M 20 50 Q 100 10 180 50\n    // This is a quadratic curve from (20,50) to (180,50) with control point (100,10)\n    const t = dayProgress;\n    const x = Math.pow(1-t, 2) * 20 + 2*(1-t)*t * 100 + Math.pow(t, 2) * 180;\n    const y = Math.pow(1-t, 2) * 50 + 2*(1-t)*t * 10 + Math.pow(t, 2) * 50;\n    \n    return { progress: dayProgress, x, y };\n  };\n\n  const { data: weather, isLoading, error } = useQuery<WeatherData>({\n    queryKey: [\"/api/weather\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/weather`);\n      if (!response.ok) throw new Error('Failed to fetch weather data');\n      return response.json();\n    },\n    // Use optimized query options\n    ...getQueryOptions(\"/api/weather\"),\n    refetchInterval: 10 * 60 * 1000, // Refetch every 10 minutes\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-primary animate-spin\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">🔄</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yükleniyor...</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-gradient-to-br from-card to-card/80 rounded-xl border border-border/50 p-4 transition-all duration-300 hover:shadow-lg backdrop-blur-sm\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Sun className=\"h-5 w-5 mr-2 text-destructive\" />\n          Hava Durumu\n        </h3>\n        <div className=\"text-center\">\n          <div className=\"text-3xl mb-2\">⚠️</div>\n          <div className=\"text-muted-foreground mb-2\">Hava durumu yüklenemedi</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (!weather) return null;\n\n  // Calculate current sun position\n  const sunPosition = calculateSunPosition(weather.sunData.sunrise, weather.sunData.sunset, currentTime);\n\n  // Helper function to get wind direction\n  const getWindDirection = (degree: number) => {\n    const directions = [\"K\", \"KKD\", \"KD\", \"DKD\", \"D\", \"DGD\", \"GD\", \"GGD\", \"G\", \"GGB\", \"GB\", \"BGB\", \"B\", \"BKB\", \"KB\", \"KKB\"];\n    const index = Math.round(degree / 22.5) % 16;\n    return directions[index];\n  };\n\n  // Helper function to get wind description\n  const getWindDescription = (speed: number) => {\n    if (speed < 1) return \"sakin\";\n    if (speed < 6) return \"hafif esinti\";\n    if (speed < 12) return \"meltem\";\n    if (speed < 20) return \"orta rüzgar\";\n    if (speed < 29) return \"güçlü rüzgar\";\n    return \"fırtına\";\n  };\n\n  // Get background class based on weather\n  const getWeatherBackground = () => {\n    const weatherId = weather.hourlyForecast[0]?.emoji || weather.current.emoji;\n    if (weatherId.includes('☀️') || weatherId.includes('🌤️')) return 'from-yellow-300/20 via-orange-300/20 to-blue-300/20';\n    if (weatherId.includes('🌧️') || weatherId.includes('⛈️')) return 'from-gray-400/20 via-blue-400/20 to-gray-600/20';\n    if (weatherId.includes('❄️')) return 'from-blue-100/30 via-white/20 to-blue-200/30';\n    if (weatherId.includes('☁️') || weatherId.includes('⛅')) return 'from-gray-300/20 via-gray-100/20 to-gray-400/20';\n    return 'from-blue-400/20 via-indigo-400/20 to-purple-400/20';\n  };\n\n  // Calculate best time to go outside\n  const getBestOutdoorTime = () => {\n    const now = new Date();\n    const currentHour = now.getHours();\n    let bestHour = currentHour;\n    let bestTemp = weather.current.temperature;\n    let reason = \"Şu anda uygun\";\n\n    weather.hourlyForecast.forEach((hour) => {\n      const temp = hour.temperature;\n      const hourTime = hour.hour;\n      \n      // Prefer temperatures between 20-25°C, avoid extreme hours\n      if (hourTime >= 8 && hourTime <= 20) {\n        if (Math.abs(temp - 22) < Math.abs(bestTemp - 22)) {\n          bestTemp = temp;\n          bestHour = hourTime;\n          reason = `${hourTime}:00'da ${temp}°C ile ideal`;\n        }\n      }\n    });\n\n    return reason;\n  };\n\n  // Get health advice based on weather\n  const getHealthAdvice = () => {\n    const uvLevel = weather.uvIndex.value;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality;\n    \n    if (uvLevel > 7) return \"☀️ UV çok yüksek - güneş kremi ve şapka şart\";\n    if (airQuality && airQuality.aqi > 3) return \"💨 Hava kalitesi düşük - dışarı çıkarken dikkat\";\n    if (humidity > 80) return \"💧 Yüksek nem - bol su için ve hafif giyinin\";\n    if (humidity < 30) return \"🌪️ Kuru hava - cilt nemlendiricisi kullanın\";\n    return \"✅ Sağlıklı hava koşulları\";\n  };\n\n  // Get sleep index\n  const getSleepIndex = () => {\n    const temp = weather.current.temperature;\n    const humidity = weather.current.humidity;\n    const airQuality = weather.airQuality?.aqi || 2;\n    \n    let score = 100;\n    \n    // Ideal sleep temp 18-22°C\n    if (temp < 16 || temp > 24) score -= 30;\n    else if (temp < 18 || temp > 22) score -= 15;\n    \n    // Ideal humidity 40-60%\n    if (humidity < 30 || humidity > 70) score -= 20;\n    else if (humidity < 40 || humidity > 60) score -= 10;\n    \n    // Air quality impact\n    if (airQuality > 3) score -= 25;\n    else if (airQuality > 2) score -= 10;\n    \n    score = Math.max(0, Math.min(100, score));\n    \n    let level = \"Mükemmel\";\n    let advice = \"Rahat uyku için ideal koşullar\";\n    \n    if (score < 50) {\n      level = \"Zor\";\n      advice = \"Klima/ısıtıcı ve havalandırma önerilir\";\n    } else if (score < 70) {\n      level = \"Orta\";\n      advice = \"Oda sıcaklığını ayarlayın\";\n    } else if (score < 85) {\n      level = \"İyi\";\n      advice = \"Güzel bir uyku geçireceksiniz\";\n    }\n    \n    return { score: Math.round(score), level, advice };\n  };\n\n  const sleepIndex = getSleepIndex();\n  const bestOutdoorTime = getBestOutdoorTime();\n  const healthAdvice = getHealthAdvice();\n\n  return (\n    <div className={`bg-gradient-to-br ${getWeatherBackground()} from-card to-card/80 rounded-xl border border-border/50 p-6 transition-all duration-300 hover:shadow-lg backdrop-blur-sm overflow-hidden relative`}>\n      {/* Animated Weather Background Effects */}\n      {weather.current.emoji.includes('🌧️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"rain-animation\"></div>\n        </div>\n      )}\n      \n      {weather.current.emoji.includes('☀️') && (\n        <div className=\"absolute inset-0 pointer-events-none\">\n          <div className=\"sun-rays-animation\"></div>\n        </div>\n      )}\n\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-2xl font-bold text-foreground flex items-center\">\n            <span className=\"text-3xl mr-3\">{weather.current.emoji}</span>\n            {weather.location}\n          </h3>\n          <p className=\"text-sm text-muted-foreground capitalize\">{weather.current.description}</p>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"text-4xl font-bold text-foreground\">{weather.current.temperature}°C</div>\n          <div className=\"text-sm text-muted-foreground\">Hissedilen: {weather.current.feelsLike}°C</div>\n        </div>\n      </div>\n\n      {/* Main Weather Details */}\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <CloudRain className=\"h-4 w-4 text-blue-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Yağış</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.precipitation.toFixed(1)} mm</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.precipitation > 0 ? `${weather.current.precipitation.toFixed(1)}mm yağış` : 'Şu anda yağmur yok'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Wind className=\"h-4 w-4 text-gray-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">Rüzgar</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.current.windSpeed} km/h</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {getWindDirection(weather.current.windDirection)} | {getWindDescription(weather.current.windSpeed)}\n          </div>\n        </div>\n\n        {weather.airQuality && (\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n            <div className=\"flex items-center justify-center mb-2\">\n              <Eye className=\"h-4 w-4 text-green-500 mr-1 group-hover:scale-110 transition-transform\" />\n              <span className=\"text-xs text-muted-foreground\">Hava Kalitesi</span>\n            </div>\n            <div className=\"text-lg font-bold text-foreground\">{weather.airQuality.aqi * 20}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.airQuality.level} | {weather.airQuality.description}</div>\n          </div>\n        )}\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:bg-white/20 dark:hover:bg-black/20 transition-all duration-300 hover:scale-105 cursor-pointer group\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Sun className=\"h-4 w-4 text-yellow-500 mr-1 group-hover:scale-110 transition-transform\" />\n            <span className=\"text-xs text-muted-foreground\">UV Endeksi</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">{weather.uvIndex.value}</div>\n          <div className=\"text-xs text-muted-foreground\">{weather.uvIndex.level} | {weather.uvIndex.description}</div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 mb-6\">\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Droplets className=\"h-4 w-4 text-blue-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">Nem</span>\n          </div>\n          <div className=\"text-lg font-bold text-foreground\">%{weather.current.humidity}</div>\n          <div className=\"text-xs text-muted-foreground\">\n            {weather.current.humidity > 70 ? 'Yüksek nem seviyesi' : \n             weather.current.humidity > 30 ? 'Mevcut ortamda orta seviye nem' : 'Düşük nem seviyesi'}\n          </div>\n        </div>\n\n        <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Clock className=\"h-4 w-4 text-purple-500 mr-1\" />\n            <span className=\"text-xs text-muted-foreground\">En İyi Saat</span>\n          </div>\n          <div className=\"text-sm font-bold text-foreground\">{bestOutdoorTime}</div>\n          <div className=\"text-xs text-muted-foreground\">Dışarı çıkmak için</div>\n        </div>\n      </div>\n\n      {/* Sunrise/Sunset Arc with Moving Sun */}\n      <div className=\"bg-gradient-to-t from-orange-100/20 via-yellow-50/20 to-blue-100/20 dark:from-orange-900/20 dark:via-yellow-900/20 dark:to-blue-900/20 rounded-lg p-4 mb-6\">\n        <div className=\"flex justify-between items-center text-xs text-muted-foreground mb-2\">\n          <div className=\"flex items-center\">\n            <Sunrise className=\"h-4 w-4 mr-1 text-orange-500\" />\n            <span>{weather.sunData.sunrise}</span>\n          </div>\n          <span className=\"font-medium text-foreground\">Gün Uzunluğu: {weather.sunData.dayLength}</span>\n          <div className=\"flex items-center\">\n            <Sunset className=\"h-4 w-4 mr-1 text-orange-600\" />\n            <span>{weather.sunData.sunset}</span>\n          </div>\n        </div>\n        \n        <div className=\"relative h-16 flex items-end justify-center\">\n          <svg viewBox=\"0 0 200 60\" className=\"w-full h-full\">\n            {/* Sunrise/Sunset Arc */}\n            <path\n              d=\"M 20 50 Q 100 10 180 50\"\n              stroke=\"currentColor\"\n              strokeWidth=\"2\"\n              fill=\"none\"\n              className=\"text-orange-400/60\"\n              strokeDasharray=\"5,5\"\n            />\n            \n            {/* Sun Position - Dynamic based on current time */}\n            <circle\n              cx={sunPosition.x}\n              cy={sunPosition.y}\n              r=\"6\"\n              fill=\"currentColor\"\n              className=\"text-yellow-500 animate-pulse drop-shadow-lg\"\n              style={{\n                filter: 'drop-shadow(0 0 8px rgba(255, 255, 0, 0.6))',\n                transition: 'cx 2s ease-in-out, cy 2s ease-in-out'\n              }}\n            />\n            \n            {/* Sun Rays - Dynamic position */}\n            <g className=\"text-yellow-400 opacity-70\">\n              {[0, 45, 90, 135, 180, 225, 270, 315].map((angle, i) => {\n                const sunX = sunPosition.x;\n                const sunY = sunPosition.y;\n                const radians = (angle * Math.PI) / 180;\n                const rayLength = 8 + Math.sin(Date.now() / 1000 + i) * 2; // Animated ray length\n                const x1 = sunX + rayLength * Math.cos(radians);\n                const y1 = sunY + rayLength * Math.sin(radians);\n                const x2 = sunX + (rayLength + 4) * Math.cos(radians);\n                const y2 = sunY + (rayLength + 4) * Math.sin(radians);\n                \n                return (\n                  <line\n                    key={i}\n                    x1={x1}\n                    y1={y1}\n                    x2={x2}\n                    y2={y2}\n                    stroke=\"currentColor\"\n                    strokeWidth=\"1.5\"\n                    className=\"animate-pulse\"\n                    style={{ \n                      animationDelay: `${i * 0.1}s`,\n                      transition: 'x1 2s ease-in-out, y1 2s ease-in-out, x2 2s ease-in-out, y2 2s ease-in-out'\n                    }}\n                  />\n                );\n              })}\n            </g>\n            \n            {/* Current time indicator */}\n            <text\n              x={sunPosition.x}\n              y={sunPosition.y - 15}\n              textAnchor=\"middle\"\n              className=\"text-xs font-medium fill-yellow-600 dark:fill-yellow-400\"\n              style={{ filter: 'drop-shadow(0 1px 2px rgba(0,0,0,0.3))' }}\n            >\n              {currentTime.toLocaleTimeString('tr-TR', { hour: '2-digit', minute: '2-digit' })}\n            </text>\n          </svg>\n        </div>\n      </div>\n\n      {/* Enhanced Hourly Weather Forecast */}\n      <div className=\"bg-gradient-to-br from-blue-50/30 via-white/20 to-cyan-50/30 dark:from-blue-950/40 dark:via-slate-800/50 dark:to-cyan-950/30 rounded-2xl p-6 mb-6 border border-blue-200/30 dark:border-blue-800/30 relative overflow-hidden\">\n        {/* Decorative Background */}\n        <div className=\"absolute top-0 left-0 w-32 h-32 bg-gradient-to-br from-blue-300/10 to-cyan-300/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 right-0 w-28 h-28 bg-gradient-to-tr from-cyan-300/10 to-blue-300/10 rounded-full blur-2xl\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <h4 className=\"text-2xl font-bold text-foreground flex items-center\">\n              <div className=\"p-3 bg-gradient-to-br from-blue-500 to-cyan-600 rounded-xl shadow-lg mr-4\">\n                <Clock className=\"h-6 w-6 text-white\" />\n              </div>\n              <div>\n                <span className=\"bg-gradient-to-r from-blue-600 via-cyan-600 to-blue-600 bg-clip-text text-transparent\">\n                  🕐 Saatlik Hava Durumu\n                </span>\n                <p className=\"text-sm text-muted-foreground font-normal\">Günlük detaylı takip</p>\n              </div>\n            </h4>\n            <div className=\"text-sm text-muted-foreground bg-blue-100/30 dark:bg-blue-900/30 rounded-lg px-3 py-1\">\n              24 Saatlik Önizleme\n            </div>\n          </div>\n          \n          {weather.hourlyForecast.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-blue-100 to-cyan-100 dark:from-blue-900/30 dark:to-cyan-900/30 flex items-center justify-center mx-auto mb-4\">\n                <Clock className=\"h-8 w-8 text-blue-500\" />\n              </div>\n              <p className=\"text-lg font-medium text-foreground\">Saatlik veri hazırlanıyor</p>\n              <p className=\"text-sm text-muted-foreground\">Detaylı hava durumu bilgileri yükleniyor...</p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Desktop View - Horizontal Cards */}\n              <div className=\"hidden md:grid md:grid-cols-6 lg:grid-cols-8 gap-4\">\n                {weather.hourlyForecast.slice(0, 8).map((hour, index) => (\n                  <div key={index} className=\"bg-white/30 dark:bg-black/20 rounded-xl p-4 text-center hover:scale-105 hover:shadow-lg transition-all duration-300 group border border-white/20 dark:border-gray-600/20\">\n                    <div className=\"text-xs font-medium text-muted-foreground mb-3\">\n                      {hour.hour === currentTime.getHours() ? \n                        <span className=\"bg-blue-500 text-white px-2 py-1 rounded-full text-xs\">Şimdi</span> : \n                        `${hour.hour.toString().padStart(2, '0')}:00`\n                      }\n                    </div>\n                    \n                    <div className=\"text-3xl mb-3 group-hover:scale-110 transition-transform duration-300\">{hour.emoji}</div>\n                    \n                    <div className=\"text-lg font-bold text-foreground mb-2\">{hour.temperature}°C</div>\n                    \n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Droplets className=\"h-3 w-3 mr-1 text-blue-500\" />\n                        <span>{Math.round(hour.precipitation)}mm</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Wind className=\"h-3 w-3 mr-1 text-gray-500\" />\n                        <span>{hour.windSpeed}km/h</span>\n                      </div>\n                      \n                      <div className=\"flex items-center justify-center text-xs text-muted-foreground\">\n                        <Eye className=\"h-3 w-3 mr-1 text-blue-400\" />\n                        <span>%{hour.humidity}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Mobile View - Vertical List */}\n              <div className=\"md:hidden space-y-3\">\n                {weather.hourlyForecast.slice(0, 6).map((hour, index) => (\n                  <div key={index} className=\"bg-white/20 dark:bg-black/20 rounded-xl p-4 flex items-center space-x-4 hover:bg-white/30 dark:hover:bg-black/30 transition-all duration-300\">\n                    <div className=\"text-center min-w-[60px]\">\n                      <div className=\"text-xs font-medium text-muted-foreground mb-1\">\n                        {hour.hour === currentTime.getHours() ? 'Şimdi' : `${hour.hour.toString().padStart(2, '0')}:00`}\n                      </div>\n                      <div className=\"text-2xl\">{hour.emoji}</div>\n                    </div>\n                    \n                    <div className=\"flex-1\">\n                      <div className=\"text-lg font-bold text-foreground mb-1\">{hour.temperature}°C</div>\n                      <div className=\"text-sm text-muted-foreground\">Saat {hour.hour}:00</div>\n                    </div>\n                    \n                    <div className=\"text-right space-y-1\">\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Droplets className=\"h-3 w-3 mr-1 text-blue-500\" />\n                        <span>{Math.round(hour.precipitation)}mm</span>\n                      </div>\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Wind className=\"h-3 w-3 mr-1 text-gray-500\" />\n                        <span>{hour.windSpeed}km/h</span>\n                      </div>\n                      <div className=\"flex items-center text-xs text-muted-foreground\">\n                        <Eye className=\"h-3 w-3 mr-1 text-blue-400\" />\n                        <span>%{hour.humidity}</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              {/* Quick Summary */}\n              <div className=\"mt-6 bg-gradient-to-r from-blue-100/40 to-cyan-100/40 dark:from-blue-900/40 dark:to-cyan-900/40 rounded-xl p-4\">\n                <div className=\"flex justify-between items-center text-sm\">\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-4 w-4 mr-2 text-green-500\" />\n                    <span className=\"text-muted-foreground\">En Yüksek: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {Math.max(...weather.hourlyForecast.slice(0, 8).map(h => h.temperature))}°C\n                    </span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <TrendingDown className=\"h-4 w-4 mr-2 text-blue-500\" />\n                    <span className=\"text-muted-foreground\">En Düşük: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {Math.min(...weather.hourlyForecast.slice(0, 8).map(h => h.temperature))}°C\n                    </span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Droplets className=\"h-4 w-4 mr-2 text-blue-400\" />\n                    <span className=\"text-muted-foreground\">Toplam Yağış: </span>\n                    <span className=\"font-semibold text-foreground ml-1\">\n                      {weather.hourlyForecast.slice(0, 8).reduce((sum, h) => sum + h.precipitation, 0).toFixed(1)}mm\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Health & Lifestyle Advice */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Heart className=\"h-5 w-5 mr-2 text-red-500\" />\n            <span className=\"font-semibold text-foreground\">Sağlık Tavsiyesi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{healthAdvice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Moon className=\"h-5 w-5 mr-2 text-indigo-500\" />\n            <span className=\"font-semibold text-foreground\">Uyku Endeksi</span>\n          </div>\n          <div className=\"flex items-center mb-2\">\n            <div className=\"text-2xl font-bold text-foreground mr-2\">{sleepIndex.score}</div>\n            <div className=\"text-sm text-muted-foreground\">{sleepIndex.level}</div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">{sleepIndex.advice}</p>\n        </div>\n        \n        <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n          <div className=\"flex items-center mb-3\">\n            <Clock className=\"h-5 w-5 mr-2 text-purple-500\" />\n            <span className=\"font-semibold text-foreground\">Dışarı Çıkma Önerisi</span>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">{bestOutdoorTime}</p>\n        </div>\n      </div>\n\n      {/* 7-Day Forecast - Enhanced */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4 mb-6\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          7 Günlük Hava Durumu Tahmini\n        </h4>\n        <div className=\"grid grid-cols-7 gap-2\">\n          {weather.forecast.map((day, index) => (\n            <div key={index} className=\"text-center bg-white/10 dark:bg-black/10 rounded-lg p-3 hover:scale-105 transition-all duration-200\">\n              <div className=\"text-xs font-medium text-muted-foreground mb-2\">\n                {index === 0 ? \"Bugün\" : day.dayName}\n              </div>\n              <div className=\"text-2xl mb-3 hover:scale-110 transition-transform\">{day.emoji}</div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowUp className=\"h-3 w-3 text-red-500\" />\n                <span className=\"text-sm font-bold text-foreground\">{day.temperature.max}°</span>\n              </div>\n              \n              {/* Enhanced Temperature Range Bar */}\n              <div className=\"relative h-16 w-3 mx-auto bg-gradient-to-t from-gray-800 via-purple-800 to-black dark:from-gray-900 dark:via-purple-900 dark:to-black rounded-full overflow-hidden mb-2\">\n                <div \n                  className=\"absolute bottom-0 w-full bg-gradient-to-t from-purple-600 via-purple-400 to-gray-900 rounded-full transition-all duration-500\"\n                  style={{\n                    height: `${Math.min(90, Math.max(30, ((day.temperature.max - day.temperature.min + 10) / 35) * 100))}%`\n                  }}\n                ></div>\n                \n                {/* Temperature markers */}\n                <div className=\"absolute inset-0 flex flex-col justify-between py-1\">\n                  <div className=\"w-full h-0.5 bg-red-600/50 rounded\"></div>\n                  <div className=\"w-full h-0.5 bg-blue-600/50 rounded\"></div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-center space-x-1 mb-2\">\n                <ArrowDown className=\"h-3 w-3 text-blue-500\" />\n                <span className=\"text-xs font-medium text-muted-foreground\">{day.temperature.min}°</span>\n              </div>\n              \n              <div className=\"text-xs text-muted-foreground capitalize truncate\" title={day.description}>\n                {day.description.length > 10 ? day.description.substring(0, 10) + '...' : day.description}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Enhanced Lifestyle Index */}\n      <div className=\"bg-white/5 dark:bg-black/5 rounded-lg p-4\">\n        <h4 className=\"text-lg font-semibold text-foreground mb-4 flex items-center\">\n          <Activity className=\"h-5 w-5 mr-2 text-primary\" />\n          Yaşam Endeksi - Hava Durumuna Göre Öneriler\n        </h4>\n        <div className=\"grid grid-cols-2 lg:grid-cols-6 gap-3\">\n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.exercise.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Egzersiz</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.exercise.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.exercise.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.clothing.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Giyim</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.clothing.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.clothing.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.travel.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Seyahat</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.travel.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.travel.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.driving.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Sürüş</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.driving.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.driving.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">{weather.lifeIndices.skin.emoji}</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Cilt Bakımı</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{weather.lifeIndices.skin.level}</div>\n            <div className=\"text-xs text-muted-foreground\">{weather.lifeIndices.skin.description.substring(0, 20)}...</div>\n          </div>\n          \n          <div className=\"bg-white/10 dark:bg-black/10 rounded-lg p-3 text-center hover:scale-105 transition-all\">\n            <div className=\"text-2xl mb-2\">💤</div>\n            <div className=\"text-xs text-muted-foreground mb-1\">Uyku</div>\n            <div className=\"text-sm font-bold text-foreground mb-1\">{sleepIndex.level}</div>\n            <div className=\"text-xs text-muted-foreground\">%{sleepIndex.score}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":34815},"client/src/components/flashcards-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ChevronLeft, ChevronRight, Brain, RefreshCw, Shuffle, CheckCircle, XCircle, AlertCircle, Plus, Trash2, Sparkles, GraduationCap, BarChart3, ExternalLink } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Link } from \"wouter\";\n\ninterface Flashcard {\n  id: string;\n  question: string;\n  answer: string;\n  examType: 'TYT' | 'AYT';\n  subject: string;\n  topic?: string | null;\n  difficulty: 'easy' | 'medium' | 'hard';\n  lastReviewed?: Date | null;\n  nextReview?: Date | null;\n  reviewCount: string;\n  createdAt: Date;\n}\n\nexport function FlashcardsWidget() {\n  const [currentCard, setCurrentCard] = useState<Flashcard | null>(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [isAnswered, setIsAnswered] = useState(false);\n  const [isCorrect, setIsCorrect] = useState<boolean | null>(null);\n  const [isStudyMode, setIsStudyMode] = useState(false);\n  const [isCreatingCard, setIsCreatingCard] = useState(false);\n  const [newCard, setNewCard] = useState({\n    question: '',\n    answer: '',\n    examType: 'TYT' as 'TYT' | 'AYT',\n    subject: '',\n    topic: '',\n    difficulty: 'medium' as 'easy' | 'medium' | 'hard'\n  });\n  const queryClient = useQueryClient();\n\n  const { data: dueCards = [], isLoading } = useQuery<Flashcard[]>({\n    queryKey: [\"/api/flashcards/due\"],\n  });\n\n  const reviewCardMutation = useMutation({\n    mutationFn: async ({ cardId, difficulty, isCorrect, userAnswer }: { cardId: string; difficulty: 'easy' | 'medium' | 'hard'; isCorrect: boolean; userAnswer: string }) => {\n      const response = await fetch(`/api/flashcards/${cardId}/review`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ difficulty, isCorrect, userAnswer }),\n      });\n      if (!response.ok) throw new Error('Failed to review card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setUserAnswer('');\n      setIsAnswered(false);\n      setIsCorrect(null);\n      setCurrentCard(null);\n    }\n  });\n\n  const createCardMutation = useMutation({\n    mutationFn: async (cardData: typeof newCard) => {\n      const response = await fetch('/api/flashcards', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(cardData)\n      });\n      if (!response.ok) throw new Error('Failed to create card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setNewCard({ question: '', answer: '', examType: 'TYT', subject: '', topic: '', difficulty: 'medium' });\n      setIsCreatingCard(false);\n    }\n  });\n\n  const deleteCardMutation = useMutation({\n    mutationFn: async (cardId: string) => {\n      const response = await fetch(`/api/flashcards/${cardId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete card');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/flashcards/due\"] });\n      setCurrentCard(null);\n      setIsStudyMode(false);\n    }\n  });\n\n  const handleCreateCard = () => {\n    if (newCard.question.trim() && newCard.answer.trim() && newCard.subject.trim() && newCard.topic.trim()) {\n      createCardMutation.mutate(newCard);\n    }\n  };\n\n  const handleAnswerSubmit = () => {\n    if (!currentCard || !userAnswer.trim()) return;\n    \n    const isAnswerCorrect = userAnswer.toLowerCase().trim() === currentCard.answer.toLowerCase().trim();\n    setIsCorrect(isAnswerCorrect);\n    setIsAnswered(true);\n  };\n\n  const handleNextCard = () => {\n    if (!currentCard || !isAnswered) return;\n    \n    // Yanlış cevaplanan kartlar için daha sık tekrar\n    const difficulty = isCorrect ? 'easy' : 'hard';\n    \n    reviewCardMutation.mutate({ \n      cardId: currentCard.id, \n      difficulty, \n      isCorrect: isCorrect || false, \n      userAnswer \n    });\n  };\n\n  const drawRandomCard = () => {\n    if (dueCards.length === 0) return;\n    \n    const availableCards = dueCards.filter(card => !currentCard || card.id !== currentCard.id);\n    if (availableCards.length === 0 && dueCards.length > 0) {\n      setCurrentCard(dueCards[0]);\n    } else if (availableCards.length > 0) {\n      const randomIndex = Math.floor(Math.random() * availableCards.length);\n      setCurrentCard(availableCards[randomIndex]);\n    }\n    \n    setUserAnswer('');\n    setIsAnswered(false);\n    setIsCorrect(null);\n    setIsStudyMode(true);\n  };\n\n  const getExamTypeColor = (examType: string) => {\n    return examType === 'TYT' \n      ? 'bg-blue-100 text-blue-800 dark:bg-blue-900/30 dark:text-blue-300'\n      : 'bg-purple-100 text-purple-800 dark:bg-purple-900/30 dark:text-purple-300';\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-950/30 border-green-200 dark:border-green-800';\n      case 'medium': return 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-950/30 border-yellow-200 dark:border-yellow-800';\n      case 'hard': return 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-950/30 border-red-200 dark:border-red-800';\n      default: return 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-950/30 border-gray-200 dark:border-gray-800';\n    }\n  };\n\n  const getSubjectEmoji = (subject: string) => {\n    const emojiMap: { [key: string]: string } = {\n      'matematik': '📐',\n      'turkce': '📚',\n      'fizik': '⚛️',\n      'kimya': '🧪',\n      'biyoloji': '🧬',\n      'tarih': '🏛️',\n      'cografya': '🌍',\n      'felsefe': '🤔',\n      'genel': '📖'\n    };\n    return emojiMap[subject] || '📖';\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg\">\n        <CardHeader className=\"pb-4\">\n          <h3 className=\"text-xl font-bold text-foreground flex items-center gap-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Brain className=\"h-6 w-6 text-primary animate-pulse\" />\n            </div>\n            <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n              Tekrar Kartları\n            </span>\n          </h3>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-4 bg-gradient-to-r from-muted via-muted/80 to-muted rounded-lg\"></div>\n            <div className=\"h-24 bg-gradient-to-br from-muted via-muted/60 to-muted/40 rounded-xl\"></div>\n            <div className=\"h-10 bg-gradient-to-r from-muted via-muted/70 to-muted rounded-lg\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (!isStudyMode || !currentCard) {\n    return (\n      <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-xl font-bold text-foreground flex items-center gap-3\">\n              <div className=\"p-2 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg\">\n                <Brain className=\"h-6 w-6 text-primary\" />\n              </div>\n              <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n                Tekrar Kartları\n              </span>\n            </h3>\n            <div className=\"flex items-center gap-3\">\n              <Badge variant=\"secondary\" className=\"bg-gradient-to-r from-muted/80 to-muted/60 text-foreground font-medium px-3 py-1 shadow-sm\">\n                <Sparkles className=\"h-3 w-3 mr-1\" />\n                {dueCards.length} kart hazır\n              </Badge>\n              <Dialog open={isCreatingCard} onOpenChange={setIsCreatingCard}>\n                <DialogTrigger asChild>\n                  <Button size=\"sm\" className=\"bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-sm\">\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Ekle\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle className=\"flex items-center gap-2\">\n                      <GraduationCap className=\"h-5 w-5 text-primary\" />\n                      Yeni Tekrar Kartı Oluştur\n                    </DialogTitle>\n                  </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Sınav Türü</label>\n                    <Select value={newCard.examType} onValueChange={(value: 'TYT' | 'AYT') => setNewCard({...newCard, examType: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"TYT\">TYT</SelectItem>\n                        <SelectItem value=\"AYT\">AYT</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Ders</label>\n                    <Select value={newCard.subject} onValueChange={(value) => setNewCard({...newCard, subject: value})}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Ders seçin\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"matematik\">Matematik</SelectItem>\n                        <SelectItem value=\"turkce\">Türkçe</SelectItem>\n                        <SelectItem value=\"fizik\">Fizik</SelectItem>\n                        <SelectItem value=\"kimya\">Kimya</SelectItem>\n                        <SelectItem value=\"biyoloji\">Biyoloji</SelectItem>\n                        <SelectItem value=\"tarih\">Tarih</SelectItem>\n                        <SelectItem value=\"cografya\">Coğrafya</SelectItem>\n                        <SelectItem value=\"felsefe\">Felsefe</SelectItem>\n                        <SelectItem value=\"genel\">Genel</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Konu</label>\n                    <Input\n                      value={newCard.topic}\n                      onChange={(e) => setNewCard({...newCard, topic: e.target.value})}\n                      placeholder=\"Konuyu yazın... (ör: Türev, Hareket)\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Soru</label>\n                    <Textarea\n                      value={newCard.question}\n                      onChange={(e) => setNewCard({...newCard, question: e.target.value})}\n                      placeholder=\"Soruyu yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Cevap</label>\n                    <Textarea\n                      value={newCard.answer}\n                      onChange={(e) => setNewCard({...newCard, answer: e.target.value})}\n                      placeholder=\"Cevabı yazın...\"\n                      rows={3}\n                    />\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium text-foreground\">Zorluk</label>\n                    <Select value={newCard.difficulty} onValueChange={(value: 'easy' | 'medium' | 'hard') => setNewCard({...newCard, difficulty: value})}>\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"easy\">Kolay</SelectItem>\n                        <SelectItem value=\"medium\">Orta</SelectItem>\n                        <SelectItem value=\"hard\">Zor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex justify-end gap-2\">\n                    <Button variant=\"outline\" onClick={() => setIsCreatingCard(false)}>\n                      İptal\n                    </Button>\n                    <Button \n                      onClick={handleCreateCard} \n                      disabled={!newCard.question.trim() || !newCard.answer.trim() || !newCard.subject || !newCard.topic.trim() || createCardMutation.isPending}\n                    >\n                      {createCardMutation.isPending ? 'Oluşturuyor...' : 'Oluştur'}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </div>\n\n        </CardHeader>\n        <CardContent>\n          {dueCards.length === 0 ? (\n            <div className=\"text-center py-8 text-muted-foreground\">\n              <div className=\"p-4 bg-muted/30 rounded-full w-fit mx-auto mb-4\">\n                <Brain className=\"h-10 w-10 opacity-50\" />\n              </div>\n              <p className=\"text-base font-medium mb-2\">Çalışılacak kart yok</p>\n              <p className=\"text-sm\">Tüm kartlar gözden geçirilmiş! 🎉</p>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-muted-foreground mb-4\">\n                  {dueCards.length} kart çalışmaya hazır\n                </p>\n                <Button\n                  onClick={drawRandomCard}\n                  size=\"lg\"\n                  className=\"bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 shadow-lg hover:shadow-xl transition-all duration-300 px-8 py-3\"\n                  data-testid=\"draw-card-button\"\n                >\n                  <Shuffle className=\"h-5 w-5 mr-2\" />\n                  Kart Çek\n                </Button>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-3\">\n                <div className=\"text-center p-4 bg-gradient-to-br from-green-50 to-green-100/50 dark:from-green-900/30 dark:to-green-800/20 border border-green-200 dark:border-green-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-green-800 dark:text-green-300 text-sm mb-1\">Kolay</div>\n                  <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                    {dueCards.filter(c => c.difficulty === 'easy').length}\n                  </div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-yellow-50 to-yellow-100/50 dark:from-yellow-900/30 dark:to-yellow-800/20 border border-yellow-200 dark:border-yellow-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-yellow-800 dark:text-yellow-300 text-sm mb-1\">Orta</div>\n                  <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\n                    {dueCards.filter(c => c.difficulty === 'medium').length}\n                  </div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-red-50 to-red-100/50 dark:from-red-900/30 dark:to-red-800/20 border border-red-200 dark:border-red-800 rounded-xl shadow-sm\">\n                  <div className=\"font-semibold text-red-800 dark:text-red-300 text-sm mb-1\">Zor</div>\n                  <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\n                    {dueCards.filter(c => c.difficulty === 'hard').length}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-gradient-to-br from-card via-card to-card/95 border border-border/50 shadow-lg\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-gradient-to-br from-primary/20 to-primary/10 rounded-lg\">\n              <Brain className=\"h-6 w-6 text-primary\" />\n            </div>\n            <h3 className=\"text-xl font-bold text-foreground\">\n              <span className=\"bg-gradient-to-r from-primary to-primary/70 bg-clip-text text-transparent\">\n                Tekrar Kartları\n              </span>\n            </h3>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"destructive\"\n              size=\"sm\"\n              onClick={() => deleteCardMutation.mutate(currentCard!.id)}\n              disabled={deleteCardMutation.isPending}\n              className=\"bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700\"\n              title=\"Kartı sil\"\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsStudyMode(false)}\n              className=\"border-muted-foreground/20 hover:bg-muted/50\"\n              title=\"Kart seçimine dön\"\n            >\n              <ChevronLeft className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\" data-testid=\"flashcard-study-mode\">\n        {/* Kart Bilgisi */}\n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"bg-primary/10 text-primary px-2 py-1 rounded text-xs font-medium\">{currentCard.examType}</span>\n            <span className=\"text-lg\">{getSubjectEmoji(currentCard.subject)}</span>\n            <span className=\"font-medium capitalize\">{currentCard.subject}</span>\n            {currentCard.topic && <span className=\"text-muted-foreground\">• {currentCard.topic}</span>}\n          </div>\n          <div className={`px-2 py-1 rounded-lg border text-xs font-medium ${getDifficultyColor(currentCard.difficulty)}`}>\n            {currentCard.difficulty === 'easy' ? 'Kolay' : currentCard.difficulty === 'medium' ? 'Orta' : 'Zor'}\n          </div>\n        </div>\n\n        {/* Soru Kartı */}\n        <div className=\"bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20 rounded-xl p-6 min-h-[120px]\">\n          <div className=\"text-xs text-primary font-medium mb-2\">SORU</div>\n          <p className=\"text-foreground font-medium text-base leading-relaxed\" data-testid=\"flashcard-question\">\n            {currentCard.question}\n          </p>\n        </div>\n\n        {/* Cevap Girişi Bölümü */}\n        {!isAnswered ? (\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">Cevabınızı Yazın:</label>\n              <Input\n                value={userAnswer}\n                onChange={(e) => setUserAnswer(e.target.value)}\n                placeholder=\"Cevabı buraya yazın...\"\n                onKeyPress={(e) => e.key === 'Enter' && handleAnswerSubmit()}\n                className=\"text-base\"\n                data-testid=\"answer-input\"\n              />\n            </div>\n            <Button\n              onClick={handleAnswerSubmit}\n              disabled={!userAnswer.trim()}\n              className=\"w-full\"\n              data-testid=\"check-answer-button\"\n            >\n              Kontrol Et\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Kullanıcı Cevabı Geri Bildirimi */}\n            <div className={`p-4 rounded-lg border ${\n              isCorrect \n                ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800' \n                : 'bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800'\n            }`}>\n              <div className=\"flex items-center gap-2 mb-2\">\n                {isCorrect ? (\n                  <CheckCircle className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                ) : (\n                  <XCircle className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                )}\n                <span className={`font-medium ${\n                  isCorrect \n                    ? 'text-green-800 dark:text-green-300' \n                    : 'text-red-800 dark:text-red-300'\n                }`}>\n                  {isCorrect ? 'Doğru!' : 'Yanlış!'}\n                </span>\n              </div>\n              <div className=\"text-sm\">\n                <p className=\"text-muted-foreground\">Sizin cevabınız: <span className=\"font-medium\">{userAnswer}</span></p>\n                <p className=\"text-muted-foreground\">Doğru cevap: <span className=\"font-medium text-foreground\">{currentCard.answer}</span></p>\n                {!isCorrect && (\n                  <div className=\"mt-3 p-3 bg-amber-50 dark:bg-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg\">\n                    <div className=\"flex items-center gap-2 text-amber-800 dark:text-amber-300\">\n                      <AlertCircle className=\"h-4 w-4\" />\n                      <span className=\"font-medium text-sm\">Hata Analizi Önerisi</span>\n                    </div>\n                    <p className=\"text-amber-700 dark:text-amber-400 text-sm mt-1\">\n                      Yanlış cevap verdiğin konuları analiz etmek için\n                    </p>\n                    <Link href=\"/dashboard\" className=\"inline-flex items-center gap-2 mt-2 text-amber-800 dark:text-amber-300 hover:text-amber-900 dark:hover:text-amber-200 font-medium text-sm transition-colors\">\n                      <BarChart3 className=\"h-4 w-4\" />\n                      Raporlarım kısmında Hata Analiz Kısmını kontrol et !\n                      <ExternalLink className=\"h-3 w-3\" />\n                    </Link>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Sonraki Buton */}\n            <Button\n              onClick={handleNextCard}\n              disabled={reviewCardMutation.isPending}\n              className=\"w-full\"\n              data-testid=\"next-card-button\"\n            >\n              {reviewCardMutation.isPending ? 'Yükleniyor...' : 'Sonraki Kart'}\n            </Button>\n          </div>\n        )}\n\n        {/* Kart İlerlemesi */}\n        <div className=\"text-xs text-muted-foreground text-center pt-2 border-t border-border\">\n          İnceleme: {parseInt(currentCard.reviewCount) + 1} • \n          Kalan: {dueCards.length - 1} kart\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":23805},"client/src/components/header.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { Sun, Moon, Clock, Home, CheckSquare, BarChart3, Calculator, Timer } from \"lucide-react\";\nimport { useTheme } from \"./theme-provider\";\nimport { useState, useEffect } from \"react\";\nimport { EmojiPicker } from \"./emoji-picker\";\nimport { MotivationalQuote } from \"./motivational-quote\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface HeaderProps {\n  hideClockOnHomepage?: boolean;\n  onReportCounterClick?: () => void;\n}\n\nexport function Header({ hideClockOnHomepage = false, onReportCounterClick }: HeaderProps) {\n  const { theme, toggleTheme } = useTheme();\n  const [location] = useLocation();\n  const [showTooltip, setShowTooltip] = useState(false);\n  const [emojiPickerOpen, setEmojiPickerOpen] = useState(false);\n  const [selectedEmoji, setSelectedEmoji] = useState('😊');\n  const [note, setNote] = useState('');\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  // Yerel depolamadan yükle\n  useEffect(() => {\n    const savedEmoji = localStorage.getItem('userEmoji');\n    const savedNote = localStorage.getItem('userNote');\n    if (savedEmoji) setSelectedEmoji(savedEmoji);\n    if (savedNote) setNote(savedNote);\n  }, []);\n  \n  // Yerel depolamaya kaydet\n  useEffect(() => {\n    localStorage.setItem('userEmoji', selectedEmoji);\n  }, [selectedEmoji]);\n  \n  useEffect(() => {\n    localStorage.setItem('userNote', note);\n  }, [note]);\n\n  // Her saniye güncelleme zamanı\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Sakarya Serdivan (Türkiye saat dilimi) için tarih ve saati biçimlendir\n  const formatDateTime = () => {\n    const options: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      weekday: 'long',\n      day: 'numeric', \n      month: 'long',\n      year: 'numeric'\n    };\n    \n    const timeOptions: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n\n    const dateStr = currentTime.toLocaleDateString('tr-TR', options);\n    const timeStr = currentTime.toLocaleTimeString('tr-TR', timeOptions);\n    \n    return { dateStr, timeStr };\n  };\n\n  const isHomepage = location === '/';\n  const isDashboard = location === '/dashboard';\n  const shouldShowClock = !isHomepage || !hideClockOnHomepage;\n\n  // Aylık rapor geri sayım hesaplaması\n  const getMonthlyReportCountdown = () => {\n    const now = new Date();\n    const currentYear = now.getFullYear();\n    const currentMonth = now.getMonth();\n    const lastDayOfMonth = new Date(currentYear, currentMonth + 1, 0).getDate();\n    const currentDay = now.getDate();\n    const daysRemaining = lastDayOfMonth - currentDay;\n    const isLastDay = currentDay === lastDayOfMonth;\n    \n    return { daysRemaining, isLastDay };\n  };\n\n  const { daysRemaining, isLastDay } = getMonthlyReportCountdown();\n\n  return (\n    <header className=\"bg-card border-b border-border shadow-sm transition-colors duration-300\">\n      {/* Saat/Tarih/konum Bölümü - Ana sayfada gizli */}\n      {shouldShowClock && (\n        <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n          <div className=\"flex justify-between items-center py-2\">\n            {/* Kompakt Saat ve Tarih Gösterimi - Tamamen Solda Hizalanmış */}\n            <div className=\"flex items-start space-x-3 pl-3\">\n                {/* Saat Simgesi - Daha Büyük */}\n                <div className=\"relative\">\n                  <div className=\"relative w-8 h-8 bg-black/10 dark:bg-purple-950/20 backdrop-blur-xl border border-purple-500/20 dark:border-purple-400/20 rounded-lg flex items-center justify-center shadow-md\">\n                    <Clock className=\"h-4 w-4 text-purple-600 dark:text-purple-400 drop-shadow-lg\" />\n                  </div>\n                </div>\n                \n                {/* Saat ve Tarih Düzeni - Dikey, daha büyük ekran */}\n                <div className=\"flex flex-col space-y-1\">\n                  {/* Saat Simgesi - Daha Büyük */}\n                  <div className=\"text-base font-bold bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent font-mono\" data-testid=\"text-time-header\">\n                    {formatDateTime().timeStr}\n                  </div>\n                  \n                  {/* DTarih ve Yer - Yatay düzen, daha büyük metin */}\n                  <div className=\"flex items-center space-x-2 text-sm\">\n                    <span className=\"bg-gradient-to-r from-purple-800 to-black dark:from-purple-300 dark:to-gray-200 bg-clip-text text-transparent font-medium\" data-testid=\"text-date-header\">\n                      {formatDateTime().dateStr}\n                    </span>\n                    <span className=\"text-muted-foreground/50\">•</span>\n                    <div className=\"flex items-center space-x-1 text-muted-foreground\">\n                      <span className=\"text-sm\">📍</span>\n                      <span className=\"font-medium bg-gradient-to-r from-purple-600 to-violet-700 dark:from-purple-400 dark:to-violet-500 bg-clip-text text-transparent\">\n                        Sakarya, Serdivan\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Sağ Taraf - Motivasyon, Tema, Hoş Geldiniz */}\n              <div className=\"flex items-center space-x-6 flex-1 justify-center\">\n                {/* Motivasyon Alıntısı - ortaladım */}\n                <div className=\"max-w-md flex-1 text-center\">\n                  <MotivationalQuote />\n                </div>\n              </div>\n              \n              {/* Üst Sağ - Tema ve Profil - Tamamen sağa eğilimli */}\n              <div className=\"flex items-center space-x-2 pr-0\">\n                {/* Tema Değiştirme */}\n                <button \n                  onClick={toggleTheme}\n                  className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors duration-200\"\n                  title=\"Tema Değiştir\"\n                  data-testid=\"button-theme-toggle\"\n                >\n                  {theme === \"light\" ? (\n                    <Sun className=\"h-4 w-4 text-secondary-foreground\" />\n                  ) : (\n                    <Moon className=\"h-4 w-4 text-secondary-foreground\" />\n                  )}\n                </button>\n\n                {/* Profil Bölümü */}\n                <div className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm text-muted-foreground hidden sm:block\">Hoşgeldiniz</span>\n                  <span className=\"font-medium text-foreground hidden sm:block\">Berat Çakıroğlu</span>\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setEmojiPickerOpen(true)}\n                      onMouseEnter={() => setShowTooltip(true)}\n                      onMouseLeave={() => setShowTooltip(false)}\n                      className=\"relative w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold hover:bg-primary/90 transition-all duration-200 hover:scale-105\"\n                      data-testid=\"button-emoji-picker\"\n                    >\n                      {/* Profil Fotoğrafı - Her Zaman 'B' Gösterir */}\n                      <span className=\"text-lg font-bold\">B</span>\n                      \n                      {/* Emoji Balonu - Sağ Üst (Her Zaman emoji seçildiğinde gösterilir) */}\n                      {selectedEmoji && (\n                        <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-white dark:bg-gray-800 rounded-full border-2 border-primary flex items-center justify-center shadow-lg\">\n                          <span className=\"text-xs\">{selectedEmoji}</span>\n                        </div>\n                      )}\n                      \n                      {/* Not Balonu - Alt Sağ */}\n                      {note.trim() && (\n                        <div className=\"absolute -bottom-1 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-4 h-4 flex items-center justify-center shadow-lg\">\n                          <span className=\"text-xs font-bold\">!</span>\n                        </div>\n                      )}\n                      \n                      {/* Araç ipucu - Artık aşağıda gösterilcek */}\n                      {showTooltip && (\n                        <div className=\"absolute top-full left-1/2 mt-2 px-2 py-1 bg-card text-card-foreground text-xs rounded shadow-lg border border-border transform -translate-x-1/2 whitespace-nowrap animate-in fade-in-0 zoom-in-95 z-50\">\n                          Emoji seç & Not bırak\n                          {note.trim() && (\n                            <div className=\"mt-1 text-xs italic text-muted-foreground max-w-40 truncate\">\n                              \"{note.trim()}\"\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n        </div>\n      )}\n      \n      {/* Ana Sayfa için Motivasyon Alıntısı - Saat gizlendiğinde */}\n      {!shouldShowClock && (\n        <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 border-b border-border/50\">\n          <div className=\"max-w-7xl mx-auto pl-4 sm:pl-6 lg:pl-8 pr-0 py-3\">\n            <div className=\"flex justify-between items-center\">\n              {/* Boş sol alan */}\n              <div></div>\n              \n              {/* Ortalanmış Motivasyon Alıntısı */}\n              <div className=\"flex-1 text-center\">\n                <MotivationalQuote />\n              </div>\n              \n              {/* Sağ Taraf - Tema, Hoş Geldiniz - TAMAMEN sağa yapıştır */}\n              <div className=\"flex items-center space-x-1 pr-0\">\n                {/* Tema Değiştir */}\n                <button \n                  onClick={toggleTheme}\n                  className=\"p-2 rounded-lg bg-secondary hover:bg-accent transition-colors duration-200\"\n                  title=\"Tema Değiştir\"\n                  data-testid=\"button-theme-toggle\"\n                >\n                  {theme === \"light\" ? (\n                    <Sun className=\"h-4 w-4 text-secondary-foreground\" />\n                  ) : (\n                    <Moon className=\"h-4 w-4 text-secondary-foreground\" />\n                  )}\n                </button>\n\n                {/* Profil Bölümü */}\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-sm text-muted-foreground hidden sm:block\">Hoşgeldiniz</span>\n                  <span className=\"font-medium text-foreground hidden sm:block\">Berat Çakıroğlu</span>\n                  <div className=\"relative\">\n                    <button\n                      onClick={() => setEmojiPickerOpen(true)}\n                      onMouseEnter={() => setShowTooltip(true)}\n                      onMouseLeave={() => setShowTooltip(false)}\n                      className=\"relative w-10 h-10 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-semibold hover:bg-primary/90 transition-all duration-200 hover:scale-105\"\n                      data-testid=\"button-emoji-picker\"\n                    >\n                      {/* Profil Fotoğrafı - Her Zaman 'B' Gösterir */}\n                      <span className=\"text-lg font-bold\">B</span>\n\n                      {/* Emoji Balonu - Sağ Üst (Her Zaman emoji seçildiğinde gösterilir) */}\n                      {selectedEmoji && (\n                        <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-white dark:bg-gray-800 rounded-full border-2 border-primary flex items-center justify-center shadow-lg\">\n                          <span className=\"text-xs\">{selectedEmoji}</span>\n                        </div>\n                      )}\n                      \n                      {/* Not Balonu - Sağ Alt */}\n                      {note.trim() && (\n                        <div className=\"absolute -bottom-1 -right-2 bg-yellow-400 text-yellow-900 rounded-full w-4 h-4 flex items-center justify-center shadow-lg\">\n                          <span className=\"text-xs font-bold\">!</span>\n                        </div>\n                      )}\n                      \n                      {/* Araç ipucu - Artık aşağıda gösterilcek */}\n                      {showTooltip && (\n                        <div className=\"absolute top-full left-1/2 mt-2 px-2 py-1 bg-card text-card-foreground text-xs rounded shadow-lg border border-border transform -translate-x-1/2 whitespace-nowrap animate-in fade-in-0 zoom-in-95 z-50\">\n                          Emoji seç & Not bırak\n                          {note.trim() && (\n                            <div className=\"mt-1 text-xs italic text-muted-foreground max-w-40 truncate\">\n                              \"{note.trim()}\"\n                            </div>\n                          )}\n                        </div>\n                      )}\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Navigasyon Bölümü */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-center items-center h-16\">\n          <div className=\"flex items-center space-x-6\">\n            <Link href=\"/\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-homepage\"\n              >\n                <Home className=\"w-5 h-5\" />\n                <span>Anasayfa</span>\n              </button>\n            </Link>\n            <Link href=\"/tasks\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/tasks' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-todos\"\n              >\n                <CheckSquare className=\"w-5 h-5\" />\n                <span>Yapılacaklar</span>\n              </button>\n            </Link>\n            <Link href=\"/dashboard\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/dashboard' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-dashboard\"\n              >\n                <BarChart3 className=\"w-5 h-5\" />\n                <span>Raporlarım</span>\n              </button>\n            </Link>\n            <Link href=\"/net-calculator\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/net-calculator' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n              >\n                <Calculator className=\"w-5 h-5\" />\n                <span>Net Hesapla</span>\n              </button>\n            </Link>\n            <Link href=\"/timer\">\n              <button \n                className={`px-6 py-3 rounded-xl font-semibold text-lg transition-all duration-200 flex items-center space-x-2 ${\n                  location === '/timer' \n                    ? 'bg-primary text-primary-foreground shadow-lg' \n                    : 'bg-secondary text-secondary-foreground hover:bg-accent hover:scale-105'\n                }`}\n                data-testid=\"link-timer\"\n              >\n                <Timer className=\"w-5 h-5\" />\n                <span>Sayaç</span>\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n      \n      {/* eöoji seçme modalı */}\n      <EmojiPicker \n        open={emojiPickerOpen} \n        onOpenChange={setEmojiPickerOpen}\n        selectedEmoji={selectedEmoji}\n        onEmojiSelect={setSelectedEmoji}\n        note={note}\n        onNoteChange={setNote}\n      />\n    </header>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":17254},"client/src/components/latest-notes-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { StickyNote, Calendar, Plus } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\ninterface Mood {\n  id: string;\n  mood: string;\n  moodBg?: string | null;\n  note?: string | null;\n  createdAt: string;\n}\n\nexport function LatestNotesWidget() {\n  const [isAddingNote, setIsAddingNote] = useState(false);\n  const [noteText, setNoteText] = useState('');\n  const queryClient = useQueryClient();\n  \n  const { data: moods = [], isLoading } = useQuery<Mood[]>({\n    queryKey: [\"/api/moods\"],\n  });\n  \n  const addNoteMutation = useMutation({\n    mutationFn: async (noteContent: string) => {\n      const response = await fetch('/api/moods', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          mood: '📝',\n          note: noteContent,\n          date: new Date().toISOString().split('T')[0]\n        })\n      });\n      if (!response.ok) throw new Error('Failed to add note');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      setNoteText('');\n      setIsAddingNote(false);\n    }\n  });\n  \n  const handleAddNote = () => {\n    if (noteText.trim()) {\n      addNoteMutation.mutate(noteText.trim());\n    }\n  };\n\n  //  Notları olan ruh hallerini filtreleyin ve en son 3 tanesini alın\n  const latestNotes = moods\n    .filter(mood => mood.note && mood.note.trim().length > 0)\n    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n    .slice(0, 3);\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Şimdi';\n    if (diffInMinutes < 60) return `${diffInMinutes}dk önce`;\n    \n    const diffInHours = Math.floor(diffInMinutes / 60);\n    if (diffInHours < 24) return `${diffInHours}s önce`;\n    \n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays < 7) return `${diffInDays} gün önce`;\n    \n    return date.toLocaleDateString('tr-TR', { \n      day: 'numeric', \n      month: 'short' \n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"space-y-3\">\n          {[1, 2, 3].map(i => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-4 bg-muted rounded mb-2\"></div>\n              <div className=\"h-3 bg-muted rounded w-3/4\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-4 transition-colors duration-300\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <StickyNote className=\"h-5 w-5 mr-2 text-primary\" />\n          Son Eklenen Notlar\n        </h3>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\">\n            {latestNotes.length}/3\n          </div>\n          <Dialog open={isAddingNote} onOpenChange={setIsAddingNote}>\n            <DialogTrigger asChild>\n              <Button size=\"sm\" variant=\"outline\" className=\"h-8 w-8 p-0\">\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Yeni Not Ekle</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <Input\n                  value={noteText}\n                  onChange={(e) => setNoteText(e.target.value)}\n                  placeholder=\"Notunuzu yazın...\"\n                  maxLength={200}\n                />\n                <div className=\"text-xs text-muted-foreground text-right\">\n                  {noteText.length}/200 karakter\n                </div>\n                <div className=\"flex justify-end gap-2\">\n                  <Button variant=\"outline\" onClick={() => setIsAddingNote(false)}>\n                    İptal\n                  </Button>\n                  <Button \n                    onClick={handleAddNote} \n                    disabled={!noteText.trim() || addNoteMutation.isPending}\n                  >\n                    {addNoteMutation.isPending ? 'Ekleniyor...' : 'Ekle'}\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {latestNotes.length === 0 ? (\n        <div className=\"text-center py-6 text-muted-foreground\">\n          <StickyNote className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Henüz not eklenmemiş</p>\n          <p className=\"text-xs mt-1\">Profil modalu üzerinden not ekleyebilirsiniz</p>\n        </div>\n      ) : (\n        <div className=\"space-y-3\" data-testid=\"latest-notes-container\">\n          {latestNotes.map((mood, index) => (\n            <div\n              key={mood.id}\n              className=\"bg-background/50 rounded-lg p-3 border border-border/30 hover:bg-muted/30 transition-all duration-200\"\n              data-testid={`note-card-${index}`}\n            >\n              <div className=\"flex items-start gap-3\">\n                {/* Mood emojileri */}\n                <div \n                  className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center text-lg\"\n                  style={{\n                    backgroundColor: mood.moodBg || '#f3f4f6'\n                  }}\n                >\n                  {mood.mood}\n                </div>\n\n                {/* Not içeriği */}\n                <div className=\"flex-1 min-w-0\">\n                  <p \n                    className=\"text-sm text-foreground leading-relaxed\"\n                    data-testid={`note-text-${index}`}\n                  >\n                    {mood.note && mood.note.length > 120 \n                      ? `${mood.note.substring(0, 120)}...` \n                      : mood.note}\n                  </p>\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <Calendar className=\"h-3 w-3 text-muted-foreground\" />\n                    <span \n                      className=\"text-xs text-muted-foreground\"\n                      data-testid={`note-date-${index}`}\n                    >\n                      {formatDate(mood.createdAt)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Alt Bilgi - Daha Fazla Not Ekle */}\n      {latestNotes.length > 0 && (\n        <div className=\"mt-4 pt-3 border-t border-border text-center\">\n          <p className=\"text-xs text-muted-foreground\">\n            Profil modali üzerinden yeni notlar ekleyebilirsiniz\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":7779},"client/src/components/motivational-quote.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useMemo, useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\n\nconst YKS_QUOTES = [\n  {\n    quote: \"Başarı, küçük çabaların tekrar edilmesi, gün be gün, saat be saat yapılan şeylerdir.\",\n    author: \"Robert Collier\"\n  },\n  {\n    quote: \"Eğitim geleceğin anahtarıdır. Yarın, bugün hazırlanan insanlarındır.\",\n    author: \"Malcolm X\"\n  },\n  {\n    quote: \"Zeka sabit değildir. Her gün biraz daha öğrenebilir ve gelişebiliriz.\",\n    author: \"Carol Dweck\"\n  },\n  {\n    quote: \"Başarı, hazırlanma fırsatı ile karşılaştığında ortaya çıkar.\",\n    author: \"Bobby Unser\"\n  },\n  {\n    quote: \"Hedefin yeterince büyükse, nasıllar önemli değildir.\",\n    author: \"Jim Rohn\"\n  },\n  {\n    quote: \"Öğrenme asla zihnin kapasitesini tüketmez.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Mükemmellik bir alışkanlıktır, tek seferlik bir davranış değil.\",\n    author: \"Aristo\"\n  },\n  {\n    quote: \"Bilgi güçtür. Bilgi özgürlüktür.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Çalışkan olmak yetenekten daha önemlidir.\",\n    author: \"Tim Notke\"\n  },\n  {\n    quote: \"Her uzman bir zamanlar yeni başlayandı.\",\n    author: \"Robin Sharma\"\n  },\n  {\n    quote: \"Başarısızlık, yeniden başlamanın daha akıllı bir yoludur.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Disiplin özgürlük ile ağrı arasında köprüdür.\",\n    author: \"Jim Rohn\"\n  },\n  {\n    quote: \"Eğitim hayatın hazırlığı değil, hayatın ta kendisidir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Yarın yapmayı planladığınız şeyi bugün, bugün yapmayı planladığınız şeyi şimdi yapın.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Başarı son nokta değil, başarısızlık ölümcül değil: önemli olan devam etme cesareti.\",\n    author: \"Winston Churchill\"\n  },\n  {\n    quote: \"Büyük hayaller kurmaktan korkmayın, çünkü büyük hayaller büyük insanlar yaratır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"İlim ilim bilmektir, ilim kendin bilmektir, sen kendini bilmezsen, bu nice okumaktır?\",\n    author: \"Yunus Emre\"\n  },\n  {\n    quote: \"Çalışmayan doymaz, çalışkan beklemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Sabır acıdır ama meyvesi tatlıdır.\",\n    author: \"Hz. Ali\"\n  },\n  {\n    quote: \"İmkansız, sadece büyük düşünmeyenlerin sözlüğünde vardır.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Hayatta en hakiki mürşit ilimdir, fendir.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Ne kadar çok okursan, o kadar çok şey bilirsin. Ne kadar çok öğrenirsen, o kadar çok yere gidersin.\",\n    author: \"Dr. Seuss\"\n  },\n  {\n    quote: \"Eğitim, karanlıktan aydınlığa giden en kısa yoldur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarının %90'ı ortaya çıkmakla ilgilidir.\",\n    author: \"Woody Allen\"\n  },\n  {\n    quote: \"Gelecek bugünden hazırlanır.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Zor günler güçlü insanlar yaratır.\",\n    author: \"G. Michael Hopf\"\n  },\n  {\n    quote: \"Sen yapabilirsin! İnan ve başar!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyileş, her gün biraz daha öğren.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Azim ve kararlılık her engeli aşar.\",\n    author: \"Leonardo da Vinci\"\n  },\n  {\n    quote: \"Başarı, başarısızlığa rağmen devam etme yetisidir.\",\n    author: \"Charles Kettering\"\n  },\n  {\n    quote: \"İyi bir öğrenci olmak için sadece dinlemek yetmez, anlamak gerekir.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Okumak ruha ne ise, egzersiz de vücuda odur.\",\n    author: \"Joseph Addison\"\n  },\n  {\n    quote: \"Zihin, kitap gibidir. Açılmazsa okunamaz.\",\n    author: \"Çin Atasözü\"\n  },\n  {\n    quote: \"Öğrenmek cesaret ister. Cesaretli ol!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefiniz yeterince büyükse, yöntemler kendiliğinden bulunur.\",\n    author: \"Zig Ziglar\"\n  },\n  {\n    quote: \"İtaat eden değil, hürriyetini bilen nesilleri yetiştirin.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Okumak, konuşmak, yazmak - bunlar öğrenmenin üç temel taşıdır.\",\n    author: \"Türk Eğitim Sistemi\"\n  },\n  {\n    quote: \"Çok çalış, sabırlı ol, başaracaksın!\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her başarı hikayesi, bir hayalle başlar.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Zorluklar seni güçlendirir, kolaylıklar seni zayıflatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının başarısıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Pes etmek, başarısızlığa giden en kısa yoldur.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Öğrenmek bir yolculuktur, varış noktası değil.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı sabır ister, sabır da kararlılık.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Her problem, içinde çözümünü barındırır.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"İnanç dağları yerinden oynatır.\",\n    author: \"İncil\"\n  },\n  {\n    quote: \"Çalışmayan el, bereketli olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Yarın diye bir şey yoktur, bugün var olan tek gerçektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, hazırlık ile fırsatın buluşmasıdır.\",\n    author: \"Seneca\"\n  },\n  {\n    quote: \"Okumak hayatı değiştirir, bilgi güç verir.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Çalışkan eli bereketli kılar Tanrı.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İlerlemek için geriye bakmayı bırak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugünkü çabanız, gelecekteki gururunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zeka önemlidir ama azim daha önemlidir.\",\n    author: \"Angela Duckworth\"\n  },\n  {\n    quote: \"Her yeni gün, yeni bir şans demektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Kendine inan, dünya da sana inanacak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı merdiveni, eliniz cebinizde çıkılmaz.\",\n    author: \"Henry Ford\"\n  },\n  {\n    quote: \"Çaba göstermeyen kimse, zafer tadını bilemez.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Büyük hedefler, büyük cesaretler gerektirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek ömür boyu sürecek bir serüvendir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklarla mücadele etmek, seni güçlendirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her düşen tekrar kalkar, her kaybeden tekrar kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İradeniz kadarlık hedefleriniz olsun.\",\n    author: \"Mustafa Kemal Atatürk\"\n  },\n  {\n    quote: \"Bilgili insan güçlüdür, güçlü insan özgürdür.\",\n    author: \"Bacon\"\n  },\n  {\n    quote: \"Çalışkan insan kaderini değiştirebilir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Sabır, en zor zamanların anahtarıdır.\",\n    author: \"Hz. Ali\"\n  },\n  {\n    quote: \"Hedefe giden yolda her adım önemlidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı, başarısızlıktan korkmamaktır.\",\n    author: \"Michael Jordan\"\n  },\n  {\n    quote: \"Öğrenmek isteyenin önünde engel yoktur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çaba eden, hedefine ulaşır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Yarının liderleri, bugünün öğrencileridir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azimli olmayan hiçbir şey başaramaz.\",\n    author: \"Samuel Johnson\"\n  },\n  {\n    quote: \"Her yeni bilgi, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak ibadettir, öğrenmek zevktir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İmkansız diye bir şey yoktur, sadece yetersiz çaba vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her engel, seni daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefinize odaklanın, yolunuzda ilerleyin.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bugünkü fedakarlığınız, yarınki mutluluğunuzdur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışan el dolu olur, tembel el boş kalır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Her başarılı insanın arkasında, büyük bir çaba vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Eğitim almış bir zihin, asla işsiz kalmaz.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Vazgeçmeyin, çünkü büyük şeyler zaman alır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"İrade dağları yerinden oynatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı planla gelir, şansla değil.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Çalışkan olmak, şanslı olmaktan daha önemlidir.\",\n    author: \"Gary Player\"\n  },\n  {\n    quote: \"Bugün atılan her adım, geleceğin temelini atar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek isteyenin yaşı yoktur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Cesaret eksikliği, başarının en büyük düşmanıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her soru, sizi cevaba biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Şimdi sarf ettiğiniz emek, gelecekteki refahınızdır.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Kitap okuyan hiçbir zaman yalnız değildir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı merdiveni, adım adım çıkılır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklar sizi büyütür, kolaylıklar sizi küçültür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefleriniz kadar büyük yaşayın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden asla pişman olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının gururudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgili insan hiçbir zaman durağandır.\",\n    author: \"Einstein\"\n  },\n  {\n    quote: \"Öğrenmek yaşamın ta kendisidir.\",\n    author: \"Dewey\"\n  },\n  {\n    quote: \"Azim, her kapıyı açar.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, gayret etmenin ödülüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyi olmaya odaklanın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak hem ibadettir hem de keyiftir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarının anahtarı, doğru zamanda doğru çabadır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek için geç kalmış diye bir şey yoktur.\",\n    author: \"Nelson Mandela\"\n  },\n  {\n    quote: \"Her soru, bir cevaba giden yoldur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba göstermeyen, başarıyı tadamaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"İlim öğrenmeye devam etmektir.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Bugünün çabası, yarının başarısıdır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefe giderken her adım değerlidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan el bereketli olur.\",\n    author: \"İncil\"\n  },\n  {\n    quote: \"Başarı yolunda vazgeçmek yasaktır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her zorluk, bir fırsatın habercisidir.\",\n    author: \"Çin Atasözü\"\n  },\n  {\n    quote: \"Öğrenmek özgürlüktür, bilgi güçtür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden, hedefe ulaşır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünün yorgunluğu, yarının enerjisidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her sayfa çevirdiğinizde, geleceğinizi yazıyorsunuz.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sebat eden, galip gelir.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı için çalışmaktan başka yol yoktur.\",\n    author: \"Thomas Edison\"\n  },\n  {\n    quote: \"Azim ile başarılmayacak hiçbir şey yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek, hayatın en büyük zevkidir.\",\n    author: \"Aristoteles\"\n  },\n  {\n    quote: \"Her gün yeni bir sayfa, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan ol, başarılı ol, mutlu ol.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi birikimi, geleceğin anahtarıdır.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Hedefiniz net olsun, çabanız sürekli olsun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Zorluklar büyütür, kolaylıklar küçültür.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, işe odaklanmakla gelir.\",\n    author: \"Bill Gates\"\n  },\n  {\n    quote: \"Çaba sarf etmeyen, zafer tadını bilmez.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her adım sizi hedefinize biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Okumak yaşamı değiştirir, öğrenmek hayatı güzelleştirir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı yolunda her günün kendine has değeri vardır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azimli olan, asla yenilmez.\",\n    author: \"Napoléon Bonaparte\"\n  },\n  {\n    quote: \"Çalışmanın karşılığı mutlaka alınır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugün ekilen tohum, yarın hasat edilir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmekten korkmayın, bilmemekten korkun.\",\n    author: \"Confucius\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe bir adım daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Başarı sabır ister, sabır da azim.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çalışkan insan kaderini değiştirebilir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedeflerinizi büyük tutun, çabalarınızı büyütün.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi güçtür, öğrenmek mutluluktur.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her sayfa, yeni bir umut; her soru, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açılır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, hazırlanmış olanların eseridir.\",\n    author: \"Louis Pasteur\"\n  },\n  {\n    quote: \"Öğrenmek cesaret ister, bilmek sabır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her gün yeni bir fırsat, yeni bir başlangıç.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim, en büyük yetenektir.\",\n    author: \"Grit\"\n  },\n  {\n    quote: \"Çalışmanın meyvesi tatlıdır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefine ulaşmak isteyenin durması yasak.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi biriktiren, güç toplar.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her zorluk, sizi daha güçlü yapar.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba eden hiçbir zaman pişman olmaz.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, tutarlı çabanın sonucudur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek yaşamı zenginleştirir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Her adım sizi zirveye biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim dağları yerinden oynatır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Bugünkü eksiğiniz, yarınki eksiğiniz olmasın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışmak hayatın en büyük zevkidir.\",\n    author: \"Khalil Gibran\"\n  },\n  {\n    quote: \"Başarıya giden yolda durmak yoktur.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Her kitap, yeni bir dünya demektir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Sebat eden mutlaka kazanır.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Hedefleriniz kadar büyük hayaller kurun.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek, en değerli yatırımdır.\",\n    author: \"Benjamin Franklin\"\n  },\n  {\n    quote: \"Her çaba, sizi hedefe biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çalışkan el bereketli olur, tembel el fakirleşir.\",\n    author: \"Süleyman\"\n  },\n  {\n    quote: \"Başarı, kesin kararlılığın ürünüdür.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgili olmak, güçlü olmaktır.\",\n    author: \"Francis Bacon\"\n  },\n  {\n    quote: \"Her gün biraz daha iyiye doğru.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Azim, dünyanın en büyük gücüdür.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Çalışma azmi, başarının garantisidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Hedefine odaklan, başaracaksın.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Öğrenmek yaşamın kendisidir.\",\n    author: \"John Dewey\"\n  },\n  {\n    quote: \"Her sayfa, yeni bir umut; her gün, yeni bir şans.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Çaba gösterenin yolu açık olur.\",\n    author: \"Türk Atasözü\"\n  },\n  {\n    quote: \"Başarı, istikrarlı çalışmanın meyvesidir.\",\n    author: \"Motivasyon\"\n  },\n  {\n    quote: \"Bilgi, özgürlüğe giden en kısa yoldur.\",\n    author: \"Frederick Douglass\"\n  },\n  {\n    quote: \"Her adım, zirveye biraz daha yaklaştırır.\",\n    author: \"Motivasyon\"\n  }\n];\n\nexport function MotivationalQuote() {\n  const [location] = useLocation();\n  const [currentQuote, setCurrentQuote] = useState(YKS_QUOTES[0]);\n\n  // Konum değişikliği veya sayfa yenilemesi durumunda alıntı değiştir\n  useEffect(() => {\n    const getRandomQuote = () => {\n      // Mevcut zaman, tarih ve konumu kullanarak daha rastgele bir indeks oluştur\n      const now = new Date();\n      const timeComponent = now.getHours() * 60 + now.getMinutes();\n      const dateComponent = now.getDate() * now.getMonth();\n      const locationComponent = location.split('').reduce((sum, char) => sum + char.charCodeAt(0), 0);\n      const randomSeed = timeComponent + dateComponent + locationComponent + Math.floor(Date.now() / 1000);\n      const randomIndex = randomSeed % YKS_QUOTES.length;\n      return YKS_QUOTES[randomIndex];\n    };\n\n    setCurrentQuote(getRandomQuote());\n  }, [location]); // Bu, gezinme sırasında tetiklenecektir\n\n  // Ayrıca bileşen montajında (sayfa yenilemesi) değiştir\n  useEffect(() => {\n    const getRandomQuote = () => {\n      const randomIndex = Math.floor(Math.random() * YKS_QUOTES.length);\n      return YKS_QUOTES[randomIndex];\n    };\n\n    setCurrentQuote(getRandomQuote());\n  }, []); // Bu, sayfa yenilemesi sırasında tetiklenecektir\n\n  return (\n    <div className=\"text-center\">\n      <blockquote className=\"text-sm md:text-base font-medium text-foreground italic leading-relaxed\">\n        \"{currentQuote.quote}\"\n      </blockquote>\n      <cite className=\"text-xs text-muted-foreground mt-1 block\">\n        - {currentQuote.author}\n      </cite>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":19101},"client/src/components/profile-modal.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { X } from \"lucide-react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Mood, InsertMood } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProfileModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nconst moodEmojis = {\n  \"very-happy\": { emoji: \"😄\", text: \"Harika\" },\n  \"happy\": { emoji: \"😊\", text: \"İyi\" },\n  \"neutral\": { emoji: \"😐\", text: \"Normal\" },\n  \"sad\": { emoji: \"😔\", text: \"Üzgün\" },\n  \"angry\": { emoji: \"😠\", text: \"Sinirli\" },\n};\n\nexport function ProfileModal({ open, onOpenChange }: ProfileModalProps) {\n  const [selectedMood, setSelectedMood] = useState<string>(\"\");\n  const [note, setNote] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: latestMood } = useQuery<Mood>({\n    queryKey: [\"/api/moods/latest\"],\n    enabled: open,\n  });\n\n  const saveMoodMutation = useMutation({\n    mutationFn: (data: InsertMood) => \n      apiRequest(\"POST\", \"/api/moods\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods/latest\"] });\n      toast({\n        title: \"Ruh hali kaydedildi\",\n        description: \"Ruh haliniz başarıyla kaydedildi.\",\n      });\n      onOpenChange(false);\n      setSelectedMood(\"\");\n      setNote(\"\");\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Ruh hali kaydedilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    if (!selectedMood) {\n      toast({\n        title: \"Uyarı\",\n        description: \"Lütfen bir ruh hali seçin.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    saveMoodMutation.mutate({\n      mood: selectedMood as any,\n      note: note.trim() || undefined,\n    });\n  };\n\n  const formatTimeAgo = (date: Date) => {\n    const now = new Date();\n    const diffInHours = Math.floor((now.getTime() - new Date(date).getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) {\n      return \"Az önce\";\n    } else if (diffInHours < 24) {\n      return `${diffInHours} saat önce`;\n    } else {\n      const diffInDays = Math.floor(diffInHours / 24);\n      return `${diffInDays} gün önce`;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Ruh Halini Paylaş</DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {/* Mood seçici */}\n          <div>\n            <label className=\"block text-sm font-medium text-foreground mb-2\">\n              Bugün nasıl hissediyorsun?\n            </label>\n            <div className=\"grid grid-cols-5 gap-2\">\n              {Object.entries(moodEmojis).map(([mood, { emoji, text }]) => (\n                <button\n                  key={mood}\n                  onClick={() => setSelectedMood(mood)}\n                  className={`p-3 rounded-lg border transition-colors text-center ${\n                    selectedMood === mood\n                      ? \"border-primary bg-primary text-primary-foreground\"\n                      : \"border-border hover:bg-secondary\"\n                  }`}\n                  data-testid={`mood-${mood}`}\n                >\n                  <div className=\"text-2xl\">{emoji}</div>\n                  <div className=\"text-xs mt-1\">{text}</div>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* not */}\n          <div>\n            <label htmlFor=\"mood-note\" className=\"block text-sm font-medium text-foreground mb-2\">\n              Notun\n            </label>\n            <Textarea\n              id=\"mood-note\"\n              placeholder=\"Bugün nasıl hissediyorsun? Notunu buraya yaz...\"\n              value={note}\n              onChange={(e) => setNote(e.target.value)}\n              className=\"h-24 resize-none\"\n              data-testid=\"input-note\"\n            />\n          </div>\n\n          {/* Son Ruh Hali Gösterimi */}\n          {latestMood && (\n            <div className=\"bg-muted rounded-lg p-3\">\n              <div className=\"text-sm text-muted-foreground mb-1\">Son ruh hali:</div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-lg\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.emoji}\n                </span>\n                <span className=\"text-sm text-foreground\">\n                  {moodEmojis[latestMood.mood as keyof typeof moodEmojis]?.text} hissediyorum\n                </span>\n                <span className=\"text-xs text-muted-foreground\">\n                  • {formatTimeAgo(latestMood.createdAt!)}\n                </span>\n              </div>\n              {latestMood.note && (\n                <p className=\"text-xs text-muted-foreground mt-2 italic\">\n                  \"{latestMood.note}\"\n                </p>\n              )}\n            </div>\n          )}\n\n          {/* Eylem Düğmeleri */}\n          <div className=\"flex space-x-3 pt-2\">\n            <Button \n              onClick={handleSave}\n              disabled={saveMoodMutation.isPending}\n              className=\"flex-1\"\n              data-testid=\"button-save-mood\"\n            >\n              {saveMoodMutation.isPending ? \"Kaydediliyor...\" : \"Kaydet\"}\n            </Button>\n            <Button \n              variant=\"secondary\"\n              onClick={() => onOpenChange(false)}\n              className=\"flex-1\"\n              data-testid=\"button-cancel-mood\"\n            >\n              İptal\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":6246},"client/src/components/question-analysis-charts.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, Line, ComposedChart } from \"recharts\";\nimport { BookOpen, Calendar, RefreshCw } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { QuestionLog } from \"@shared/schema\";\n\nexport function QuestionAnalysisCharts() {\n  const [viewMode, setViewMode] = useState<'daily' | 'weekly'>('daily');\n  const [useCustomDates, setUseCustomDates] = useState(false);\n  const [startDate, setStartDate] = useState(() => {\n    const date = new Date();\n    date.setDate(date.getDate() - 13);\n    return date.toISOString().split('T')[0];\n  });\n  const [endDate, setEndDate] = useState(() => new Date().toISOString().split('T')[0]);\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n\n  // Günlük/haftalık soru tablosu verilerini hazırlayın\n  const prepareDailyWeeklyData = () => {\n    if (questionLogs.length === 0) return [];\n\n    if (viewMode === 'daily') {\n      let dateRange: string[];\n      \n      if (useCustomDates) {\n        // Başlangıç ve bitiş tarihleri arasında tarih aralığı oluşturun\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        dateRange = [];\n        \n        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\n          dateRange.push(d.toISOString().split('T')[0]);\n        }\n      } else {\n        // Varsayılan: son 14 gün\n        dateRange = Array.from({ length: 14 }, (_, i) => {\n          const date = new Date();\n          date.setDate(date.getDate() - (13 - i));\n          return date.toISOString().split('T')[0];\n        });\n      }\n\n      return dateRange.map(dateStr => {\n        const dayLogs = questionLogs.filter(log => log.study_date === dateStr);\n        const totalQuestions = dayLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = dayLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        return {\n          date: dateStr,\n          dayName: new Date(dateStr).toLocaleDateString('tr-TR', { weekday: 'short', day: 'numeric' }),\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: dayLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        };\n      });\n    } else {\n      // Haftalık toplama - son 8 hafta (Pazartesi'den başlayan ISO haftaları)\n      const weeks = [];\n      const today = new Date();\n      \n      for (let i = 7; i >= 0; i--) {\n        // Hedef haftanın Pazartesi'sini hesaplayın (ISO hafta başlangıcı) UTC'de\n        const weekStart = new Date(today);\n        const daysFromMonday = (today.getUTCDay() + 6) % 7; // Pazar=0'ı Pazartesi=0 sistemine dönüştür\n        weekStart.setUTCDate(today.getUTCDate() - (i * 7) - daysFromMonday);\n        weekStart.setUTCHours(0, 0, 0, 0); // UTC midnight\n        \n        const weekEnd = new Date(weekStart);\n        weekEnd.setUTCDate(weekStart.getUTCDate() + 6);\n        weekEnd.setUTCHours(23, 59, 59, 999); // UTC'de Pazar'ın sonu\n        \n        // UTC tabanlı dize karşılaştırması kullanarak bu haftanın günlüklerini filtreleyin \n        const weekLogs = questionLogs.filter(log => {\n          const logDateStr = log.study_date;\n          const weekStartStr = weekStart.toISOString().slice(0, 10); // YYYY-AA-GG\n          const weekEndStr = weekEnd.toISOString().slice(0, 10); // YYYY-AA-GG\n          return logDateStr >= weekStartStr && logDateStr <= weekEndStr;\n        });\n        \n        const totalQuestions = weekLogs.reduce((sum, log) => \n          sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n        );\n        const correctQuestions = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0), 0);\n        const attempted = weekLogs.reduce((sum, log) => sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0), 0);\n        \n        // Tarih aralığı içeren açıklayıcı hafta etiketi oluştuR\n        const weekKey = `${weekStart.getUTCFullYear()}-W${String(8 - i).padStart(2, '0')}`;\n        const startMonth = weekStart.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const endMonth = weekEnd.toLocaleDateString('tr-TR', { month: 'short', timeZone: 'UTC' });\n        const startYear = weekStart.getUTCFullYear();\n        const endYear = weekEnd.getUTCFullYear();\n        \n        let weekLabel;\n        if (startMonth === endMonth && startYear === endYear) {\n          // Aynı ay ve yıl: “02–08 Eyl”\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')}–${weekEnd.getUTCDate().toString().padStart(2, '0')} ${startMonth}`;\n        } else if (startYear === endYear) {\n          // Farklı aylar, aynı yıl: \"29 Ağu – 04 Eyl\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth}`;\n        } else {\n          // Farklı yıllar: \"29 Ara 2024 – 04 Oca 2025\"\n          weekLabel = `${weekStart.getUTCDate().toString().padStart(2, '0')} ${startMonth} ${startYear} – ${weekEnd.getUTCDate().toString().padStart(2, '0')} ${endMonth} ${endYear}`;\n        }\n        \n        weeks.push({\n          date: weekKey,\n          dayName: weekLabel,\n          totalQuestions,\n          correctQuestions,\n          wrongQuestions: weekLogs.reduce((sum, log) => sum + (Number(log.wrong_count) || 0), 0),\n          successRate: attempted > 0 ? Math.round((correctQuestions / attempted) * 100) : 0\n        });\n      }\n      \n      return weeks;\n    }\n  };\n\n\n  const dailyWeeklyData = useMemo(() => prepareDailyWeeklyData(), [questionLogs, viewMode, useCustomDates, startDate, endDate]);\n\n\n  return (\n    <div className=\"space-y-6 mb-8\">\n      {/* Geliştirilmiş Günlük/Haftalık Soru Grafiği */}\n      <div className=\"bg-gradient-to-br from-emerald-50/60 via-card to-blue-50/40 dark:from-emerald-950/30 dark:via-card dark:to-blue-950/25 rounded-2xl border-2 border-emerald-200/40 dark:border-emerald-800/40 p-8 relative overflow-hidden shadow-2xl backdrop-blur-sm\">\n        <div className=\"absolute top-0 right-0 w-40 h-40 bg-gradient-to-br from-emerald-500/10 to-blue-500/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-8 -left-8 w-32 h-32 bg-gradient-to-tr from-blue-500/10 to-emerald-500/10 rounded-full blur-2xl\"></div>\n        <div className=\"relative\">\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"p-3 bg-gradient-to-br from-emerald-500 via-blue-500 to-emerald-600 rounded-xl shadow-lg\">\n                <BookOpen className=\"h-6 w-6 text-white drop-shadow-lg\" />\n              </div>\n              <div>\n                <h3 className=\"text-2xl font-bold bg-gradient-to-r from-emerald-600 via-blue-600 to-emerald-700 bg-clip-text text-transparent\">\n                  📚 {viewMode === 'daily' ? 'Günlük' : 'Haftalık'} Soru Çözüm Analizi\n                </h3>\n                <p className=\"text-sm text-emerald-600/70 dark:text-emerald-400/70 font-medium\">\n                  Soru çözme performansı ve gelişim takibi\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-3 flex-wrap\">\n              <div className=\"flex border-2 border-emerald-200/50 dark:border-emerald-700/50 rounded-xl p-1 bg-white/60 dark:bg-gray-900/60 backdrop-blur-sm\">\n                <Button\n                  variant={viewMode === 'daily' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('daily')}\n                  className={`text-sm px-4 py-2 h-auto font-medium transition-all duration-200 rounded-lg ${\n                    viewMode === 'daily'\n                      ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg hover:shadow-xl'\n                      : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'\n                  }`}\n                  data-testid=\"button-daily-view\"\n                >\n                  📅 Günlük\n                </Button>\n                <Button\n                  variant={viewMode === 'weekly' ? 'default' : 'ghost'}\n                  size=\"sm\"\n                  onClick={() => setViewMode('weekly')}\n                  className={`text-sm px-4 py-2 h-auto font-medium transition-all duration-200 rounded-lg ${\n                    viewMode === 'weekly'\n                      ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg hover:shadow-xl'\n                      : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300'\n                  }`}\n                  data-testid=\"button-weekly-view\"\n                >\n                  🗓️ Haftalık\n                </Button>\n              </div>\n\n              {/* Tarih Aralığı Değiştirme */}\n              <Button\n                variant={useCustomDates ? 'default' : 'outline'}\n                size=\"sm\"\n                onClick={() => setUseCustomDates(!useCustomDates)}\n                className={`text-sm px-3 py-2 h-auto font-medium transition-all duration-200 ${\n                  useCustomDates\n                    ? 'bg-gradient-to-r from-emerald-500 to-blue-500 text-white shadow-lg'\n                    : 'hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700'\n                }`}\n                data-testid=\"button-custom-dates\"\n              >\n                <Calendar className=\"h-4 w-4 mr-1\" />\n                Tarih Seç\n              </Button>\n\n              {!useCustomDates && (\n                <div className=\"text-sm text-muted-foreground bg-emerald-100/60 dark:bg-emerald-900/30 px-4 py-2 rounded-full border border-emerald-200/50 dark:border-emerald-700/50 font-medium\">\n                  {viewMode === 'daily' ? 'Son 14 gün' : 'Son 8 hafta'}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Özel Tarih Aralığı Girişleri */}\n          {useCustomDates && viewMode === 'daily' && (\n            <div className=\"mb-6 p-4 bg-white/30 dark:bg-gray-900/30 rounded-xl border border-emerald-200/50 dark:border-emerald-700/50 backdrop-blur-sm\">\n              <div className=\"flex items-center gap-4 flex-wrap\">\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium text-emerald-700 dark:text-emerald-300\">Başlangıç:</label>\n                  <Input\n                    type=\"date\"\n                    value={startDate}\n                    onChange={(e) => setStartDate(e.target.value)}\n                    className=\"text-sm border-emerald-200 dark:border-emerald-700 focus:border-emerald-500 focus:ring-emerald-500\"\n                    data-testid=\"input-start-date\"\n                  />\n                </div>\n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium text-emerald-700 dark:text-emerald-300\">Bitiş:</label>\n                  <Input\n                    type=\"date\"\n                    value={endDate}\n                    onChange={(e) => setEndDate(e.target.value)}\n                    className=\"text-sm border-emerald-200 dark:border-emerald-700 focus:border-emerald-500 focus:ring-emerald-500\"\n                    data-testid=\"input-end-date\"\n                  />\n                </div>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    const today = new Date();\n                    const twoWeeksAgo = new Date();\n                    twoWeeksAgo.setDate(today.getDate() - 13);\n                    setStartDate(twoWeeksAgo.toISOString().split('T')[0]);\n                    setEndDate(today.toISOString().split('T')[0]);\n                  }}\n                  className=\"text-sm hover:bg-emerald-50 dark:hover:bg-emerald-900/30 text-emerald-700 dark:text-emerald-300 border-emerald-200 dark:border-emerald-700\"\n                  data-testid=\"button-reset-dates\"\n                >\n                  <RefreshCw className=\"h-4 w-4 mr-1\" />\n                  Sıfırla\n                </Button>\n                <div className=\"text-sm text-muted-foreground bg-emerald-100/60 dark:bg-emerald-900/30 px-3 py-1 rounded-full border border-emerald-200/50 dark:border-emerald-700/50 font-medium\">\n                  {(() => {\n                    const start = new Date(startDate);\n                    const end = new Date(endDate);\n                    const daysDiff = Math.ceil((end.getTime() - start.getTime()) / (1000 * 60 * 60 * 24)) + 1;\n                    return `${daysDiff} gün`;\n                  })()}\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {dailyWeeklyData.length === 0 || dailyWeeklyData.every(d => d.totalQuestions === 0) ? (\n            <div className=\"text-center py-20 text-muted-foreground\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-emerald-100 to-blue-100 dark:from-emerald-900/30 dark:to-blue-900/30 flex items-center justify-center mx-auto mb-6 shadow-lg\">\n                <BookOpen className=\"h-10 w-10 text-emerald-500\" />\n              </div>\n              <h4 className=\"text-lg font-semibold text-emerald-700 dark:text-emerald-300 mb-2\">Soru çözüm verisi bulunmuyor</h4>\n              <p className=\"text-sm opacity-75 mb-4\">Soru kayıtları veri girişi yapılmadan gözükmez.</p>\n              <div className=\"flex justify-center space-x-1\">\n                <div className=\"w-2 h-2 rounded-full bg-emerald-500 animate-bounce\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-blue-500 animate-bounce delay-100\"></div>\n                <div className=\"w-2 h-2 rounded-full bg-emerald-600 animate-bounce delay-200\"></div>\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"h-80 mb-6\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <ComposedChart data={dailyWeeklyData} margin={{ top: 20, right: 40, left: 20, bottom: 10 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" stroke=\"currentColor\" />\n                    <XAxis \n                      dataKey=\"dayName\" \n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                    />\n                    <YAxis \n                      yAxisId=\"questions\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                      label={{ value: 'Soru Sayısı', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle' } }}\n                    />\n                    <YAxis \n                      yAxisId=\"percentage\"\n                      orientation=\"right\"\n                      className=\"text-xs text-muted-foreground\"\n                      tick={{ fontSize: 11, fontWeight: 500 }}\n                      stroke=\"currentColor\"\n                      axisLine={{ stroke: 'currentColor', strokeWidth: 1 }}\n                      domain={[0, 100]}\n                      label={{ value: 'Başarı %', angle: 90, position: 'insideRight', style: { textAnchor: 'middle' } }}\n                    />\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: 'hsl(var(--card))',\n                        border: '1px solid hsl(var(--border))',\n                        borderRadius: '12px',\n                        fontSize: '13px',\n                        boxShadow: '0 8px 32px rgba(0,0,0,0.1)',\n                        padding: '12px'\n                      }}\n                      formatter={(value: any, name: any) => [\n                        name === 'successRate' ? `%${value}` : `${value} soru`,\n                        name === 'correctQuestions' ? '✅ Doğru' : \n                        name === 'wrongQuestions' ? '❌ Yanlış' : \n                        name === 'successRate' ? '📈 Başarı Oranı' :\n                        name === 'totalQuestions' ? '📊 Toplam' : name\n                      ]}\n                      labelFormatter={(label) => `📅 ${label}`}\n                    />\n                    <Legend \n                      wrapperStyle={{ paddingTop: '20px' }}\n                      iconType=\"rect\"\n                    />\n                    \n                    {/* Degrade efektli geliştirilmiş çubuklar */}\n                    <Bar \n                      yAxisId=\"questions\" \n                      dataKey=\"correctQuestions\" \n                      stackId=\"a\" \n                      fill=\"url(#correctGradient)\" \n                      name=\"Doğru\" \n                      radius={[0, 0, 0, 0]} \n                    />\n                    <Bar \n                      yAxisId=\"questions\" \n                      dataKey=\"wrongQuestions\" \n                      stackId=\"a\" \n                      fill=\"url(#wrongGradient)\" \n                      name=\"Yanlış\" \n                      radius={[4, 4, 0, 0]} \n                    />\n                    \n                    {/* Geliştirilmiş başarı oranı çizgisi */}\n                    <Line \n                      yAxisId=\"percentage\" \n                      type=\"monotone\" \n                      dataKey=\"successRate\" \n                      stroke=\"url(#successGradient)\" \n                      strokeWidth={4} \n                      dot={{ r: 5, fill: \"#3b82f6\", strokeWidth: 2, stroke: '#ffffff' }} \n                      activeDot={{ r: 7, stroke: '#3b82f6', strokeWidth: 3, fill: '#ffffff' }}\n                      name=\"Başarı Oranı (%)\" \n                    />\n                    \n                    {/* Degrade Tanımları */}\n                    <defs>\n                      <linearGradient id=\"correctGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#10b981\" />\n                        <stop offset=\"100%\" stopColor=\"#059669\" />\n                      </linearGradient>\n                      <linearGradient id=\"wrongGradient\" x1=\"0%\" y1=\"0%\" x2=\"0%\" y2=\"100%\">\n                        <stop offset=\"0%\" stopColor=\"#ef4444\" />\n                        <stop offset=\"100%\" stopColor=\"#dc2626\" />\n                      </linearGradient>\n                      <linearGradient id=\"successGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                        <stop offset=\"0%\" stopColor=\"#3b82f6\" />\n                        <stop offset=\"100%\" stopColor=\"#1d4ed8\" />\n                      </linearGradient>\n                    </defs>\n                  </ComposedChart>\n                </ResponsiveContainer>\n              </div>\n              \n              {/* Geliştirilmiş Özet İstatistikler - 2x2 Izgara Düzeni */}\n              <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 pt-6 border-t-2 border-emerald-200/30 dark:border-emerald-700/30\">\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-4 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-2xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.correctQuestions, 0)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground font-medium\">✅ Toplam Doğru</div>\n                  <div className=\"w-8 h-1 bg-gradient-to-r from-green-500 to-emerald-500 rounded-full mx-auto mt-2\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-4 backdrop-blur-sm border border-red-200/30 dark:border-red-700/30 shadow-lg\">\n                  <div className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-red-500 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.wrongQuestions, 0)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground font-medium\">❌ Toplam Yanlış</div>\n                  <div className=\"w-8 h-1 bg-gradient-to-r from-red-500 to-red-600 rounded-full mx-auto mt-2\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-4 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-2xl font-bold bg-gradient-to-r from-emerald-600 to-blue-600 bg-clip-text text-transparent mb-1\">\n                    {dailyWeeklyData.reduce((sum, d) => sum + d.totalQuestions, 0)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground font-medium\">📊 Toplam Soru</div>\n                  <div className=\"w-8 h-1 bg-gradient-to-r from-emerald-500 to-blue-500 rounded-full mx-auto mt-2\"></div>\n                </div>\n                <div className=\"text-center bg-white/40 dark:bg-gray-900/40 rounded-xl p-4 backdrop-blur-sm border border-emerald-200/30 dark:border-emerald-700/30 shadow-lg\">\n                  <div className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-indigo-600 bg-clip-text text-transparent mb-1\">\n                    {Math.round(dailyWeeklyData.reduce((sum, d) => sum + d.successRate, 0) / dailyWeeklyData.filter(d => d.totalQuestions > 0).length) || 0}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground font-medium\">📈 Ortalama Başarı</div>\n                  <div className=\"w-8 h-1 bg-gradient-to-r from-blue-500 to-indigo-500 rounded-full mx-auto mt-2\"></div>\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":23059},"client/src/components/sidebar.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/schema\";\nimport { Clock, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function Sidebar() {\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  // Get additional data needed for report\n  const { data: questionLogs = [] } = useQuery({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  // Real-time clock state\n  const [currentTime, setCurrentTime] = React.useState(new Date());\n  \n  // Report sending state\n  const [isSending, setIsSending] = React.useState(false);\n\n  // Update time every second\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const totalTasks = tasks.length;\n  const completedTasks = tasks.filter(task => task.completed).length;\n  const pendingTasks = totalTasks - completedTasks;\n  const completionPercentage = totalTasks > 0 ? Math.round((completedTasks / totalTasks) * 100) : 0;\n\n  const turkçeTasks = tasks.filter(task => task.category === \"turkce\").length;\n  const matematikTasks = tasks.filter(task => task.category === \"matematik\").length;\n  const genelTasks = tasks.filter(task => task.category === \"genel\").length;\n\n  // Zaman dilimi sorunlarını önlemek ve performansı artırmak için yerel tarihleri kullanarak özet ön hesaplama etkinlik haritasını geliştir, İstatistikler - 2x2 Izgara Düzeni\n  const activityMap = React.useMemo(() => {\n    const map = new Map<string, { hasCreated: boolean; hasCompleted: boolean }>();\n    \n    tasks.forEach(task => {\n      // Yerel tarih biçimini kullanarak görev oluşturma tarihini işleyin\n      if (task.createdAt) {\n        const createdDate = new Date(task.createdAt).toLocaleDateString('en-CA'); // YYYY-AA-GG format\n        const existing = map.get(createdDate) || { hasCreated: false, hasCompleted: false };\n        map.set(createdDate, { ...existing, hasCreated: true });\n      }\n      \n      // Yerel tarih biçimini kullanarak görev tamamlama tarihini işleyin\n      if (task.completed && task.completedAt) {\n        const completedDate = new Date(task.completedAt).toLocaleDateString('en-CA'); // YYYY-AA-GG format\n        const existing = map.get(completedDate) || { hasCreated: false, hasCompleted: false };\n        map.set(completedDate, { ...existing, hasCompleted: true });\n      }\n    });\n    \n    return map;\n  }, [tasks]);\n\n  // Bir tarih için etkinlik türünü alma işlevi (O(1) arama)\n  const getActivityType = (date: Date): 'created' | 'completed' | 'both' | 'none' => {\n    const dateStr = date.toLocaleDateString('en-CA'); // YYYY-AA-GG format local\n    const activity = activityMap.get(dateStr);\n    \n    if (!activity) return 'none';\n    if (activity.hasCreated && activity.hasCompleted) return 'both';\n    if (activity.hasCompleted) return 'completed';\n    if (activity.hasCreated) return 'created';\n    return 'none';\n  };\n\n  const currentDate = new Date();\n  const currentDay = currentDate.getDate();\n  const currentMonth = currentDate.toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" });\n  const currentWeekday = currentDate.toLocaleDateString(\"tr-TR\", { weekday: \"long\" });\n\n  // Geçerli ay için takvim günleri oluştur\n  const year = currentDate.getFullYear();\n  const month = currentDate.getMonth();\n  const firstDay = new Date(year, month, 1);\n  const lastDay = new Date(year, month + 1, 0);\n  const startDate = new Date(firstDay);\n  startDate.setDate(startDate.getDate() - firstDay.getDay());\n\n  const calendarDays = [];\n  for (let i = 0; i < 35; i++) {\n    const date = new Date(startDate);\n    date.setDate(startDate.getDate() + i);\n    calendarDays.push(date);\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Hızlı İstatistikler */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Dashboard</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Toplam Görev</span>\n            <span className=\"font-semibold text-foreground\" data-testid=\"text-total-tasks\">{totalTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Tamamlanan</span>\n            <span className=\"font-semibold text-green-600\" data-testid=\"text-completed-tasks\">{completedTasks}</span>\n          </div>\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-muted-foreground text-sm\">Bekleyen</span>\n            <span className=\"font-semibold text-orange-600\" data-testid=\"text-pending-tasks\">{pendingTasks}</span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-2\">\n            <div \n              className=\"bg-primary h-2 rounded-full transition-all duration-300\" \n              style={{ width: `${completionPercentage}%` }}\n            ></div>\n          </div>\n          <p className=\"text-xs text-muted-foreground\">%{completionPercentage} tamamlandı</p>\n        </div>\n      </div>\n\n      {/* Takvim Widget'ı */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Takvim</h3>\n        <div className=\"text-center mb-4\">\n          <div className=\"text-2xl font-bold text-foreground\" data-testid=\"text-current-day\">{currentDay}</div>\n          <div className=\"text-sm text-muted-foreground\" data-testid=\"text-current-date\">{currentMonth}</div>\n          <div className=\"text-xs text-muted-foreground\" data-testid=\"text-current-weekday\">{currentWeekday}</div>\n        </div>\n        \n        {/* Saat Göstergesi - Saat Simgesi ile Ortalanmış */}\n        <div className=\"flex items-center justify-center gap-2 mb-4 p-3 border border-border rounded-lg bg-secondary/30\" data-testid=\"clock-display\">\n          <Clock className=\"w-5 h-5 text-primary\" />\n          <div className=\"text-lg font-mono font-semibold text-foreground\" data-testid=\"text-current-time\">\n            {currentTime.toLocaleTimeString('tr-TR', { \n              hour: '2-digit', \n              minute: '2-digit', \n              second: '2-digit',\n              hour12: false \n            })}\n          </div>\n        </div>\n\n        {/* Mini Takvim Izgarası */}\n        <div className=\"grid grid-cols-7 gap-1 text-xs\">\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">S</div>\n          <div className=\"text-center text-muted-foreground p-1\">Ç</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">C</div>\n          <div className=\"text-center text-muted-foreground p-1\">P</div>\n          {calendarDays.slice(0, 28).map((date, index) => {\n            const isCurrentMonth = date.getMonth() === month;\n            const isToday = date.getDate() === currentDay && isCurrentMonth;\n            const activityType = getActivityType(date);\n            \n            return (\n              <div\n                key={index}\n                className={`text-center p-1 relative ${\n                  isToday\n                    ? \"bg-primary text-primary-foreground rounded\"\n                    : isCurrentMonth\n                    ? \"hover:bg-secondary rounded cursor-pointer\"\n                    : \"text-muted-foreground/50\"\n                }`}\n              >\n                {date.getDate()}\n                {activityType !== 'none' && isCurrentMonth && !isToday && (\n                  <div className=\"absolute top-0 right-0 flex flex-col gap-0.5\">\n                    {activityType === 'created' && (\n                      <div className=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Görev eklendi\"></div>\n                    )}\n                    {activityType === 'completed' && (\n                      <div className=\"w-2 h-2 bg-purple-500 rounded-full\" title=\"Görev tamamlandı\"></div>\n                    )}\n                    {activityType === 'both' && (\n                      <>\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Görev eklendi\"></div>\n                        <div className=\"w-2 h-2 bg-purple-500 rounded-full\" title=\"Görev tamamlandı\"></div>\n                      </>\n                    )}\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Rapor Gönder Düğmesi */}\n        {/* GELİŞTİRİLECEK UNUTMA */}\n        <div className=\"border-t border-border pt-4 mt-4\">\n          <div className=\"text-center\">\n            <div className=\"text-xs text-muted-foreground mb-2\">\n              Ay Sonuna Kalan Süre: {new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate() - new Date().getDate()} gün\n            </div>\n            <Button\n              onClick={async () => {\n                if (isSending) return;\n                \n                setIsSending(true);\n                \n                try {\n                  // Yedeklemeli dizilerim olduğundan emin ol\n                  const safeTasks = Array.isArray(tasks) ? tasks : [];\n                  const safeQuestionLogs = Array.isArray(questionLogs) ? questionLogs : [];\n                  const safeExamResults = Array.isArray(examResults) ? examResults : [];\n                  \n                  // Aylık aktiviteleri hesapla\n                  const currentMonth = new Date();\n                  const startOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1);\n                  const endOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0);\n                  \n                  // Bu ayın verilerini filtrele\n                  const monthlyTasks = safeTasks.filter(task => {\n                    if (task.completedAt) {\n                      const completedDate = new Date(task.completedAt);\n                      return completedDate >= startOfMonth && completedDate <= endOfMonth;\n                    }\n                    return false;\n                  });\n\n                  const monthlyQuestionLogs = safeQuestionLogs.filter((log: any) => {\n                    if (log.study_date) {\n                      const logDate = new Date(log.study_date);\n                      return logDate >= startOfMonth && logDate <= endOfMonth;\n                    }\n                    return false;\n                  });\n\n                  const monthlyExamResults = safeExamResults.filter((exam: any) => {\n                    if (exam.exam_date) {\n                      const examDate = new Date(exam.exam_date);\n                      return examDate >= startOfMonth && examDate <= endOfMonth;\n                    }\n                    return false;\n                  });\n\n                  const monthlyActivities = {\n                    tasks: monthlyTasks,\n                    questionLogs: monthlyQuestionLogs,\n                    examResults: monthlyExamResults,\n                    total: monthlyTasks.length + monthlyQuestionLogs.length + monthlyExamResults.length\n                  };\n\n                  const reportData = {\n                    month: new Date().toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' }),\n                    date: new Date().toLocaleDateString('tr-TR'),\n                    activities: monthlyActivities,\n                    email: 'brtbllcankir03@gmail.com' //gönderilecek özel eposta buraya\n                  };\n\n                  // Raporu gönder\n                  const response = await fetch('/api/send-report', {\n                    method: 'POST',\n                    headers: {\n                      'Content-Type': 'application/json',\n                    },\n                    body: JSON.stringify(reportData),\n                  });\n\n                  if (response.ok) {\n                    const result = await response.json();\n                    alert('📧 ' + result.message);\n                  } else {\n                    const errorData = await response.json().catch(() => ({ message: 'Bilinmeyen hata oluştu' }));\n                    alert('❌ Rapor gönderilirken hata oluştu: ' + errorData.message);\n                  }\n                } catch (error) {\n                  console.error('Report sending error:', error);\n                  alert('❌ Rapor gönderilirken bir hata oluştu. Lütfen tekrar deneyin.');\n                } finally {\n                  setIsSending(false);\n                }\n              }}\n              disabled={isSending}\n              className=\"w-full bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white font-semibold py-2 px-4 rounded-lg shadow-lg transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed\"\n              data-testid=\"button-sidebar-report-send\"\n            >\n              {isSending ? (\n                <>\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\" />\n                  Gönderiliyor...\n                </>\n              ) : (\n                <>\n                  <Send className=\"h-4 w-4 mr-2\" />\n                  Rapor Gönder\n                </>\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      {/* Kategoriler */}\n      <div className=\"bg-card rounded-lg border border-border p-6 transition-colors duration-300\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Kategoriler</h3>\n        <div className=\"space-y-2\">\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Türkçe</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-turkce-tasks\">{turkçeTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Matematik</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-matematik-tasks\">{matematikTasks}</span>\n          </div>\n          <div className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-lg cursor-pointer transition-colors\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-purple-500 rounded-full\"></div>\n              <span className=\"text-sm text-foreground\">Genel</span>\n            </div>\n            <span className=\"text-xs text-muted-foreground\" data-testid=\"text-genel-tasks\">{genelTasks}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":15786},"client/src/components/tasks-section.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Edit2, Trash2, Undo2, Calendar, CheckCircle2 } from \"lucide-react\";\nimport { Task } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EditTaskModal } from \"@/components/edit-task-modal\";\n\ninterface TasksSectionProps {\n  onAddTask: () => void;\n}\n\nexport function TasksSection({ onAddTask }: TasksSectionProps) {\n  const [filter, setFilter] = useState<\"all\" | \"pending\" | \"completed\" | \"high\" | \"weekly\" | \"monthly\">(\"all\");\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev güncellendi\",\n        description: \"Görev durumu başarıyla değiştirildi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"DELETE\", `/api/tasks/${taskId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\"] });\n      toast({\n        title: \"Görev silindi\",\n        description: \"Görev başarıyla silindi.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev silinemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTasks = tasks.filter(task => {\n    switch (filter) {\n      case \"pending\":\n        return !task.completed;\n      case \"completed\":\n        return task.completed;\n      case \"high\":\n        return task.priority === \"high\";\n      case \"weekly\":\n        return task.recurrenceType === \"weekly\";\n      case \"monthly\":\n        return task.recurrenceType === \"monthly\";\n      default:\n        return true;\n    }\n  });\n\n  const getTaskBorderStyle = (task: Task) => {\n    const color = task.color || \"#8B5CF6\"; // Renk yoksa varsayılan olarak mor\n    return {\n      borderLeft: `4px solid ${color}`,\n    };\n  };\n\n  const getPriorityBadgeClass = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"medium\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"low\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getCategoryBadgeClass = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200\";\n      case \"turkce\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case \"sosyal\":\n        return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case \"matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      case \"fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case \"kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200\";\n      case \"biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200\";\n      case \"ayt-matematik\":\n        return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 border border-red-300\";\n      case \"ayt-fizik\":\n        return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200 border border-orange-300\";\n      case \"ayt-kimya\":\n        return \"bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-200 border border-pink-300\";\n      case \"ayt-biyoloji\":\n        return \"bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-200 border border-emerald-300\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getPriorityText = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"Yüksek Öncelik\";\n      case \"medium\":\n        return \"Orta Öncelik\";\n      case \"low\":\n        return \"Düşük Öncelik\";\n      default:\n        return \"\";\n    }\n  };\n\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"Matematik\";\n      case \"fizik\":\n        return \"Fizik\";\n      case \"kimya\":\n        return \"Kimya\";\n      case \"biyoloji\":\n        return \"Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return \"\";\n    }\n  };\n\n  const formatDueDate = (dueDate: string) => {\n    if (!dueDate) return \"\";\n    const date = new Date(dueDate);\n    const today = new Date();\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (date.toDateString() === today.toDateString()) {\n      return \"Bugün\";\n    } else if (date.toDateString() === tomorrow.toDateString()) {\n      return \"Yarın\";\n    } else {\n      return date.toLocaleDateString(\"tr-TR\", { day: \"numeric\", month: \"long\" });\n    }\n  };\n\n  const handleToggleTask = (taskId: string) => {\n    toggleTaskMutation.mutate(taskId);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    deleteTaskMutation.mutate(taskId);\n  };\n\n  const handleEditTask = (task: Task) => {\n    setEditingTask(task);\n    setIsEditModalOpen(true);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Görev Ekle başlığı */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground\">Görevlerim</h2>\n          <p className=\"text-muted-foreground\">Bugün tamamlanacak görevler</p>\n        </div>\n        <Button \n          onClick={onAddTask}\n          className=\"bg-primary text-primary-foreground hover:bg-primary/90\"\n          data-testid=\"button-add-task\"\n        >\n          <Plus className=\"h-4 w-4 mr-2\" />\n          Yeni Görev\n        </Button>\n      </div>\n\n      {/* Filtreler */}\n      <div className=\"flex flex-wrap gap-2\">\n        <button\n          onClick={() => setFilter(\"all\")}\n          className={`px-3 py-1 rounded-full text-sm font-medium transition-colors ${\n            filter === \"all\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-all\"\n        >\n          Tümü\n        </button>\n        <button\n          onClick={() => setFilter(\"pending\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"pending\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-pending\"\n        >\n          Bekleyen\n        </button>\n        <button\n          onClick={() => setFilter(\"completed\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"completed\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-completed\"\n        >\n          Tamamlanan\n        </button>\n        <button\n          onClick={() => setFilter(\"high\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"high\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-high-priority\"\n        >\n          Yüksek Öncelik\n        </button>\n        <button\n          onClick={() => setFilter(\"weekly\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"weekly\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-weekly\"\n        >\n          📅 Haftalık\n        </button>\n        <button\n          onClick={() => setFilter(\"monthly\")}\n          className={`px-3 py-1 rounded-full text-sm transition-colors ${\n            filter === \"monthly\"\n              ? \"bg-primary text-primary-foreground\"\n              : \"bg-secondary text-secondary-foreground hover:bg-accent\"\n          }`}\n          data-testid=\"filter-monthly\"\n        >\n          🗓️ Aylık\n        </button>\n      </div>\n\n      {/* Görev Listesi */}\n      <div className=\"space-y-3\">\n        {filteredTasks.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <p className=\"text-muted-foreground\">Görev bulunamadı.</p>\n          </div>\n        ) : (\n          filteredTasks.map((task) => (\n            <div\n              key={task.id}\n              className={`bg-card rounded-lg border border-border p-4 transition-all duration-200 hover:shadow-md hover:-translate-y-1 ${task.completed ? \"opacity-75\" : \"\"}`}\n              style={getTaskBorderStyle(task)}\n              data-testid={`task-item-${task.id}`}\n            >\n              <div className=\"flex items-start justify-between\">\n                <div className=\"flex items-start space-x-3 flex-1\">\n                  <button\n                    onClick={() => handleToggleTask(task.id)}\n                    className={`mt-1 w-5 h-5 rounded-full border-2 transition-colors duration-200 flex items-center justify-center ${\n                      task.completed\n                        ? \"bg-green-500 border-green-500\"\n                        : \"hover:opacity-80\"\n                    } hover:scale-110`}\n                    style={{\n                      borderColor: task.completed ? '#10B981' : (task.color || '#8B5CF6'),\n                      backgroundColor: task.completed ? '#10B981' : 'transparent'\n                    }}\n                    onMouseEnter={(e) => {\n                      if (!task.completed) {\n                        e.currentTarget.style.backgroundColor = task.color || '#8B5CF6';\n                      }\n                    }}\n                    onMouseLeave={(e) => {\n                      if (!task.completed) {\n                        e.currentTarget.style.backgroundColor = 'transparent';\n                      }\n                    }}\n                    data-testid={`button-toggle-task-${task.id}`}\n                  >\n                    {task.completed && (\n                      <CheckCircle2 className=\"h-3 w-3 text-white\" />\n                    )}\n                  </button>\n                  <div className=\"flex-1\">\n                    <h3\n                      className={`font-medium text-foreground ${\n                        task.completed ? \"line-through\" : \"\"\n                      }`}\n                    >\n                      {task.title}\n                    </h3>\n                    {task.description && (\n                      <p\n                        className={`text-sm text-muted-foreground mt-1 ${\n                          task.completed ? \"line-through\" : \"\"\n                        }`}\n                      >\n                        {task.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      {task.dueDate && (\n                        <span className=\"text-xs text-muted-foreground flex items-center\">\n                          <Calendar className=\"h-3 w-3 mr-1\" />\n                          {formatDueDate(task.dueDate)}\n                        </span>\n                      )}\n                      {task.completed ? (\n                        <span className=\"text-xs text-muted-foreground flex items-center\">\n                          <CheckCircle2 className=\"h-3 w-3 mr-1\" />\n                          Tamamlandı\n                        </span>\n                      ) : (\n                        <span\n                          className={`text-xs px-2 py-1 rounded-full ${getPriorityBadgeClass(\n                            task.priority\n                          )}`}\n                        >\n                          {getPriorityText(task.priority)}\n                        </span>\n                      )}\n                      <span\n                        className={`text-xs px-2 py-1 rounded-full ${getCategoryBadgeClass(\n                          task.category\n                        )}`}\n                      >\n                        {getCategoryText(task.category)}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {task.completed ? (\n                    <button\n                      onClick={() => handleToggleTask(task.id)}\n                      className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n                      title=\"Geri al\"\n                      data-testid={`button-undo-task-${task.id}`}\n                    >\n                      <Undo2 className=\"h-4 w-4 text-muted-foreground\" />\n                    </button>\n                  ) : (\n                    <button\n                      onClick={() => handleEditTask(task)}\n                      className=\"p-2 hover:bg-secondary rounded-lg transition-colors\"\n                      title=\"Düzenle\"\n                      data-testid={`button-edit-task-${task.id}`}\n                    >\n                      <Edit2 className=\"h-4 w-4 text-muted-foreground\" />\n                    </button>\n                  )}\n                  <button\n                    onClick={() => handleDeleteTask(task.id)}\n                    className=\"p-2 hover:bg-destructive/10 rounded-lg transition-colors\"\n                    title=\"Sil\"\n                    data-testid={`button-delete-task-${task.id}`}\n                  >\n                    <Trash2 className=\"h-4 w-4 text-destructive\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n      \n      {/* Görev Modalını Düzenle */}\n      <EditTaskModal \n        open={isEditModalOpen}\n        onOpenChange={setIsEditModalOpen}\n        task={editingTask}\n      />\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\n","size_bytes":15567},"client/src/components/theme-provider.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem(\"theme\") as Theme;\n    return savedTheme || \"light\";\n  });\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1413},"client/src/components/todays-tasks-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Task } from \"@shared/schema\";\nimport { CheckCircle2, Circle, Plus, Calendar, PartyPopper } from \"lucide-react\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useState, useEffect } from \"react\";\n\nexport function TodaysTasksWidget() {\n  const { toast } = useToast();\n  const [celebratingTask, setCelebratingTask] = useState<string | null>(null);\n  const [showCompletionBar, setShowCompletionBar] = useState(false);\n  \n  // Kategori isimlerini düzgün formatta gösterecek fonksiyon\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"Matematik\";\n      case \"fizik\":\n        return \"Fizik\";\n      case \"kimya\":\n        return \"Kimya\";\n      case \"biyoloji\":\n        return \"Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return category;\n    }\n  };\n  \n  // Bugünün tarihini YYYY-AA-BB biçiminde al (TR ayarlarına uygun)\n  const today = new Date();\n  const year = today.getFullYear();\n  const month = (today.getMonth() + 1).toString().padStart(2, '0');\n  const day = today.getDate().toString().padStart(2, '0');\n  const todayStr = `${year}-${month}-${day}`;\n  \n  const { data: todaysData, isLoading } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", todayStr],\n    queryFn: async () => {\n      const response = await fetch(`/api/calendar/${todayStr}`);\n      if (!response.ok) throw new Error('Failed to fetch today\\'s tasks');\n      return response.json();\n    },\n  });\n\n  const toggleTaskMutation = useMutation({\n    mutationFn: (taskId: string) => \n      apiRequest(\"PATCH\", `/api/tasks/${taskId}/toggle`),\n    onSuccess: (_, taskId) => {\n      // Görev tamamlandı mı kontrol et\n      const task = tasks.find(t => t.id === taskId);\n      const wasCompleted = task?.completed;\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/calendar\", todayStr] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      \n      // Eğer görev şimdi tamamlandıysa celebration göster\n      if (!wasCompleted) {\n        setCelebratingTask(taskId);\n        setShowCompletionBar(true);\n        \n        toast({\n          title: \"🎉 Tebrikler!\",\n          description: \"Görev başarıyla tamamlandı!\",\n        });\n\n        // 3 saniye sonra celebration'ı kaldır\n        setTimeout(() => {\n          setCelebratingTask(null);\n          setShowCompletionBar(false);\n        }, 3000);\n      } else {\n        toast({\n          title: \"Görev güncellendi\",\n          description: \"Görev durumu başarıyla değiştirildi.\",\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Hata\",\n        description: \"Görev durumu değiştirilemedi.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const tasks = todaysData?.tasks || [];\n  const completedCount = tasks.filter(task => task.completed).length;\n  const totalCount = tasks.length;\n\n  if (isLoading) {\n    return (\n      <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-3 flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"animate-pulse\">\n          <div className=\"h-4 bg-muted rounded mb-2\"></div>\n          <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300 h-full flex flex-col relative overflow-hidden\">\n      {/* Completion Bar - Görev tamamlandığında gösterilir */}\n      {showCompletionBar && (\n        <div className=\"absolute top-0 left-0 right-0 bg-gradient-to-r from-green-500 via-emerald-500 to-green-500 h-2 z-10 animate-pulse\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-ping\"></div>\n        </div>\n      )}\n      \n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-foreground flex items-center\">\n          <Calendar className=\"h-5 w-5 mr-2 text-primary\" />\n          Bugün Yapılacaklar\n        </h3>\n        <div className=\"text-sm text-muted-foreground bg-muted/50 rounded-full px-3 py-1\" data-testid=\"text-today-counts\">\n          {completedCount}/{totalCount}\n        </div>\n      </div>\n\n      {tasks.length === 0 ? (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <Calendar className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n          <p className=\"text-sm\">Bugün hiç aktivite tamamlanmamış !</p>\n          <p className=\"text-xs mt-1\">Bugün için planlanan görevler henüz yok</p>\n        </div>\n      ) : (\n        <>\n          {/* İlerleme çubuğu */}\n          <div className=\"w-full bg-secondary rounded-full h-2 mb-4\">\n            <div \n              className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\"\n              style={{ width: `${totalCount > 0 ? (completedCount / totalCount) * 100 : 0}%` }}\n            ></div>\n          </div>\n\n          {/* Görev Listesi - Kutunun en altına kadar uzar */}\n          <div className={`space-y-3 flex-1 min-h-0 ${tasks.length > 7 ? 'overflow-y-auto' : 'overflow-hidden'} custom-scrollbar max-h-96`}>\n            {tasks.map((task) => (\n              <div\n                key={task.id}\n                className={`flex items-start gap-3 p-3 rounded-lg border transition-all duration-200 hover:bg-muted/50 relative ${\n                  celebratingTask === task.id \n                    ? 'bg-gradient-to-r from-green-100/80 to-emerald-100/80 dark:from-green-900/40 dark:to-emerald-900/40 border-green-300 dark:border-green-600 scale-105 shadow-lg' \n                    : task.completed \n                    ? 'bg-muted/30 border-muted' \n                    : 'bg-background border-border/50 hover:border-border'\n                }`}\n                style={{\n                  borderLeft: `4px solid ${task.color || '#8B5CF6'}`,\n                }}\n                data-testid={`list-task-${task.id}`}\n              >\n                {/* Celebration efekti - Enhanced */}\n                {celebratingTask === task.id && (\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-green-400/30 to-emerald-400/30 animate-pulse rounded-lg pointer-events-none\">\n                    <div className=\"absolute top-2 right-2 animate-bounce\">\n                      <PartyPopper className=\"h-5 w-5 text-green-600 drop-shadow-lg\" />\n                    </div>\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent animate-ping\"></div>\n                  </div>\n                )}\n                <button\n                  onClick={() => toggleTaskMutation.mutate(task.id)}\n                  className={`flex-shrink-0 transition-all duration-300 transform hover:scale-110 ${\n                    task.completed \n                      ? 'text-green-600 hover:text-green-500 drop-shadow-md' \n                      : 'text-muted-foreground hover:text-primary hover:drop-shadow-md'\n                  }`}\n                  disabled={toggleTaskMutation.isPending}\n                  data-testid={`button-toggle-task-${task.id}`}\n                >\n                  {task.completed ? (\n                    <CheckCircle2 className=\"h-5 w-5 animate-in fade-in-0 zoom-in-95 duration-200\" />\n                  ) : (\n                    <Circle className=\"h-5 w-5 hover:animate-pulse\" />\n                  )}\n                </button>\n                \n                <div className=\"flex-1 min-w-0\">\n                  <div className={`font-medium text-sm transition-all duration-200 ${\n                    task.completed \n                      ? 'line-through text-muted-foreground' \n                      : 'text-foreground'\n                  }`}>\n                    {task.title}\n                  </div>\n                  \n                  {task.description && (\n                    <div className={`text-xs mt-1 transition-all duration-200 ${\n                      task.completed \n                        ? 'line-through text-muted-foreground/70' \n                        : 'text-muted-foreground'\n                    }`}>\n                      {task.description.length > 80 \n                        ? `${task.description.substring(0, 80)}...` \n                        : task.description}\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-2 mt-2\">\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      task.priority === 'high' \n                        ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n                        : task.priority === 'medium'\n                        ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n                        : 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n                    }`}>\n                      {task.priority === 'high' ? 'Yüksek' : task.priority === 'medium' ? 'Orta' : 'Düşük'}\n                    </span>\n                    \n                    <span className=\"text-xs text-muted-foreground bg-muted/50 rounded-full px-2 py-1\">\n                      {getCategoryText(task.category)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Özet */}\n          {tasks.length > 0 && (\n            <div className=\"mt-auto pt-4 border-t border-border\">\n              <div className=\"text-xs text-muted-foreground text-center\">\n                {completedCount === totalCount \n                  ? \"🎉 Tüm günlük görevler tamamlandı!\" \n                  : `${totalCount - completedCount} görev kaldı`\n                }\n              </div>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":10990},"client/src/components/weather-widget.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface WeatherData {\n  location: string;\n  current: {\n    temperature: number;\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: string;\n    windDescription: string;\n    feelsLike: number;\n    pressure: number;\n    visibility: number;\n    precipitation: number;\n  };\n  hourlyForecast: Array<{\n    time: string;\n    hour: number;\n    temperature: number;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n    windDirection: number;\n    precipitation: number;\n  }>;\n  sunData: {\n    sunrise: string;\n    sunset: string;\n    dayLength: string;\n  };\n  forecast: Array<{\n    date: string;\n    dayName: string;\n    temperature: {\n      max: number;\n      min: number;\n    };\n    description: string;\n    emoji: string;\n    humidity: number;\n    windSpeed: number;\n  }>;\n  uvIndex: {\n    value: number;\n    level: string;\n    description: string;\n  };\n  airQuality: {\n    aqi: number;\n    level: string;\n    description: string;\n    components: {\n      pm2_5: number;\n      pm10: number;\n      o3: number;\n    };\n  } | null;\n  lifeIndices: {\n    exercise: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    clothing: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    travel: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    skin: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    driving: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n    comfort: {\n      level: string;\n      emoji: string;\n      description: string;\n    };\n  };\n}\n\nexport function WeatherWidget() {\n  return (\n    <div className=\"bg-card rounded-xl border border-border p-6 transition-colors duration-300\">\n      <h3 className=\"text-lg font-semibold text-foreground mb-3\">Hava Durumu</h3>\n      <div className=\"text-center\">\n        <div className=\"text-3xl mb-2\">🔧</div>\n        <div className=\"text-muted-foreground mb-2\">Hava durumu servisi güncelleniyor</div>\n        <div className=\"text-sm text-muted-foreground\">Yeni API entegrasyonu yapılıyor...</div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2509},"client/src/components/weekly-activity-summary.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, TrendingDown, BookOpen, Brain, CheckCircle, FlaskConical, Calendar, Activity } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { QuestionLog, Task, ExamResult } from \"@shared/schema\";\n\ninterface ActivityMetric {\n  label: string;\n  value: number;\n  icon: React.ComponentType<{ className?: string }>;\n  trend: number; // Positive for increase, negative for decrease\n  color: string;\n  bgColor: string;\n}\n\nexport function WeeklyActivitySummary() {\n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  // Tarih aralıklarını hesaplayın\n  const today = new Date();\n  const last7Days = new Date(today);\n  last7Days.setDate(today.getDate() - 7);\n  const previous7Days = new Date(today);\n  previous7Days.setDate(today.getDate() - 14);\n  \n  const formatDateForComparison = (date: Date) => date.toISOString().split('T')[0];\n  \n  const last7DaysStr = formatDateForComparison(last7Days);\n  const previous7DaysStr = formatDateForComparison(previous7Days);\n  const todayStr = formatDateForComparison(today);\n\n  // Aktivite metriklerini hesapla\n  const calculateActivityMetrics = (): ActivityMetric[] => {\n    // Son 7 günde çözülen sorular\n    const recentQuestions = questionLogs.filter(log => \n      log.study_date >= last7DaysStr && log.study_date <= todayStr\n    );\n    const previousQuestions = questionLogs.filter(log => \n      log.study_date >= previous7DaysStr && log.study_date < last7DaysStr\n    );\n    \n    const recentQuestionCount = recentQuestions.reduce((sum, log) => \n      sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n    );\n    const previousQuestionCount = previousQuestions.reduce((sum, log) => \n      sum + (Number(log.correct_count) || 0) + (Number(log.wrong_count) || 0) + (Number(log.blank_count) || 0), 0\n    );\n    const questionTrend = previousQuestionCount > 0 \n      ? ((recentQuestionCount - previousQuestionCount) / previousQuestionCount) * 100 \n      : recentQuestionCount > 0 ? 100 : 0;\n\n    // Son 7 günde tamamlanan görevler\n    const recentCompletedTasks = tasks.filter(task => \n      task.completed && task.completedAt && \n      new Date(task.completedAt).toISOString().split('T')[0] >= last7DaysStr\n    ).length;\n    const previousCompletedTasks = tasks.filter(task => \n      task.completed && task.completedAt && \n      new Date(task.completedAt).toISOString().split('T')[0] >= previous7DaysStr &&\n      new Date(task.completedAt).toISOString().split('T')[0] < last7DaysStr\n    ).length;\n    const taskTrend = previousCompletedTasks > 0 \n      ? ((recentCompletedTasks - previousCompletedTasks) / previousCompletedTasks) * 100 \n      : recentCompletedTasks > 0 ? 100 : 0;\n\n    // Son 7 günde eklenen sınav sonuçları\n    const recentExams = examResults.filter(exam => \n      exam.exam_date >= last7DaysStr && exam.exam_date <= todayStr\n    ).length;\n    const previousExams = examResults.filter(exam => \n      exam.exam_date >= previous7DaysStr && exam.exam_date < last7DaysStr\n    ).length;\n    const examTrend = previousExams > 0 \n      ? ((recentExams - previousExams) / previousExams) * 100 \n      : recentExams > 0 ? 100 : 0;\n\n    // Çalışma oturumları (sorularla birlikteki tüm tarihler)\n    const recentStudyDays = new Set(recentQuestions.map(log => log.study_date)).size;\n    const previousStudyDays = new Set(previousQuestions.map(log => log.study_date)).size;\n    const studyTrend = previousStudyDays > 0 \n      ? ((recentStudyDays - previousStudyDays) / previousStudyDays) * 100 \n      : recentStudyDays > 0 ? 100 : 0;\n\n    return [\n      {\n        label: \"Çözülen Sorular\",\n        value: recentQuestionCount,\n        icon: BookOpen,\n        trend: questionTrend,\n        color: \"text-blue-600\",\n        bgColor: \"bg-blue-50 dark:bg-blue-950/20\"\n      },\n      {\n        label: \"Tamamlanan Görevler\",\n        value: recentCompletedTasks,\n        icon: CheckCircle,\n        trend: taskTrend,\n        color: \"text-green-600\",\n        bgColor: \"bg-green-50 dark:bg-green-950/20\"\n      },\n      {\n        label: \"Çalışma Günü\",\n        value: recentStudyDays,\n        icon: Calendar,\n        trend: studyTrend,\n        color: \"text-purple-600\",\n        bgColor: \"bg-purple-50 dark:bg-purple-950/20\"\n      },\n      {\n        label: \"Deneme Sınavları\",\n        value: recentExams,\n        icon: FlaskConical,\n        trend: examTrend,\n        color: \"text-orange-600\",\n        bgColor: \"bg-orange-50 dark:bg-orange-950/20\"\n      }\n    ];\n  };\n\n  const metrics = calculateActivityMetrics();\n  const totalActivity = metrics.reduce((sum, metric) => sum + metric.value, 0);\n  const averageTrend = metrics.reduce((sum, metric) => sum + metric.trend, 0) / metrics.length;\n\n  return (\n    <Card className=\"bg-gradient-to-br from-card via-card to-card/80 rounded-xl border border-border shadow-lg transition-all duration-300 hover:shadow-xl\">\n      <CardHeader className=\"pb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 rounded-xl bg-gradient-to-br from-indigo-500/10 to-purple-500/10\">\n              <Activity className=\"h-6 w-6 text-indigo-600\" />\n            </div>\n            <div>\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-indigo-600 to-purple-600 bg-clip-text text-transparent\">\n                📈 Aktivitelerim\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\">Son 7 günlük genel bakış</p>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"flex items-center space-x-2\">\n              {averageTrend > 0 ? (\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              ) : averageTrend < 0 ? (\n                <TrendingDown className=\"h-4 w-4 text-red-500\" />\n              ) : null}\n              <Badge \n                variant={averageTrend > 0 ? \"default\" : averageTrend < 0 ? \"destructive\" : \"secondary\"}\n                className=\"text-xs\"\n              >\n                {averageTrend > 0 ? '+' : ''}{averageTrend.toFixed(0)}%\n              </Badge>\n            </div>\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              {totalActivity} toplam aktivite\n            </p>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          {metrics.map((metric, index) => {\n            const Icon = metric.icon;\n            return (\n              <div \n                key={index}\n                className={`${metric.bgColor} rounded-xl p-4 transition-all duration-200 hover:scale-105`}\n                data-testid={`metric-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <Icon className={`h-5 w-5 ${metric.color}`} />\n                  <div className=\"flex items-center space-x-1\">\n                    {metric.trend > 0 ? (\n                      <TrendingUp className=\"h-3 w-3 text-green-500\" />\n                    ) : metric.trend < 0 ? (\n                      <TrendingDown className=\"h-3 w-3 text-red-500\" />\n                    ) : null}\n                    <span className={`text-xs font-medium ${\n                      metric.trend > 0 ? 'text-green-600' : \n                      metric.trend < 0 ? 'text-red-600' : \n                      'text-muted-foreground'\n                    }`}>\n                      {metric.trend > 0 ? '+' : ''}{metric.trend.toFixed(0)}%\n                    </span>\n                  </div>\n                </div>\n                <div className=\"space-y-1\">\n                  <p className=\"text-2xl font-bold text-foreground\" data-testid={`value-${metric.label.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    {metric.value}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground font-medium\">\n                    {metric.label}\n                  </p>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        {totalActivity === 0 && (\n          <div className=\"mt-6 text-center py-8 text-muted-foreground\">\n            <Activity className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n            <p className=\"text-sm font-medium\">Henüz bu hafta aktivite yok</p>\n            <p className=\"text-xs mt-1\">Soru çözmeye veya görev eklemeye başla</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":9238},"client/src/components/weekly-progress-chart.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TrendingUp, BarChart3, Calendar, Crown, Zap, Sparkles, Activity } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface DaySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\nexport function WeeklyProgressChart() {\n  const [isVisible, setIsVisible] = useState(false);\n  const [hoveredDay, setHoveredDay] = useState<string | null>(null);\n  \n  const { data: summaryData = [], isLoading } = useQuery<DaySummary[]>({\n    queryKey: [\"/api/summary/daily\", { range: 7 }],\n    queryFn: () => fetch(\"/api/summary/daily?range=7\").then(res => res.json()),\n  });\n\n  useEffect(() => {\n    const timer = setTimeout(() => setIsVisible(true), 200);\n    return () => clearTimeout(timer);\n  }, []);\n\n  const formatDayName = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const dayNames = ['Paz', 'Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt'];\n    return dayNames[date.getDay()];\n  };\n\n  const getBarHeight = (tasksCompleted: number, maxTasks: number) => {\n    if (maxTasks === 0) return 0;\n    // Tamamlanan görevler için minimum görünür yükseklik sağlayın\n    return Math.max((tasksCompleted / maxTasks) * 100, tasksCompleted > 0 ? 15 : 0);\n  };\n\n  const getBarColor = (productivity: number) => {\n    if (productivity >= 80) return '#10b981'; // Yeşil\n    if (productivity >= 60) return '#f59e0b'; // Sarı\n    if (productivity >= 40) return '#f97316'; // Turuncu\n    if (productivity > 0) return '#ef4444';   // Kırmızı\n    return '#6b7280'; // Gri\n  };\n\n  // En aktif günümğü bul\n  const getMostActiveDay = () => {\n    if (!summaryData.length) return null;\n    const mostActive = summaryData.reduce((max, day) => \n      day.tasksCompleted > max.tasksCompleted ? day : max\n    );\n    return mostActive.tasksCompleted > 0 ? mostActive : null;\n  };\n\n  const formatFullDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    const months = ['Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran', \n                   'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'];\n    return `${date.getDate()} ${months[date.getMonth()]}`;\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden shadow-lg\">\n        {/* Animasyonlu Arka Plan Öğeleri */}\n        <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-blue-500/10 to-purple-600/10 rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-green-500/10 to-blue-600/10 rounded-full blur-2xl animate-pulse\"></div>\n        \n        <div className=\"relative z-10\">\n          <div className=\"flex items-center gap-3 mb-6\">\n            <div className=\"p-3 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl shadow-lg animate-pulse\">\n              <Activity className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-32 animate-pulse\"></div>\n              <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg w-20 mt-2 animate-pulse\"></div>\n            </div>\n          </div>\n          \n          <div className=\"space-y-4\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded-lg w-full mb-3\"></div>\n                <div className=\"h-12 bg-gray-200 dark:bg-gray-700 rounded-xl\"></div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const reversedData = [...summaryData].reverse(); // En eski tarihten en yeni tarihe göster\n  const maxTasks = Math.max(...reversedData.map(day => day.tasksCompleted), 1);\n  const totalTasksCompleted = reversedData.reduce((sum, day) => sum + day.tasksCompleted, 0);\n  const averageProductivity = reversedData.length > 0 \n    ? Math.round(reversedData.reduce((sum, day) => sum + day.productivity, 0) / reversedData.length)\n    : 0;\n  const activeDays = reversedData.filter(day => day.tasksCompleted > 0).length;\n  const mostActiveDay = getMostActiveDay();\n\n  return (\n    <div className={`group bg-gradient-to-br from-white/80 to-white/60 dark:from-gray-900/80 dark:to-gray-800/60 backdrop-blur-xl rounded-2xl border border-white/20 dark:border-gray-700/30 p-8 relative overflow-hidden hover:scale-[1.01] transition-all duration-700 shadow-lg hover:shadow-2xl ${isVisible ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-8'}`} data-testid=\"weekly-activity-chart\">\n      {/* Animasyonlu Arka Plan Öğeleri */}\n      <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-gradient-to-br from-blue-500/15 to-purple-600/15 rounded-full blur-3xl group-hover:scale-110 transition-transform duration-1000\"></div>\n      <div className=\"absolute -bottom-10 -left-10 w-32 h-32 bg-gradient-to-tr from-green-500/10 to-blue-600/10 rounded-full blur-2xl group-hover:scale-110 transition-transform duration-1000\"></div>\n      \n      {/* Işıltılı Animasyon */}\n      <div className=\"absolute top-6 right-6 opacity-0 group-hover:opacity-100 transition-opacity duration-500\">\n        <Sparkles className=\"h-5 w-5 text-yellow-500 animate-pulse\" />\n      </div>\n\n      <div className=\"relative z-10\">\n        {/* Geliştirilmiş Başlık */}\n        <div className=\"flex items-center justify-between mb-8\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"p-3 bg-gradient-to-br from-purple-500 to-blue-600 rounded-xl shadow-lg\">\n              <Activity className=\"h-6 w-6 text-white\" />\n            </div>\n            <div>\n              <h3 className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">\n                Aktivitelerim\n              </h3>\n              <p className=\"text-sm text-muted-foreground\">Son 7 günün detayı</p>\n            </div>\n          </div>\n          \n          {/* En Aktif Gün Rozeti(dümenden) */}\n          {mostActiveDay && (\n            <div className=\"bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/30 dark:to-orange-900/30 rounded-xl p-4 border border-yellow-200/50 dark:border-yellow-700/30 min-w-[200px]\">\n              <div className=\"flex items-center gap-2 mb-1\">\n                <Crown className=\"h-4 w-4 text-yellow-600 dark:text-yellow-400\" />\n                <span className=\"text-xs font-medium text-yellow-700 dark:text-yellow-300\">En Aktif Gün</span>\n              </div>\n              <div className=\"font-bold text-yellow-800 dark:text-yellow-200\" data-testid=\"most-active-day\">\n                {formatFullDate(mostActiveDay.date)}\n              </div>\n              <div className=\"text-xs text-yellow-600 dark:text-yellow-400\">\n                {mostActiveDay.tasksCompleted} görev • %{mostActiveDay.productivity} verimli\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Geliştirilmiş Özet İstatistikleri */}\n        <div className=\"grid grid-cols-3 gap-6 mb-8\">\n          <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-blue-200/30 dark:border-blue-700/30 text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900/30 rounded-lg\">\n                <BarChart3 className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-black text-blue-600 dark:text-blue-400 mb-1\" data-testid=\"total-tasks-completed\">\n              {totalTasksCompleted}\n            </div>\n            <div className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Toplam Görev</div>\n          </div>\n          \n          <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-green-200/30 dark:border-green-700/30 text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900/30 rounded-lg\">\n                <Zap className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-black text-green-600 dark:text-green-400 mb-1\" data-testid=\"average-productivity\">\n              {averageProductivity}%\n            </div>\n            <div className=\"text-sm font-medium text-green-700 dark:text-green-300\">Ortalama Verimlilik</div>\n          </div>\n          \n          <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-xl p-4 backdrop-blur-sm border border-purple-200/30 dark:border-purple-700/30 text-center\">\n            <div className=\"flex items-center justify-center gap-2 mb-2\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900/30 rounded-lg\">\n                <Calendar className=\"h-4 w-4 text-purple-600 dark:text-purple-400\" />\n              </div>\n            </div>\n            <div className=\"text-2xl font-black text-purple-600 dark:text-purple-400 mb-1\">\n              {activeDays}<span className=\"text-lg\">/7</span>\n            </div>\n            <div className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">Aktif Gün</div>\n          </div>\n        </div>\n\n        {/* Geliştirilmiş Grafik */}\n        <div className=\"space-y-4\" data-testid=\"progress-chart\">\n          {reversedData.length === 0 || (totalTasksCompleted === 0 && averageProductivity === 0) ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <div className=\"relative mb-6\">\n                <Calendar className=\"h-16 w-16 mx-auto opacity-30\" />\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"w-8 h-8 border-2 border-dashed border-gray-300 rounded-full animate-spin\"></div>\n                </div>\n              </div>\n              <p className=\"font-medium text-lg mb-2\">Henüz aktivite verisi bulunmuyor</p>\n              <p className=\"text-sm\">Görev tamamlayarak ilerlemenizi takip etmeye başlayın</p>\n              <div className=\"mt-4 px-6 py-2 bg-gradient-to-r from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 rounded-full text-xs font-medium text-purple-700 dark:text-purple-300 inline-block\">\n                İlk görevinizi eklemeye hazır mısınız?\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {reversedData.map((day, index) => {\n                const barWidth = Math.max((day.tasksCompleted / Math.max(maxTasks, 1)) * 100, day.tasksCompleted > 0 ? 15 : 0);\n                const isHighlighted = mostActiveDay && day.date === mostActiveDay.date;\n                const isHovered = hoveredDay === day.date;\n                \n                return (\n                  <div \n                    key={day.date} \n                    className={`flex items-center gap-4 p-3 rounded-xl transition-all duration-300 ${isHighlighted ? 'bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700' : isHovered ? 'bg-gray-50 dark:bg-gray-800/50' : ''}`}\n                    data-testid={`progress-bar-${index}`}\n                    onMouseEnter={() => setHoveredDay(day.date)}\n                    onMouseLeave={() => setHoveredDay(null)}\n                  >\n                    {/* Gün etiketi ile geliştirilmiş stil */}\n                    <div className=\"text-center min-w-[50px]\">\n                      <div className={`text-lg font-bold ${isHighlighted ? 'text-yellow-700 dark:text-yellow-300' : 'text-foreground'}`}>\n                        {formatDayName(day.date)}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        {new Date(day.date).getDate()}\n                      </div>\n                    </div>\n\n                    {/* Geliştirilmiş Yatay Çubuk */}\n                    <div className=\"flex-1 relative\">\n                      <div className={`h-8 rounded-xl overflow-hidden ${isHighlighted ? 'bg-yellow-100 dark:bg-yellow-900/30' : 'bg-gray-100 dark:bg-gray-800/50'} shadow-inner`}>\n                        <div\n                          className={`h-full rounded-xl transition-all duration-700 flex items-center justify-between px-3 ${isHighlighted ? 'shadow-lg' : ''}`}\n                          style={{\n                            width: `${barWidth}%`,\n                            background: `linear-gradient(135deg, ${getBarColor(day.productivity)}dd, ${getBarColor(day.productivity)})`,\n                            transform: isHovered ? 'scale(1.02)' : 'scale(1)',\n                          }}\n                        >\n                          {day.tasksCompleted > 0 && (\n                            <>\n                              <span className=\"text-sm font-bold text-white drop-shadow-sm\">\n                                {day.tasksCompleted} görev\n                              </span>\n                              {isHighlighted && <Crown className=\"h-4 w-4 text-yellow-200\" />}\n                            </>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    {/* Gelişmiş Verimlilik Rozeti */}\n                    <div className={`min-w-[60px] text-center px-3 py-1 rounded-lg text-sm font-medium ${\n                      day.productivity >= 80 ? 'bg-green-100 text-green-700 dark:bg-green-900/30 dark:text-green-300' :\n                      day.productivity >= 60 ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/30 dark:text-yellow-300' :\n                      day.productivity >= 40 ? 'bg-orange-100 text-orange-700 dark:bg-orange-900/30 dark:text-orange-300' :\n                      day.productivity > 0 ? 'bg-red-100 text-red-700 dark:bg-red-900/30 dark:text-red-300' :\n                      'bg-gray-100 text-gray-600 dark:bg-gray-800/50 dark:text-gray-400'\n                    }`}>\n                      {day.productivity}%\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n\n        {/* Geliştirilmiş Açıklama */}\n        <div className=\"mt-6 pt-6 border-t border-white/20 dark:border-gray-700/30\">\n          <div className=\"flex items-center justify-center gap-6 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-green-500 shadow-sm\"></div>\n              <span className=\"text-green-700 dark:text-green-300 font-medium\">Mükemmel (80%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-yellow-500 shadow-sm\"></div>\n              <span className=\"text-yellow-700 dark:text-yellow-300 font-medium\">İyi (60%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-orange-500 shadow-sm\"></div>\n              <span className=\"text-orange-700 dark:text-orange-300 font-medium\">Orta (40%+)</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-red-500 shadow-sm\"></div>\n              <span className=\"text-red-700 dark:text-red-300 font-medium\">Geliştirilmeli</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":15978},"client/src/hooks/use-mobile.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":829},"client/src/hooks/use-toast.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Yan etkiler ! - Bu, dismissToast() eylemine dönüştürülebilir.\n      // ancak basitlik için burada tutacağım\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":4158},"client/src/lib/queryClient.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n      // Yinelenen istekleri önleyin\n      refetchOnMount: false,\n      refetchOnReconnect: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n\n// Belirli veri türleri için optimizasyonlar\nexport const getQueryOptions = (key: string) => {\n  const optimizations: Record<string, any> = {\n    // Hava durumu verileri - 5 dakika önbellek\n    '/api/weather': {\n      staleTime: 5 * 60 * 1000, // 5 dakika\n      cacheTime: 10 * 60 * 1000, // 10 dakika\n    },\n    // Takvim verileri - 1 dakika önbellek\n    '/api/calendar': {\n      staleTime: 1 * 60 * 1000, // 1 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika\n    },\n    // Flashcards - 30 saniye önbellek\n    '/api/flashcards': {\n      staleTime: 30 * 1000, // 30 saniye\n      cacheTime: 2 * 60 * 1000, // 2 dakika\n    },\n    // Analytics verileri - daha agresif önbellekleme\n    '/api/question-logs': {\n      staleTime: 2 * 60 * 1000, // 2 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika\n    },\n    '/api/exam-results': {\n      staleTime: 2 * 60 * 1000, // 2 dakika\n      cacheTime: 5 * 60 * 1000, // 5 dakika   \n    },\n  };\n\n  // Eşleşen optimizasyonu bul\n  const matchedKey = Object.keys(optimizations).find(pattern => key.startsWith(pattern));\n  return matchedKey ? optimizations[matchedKey] : {};\n};\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2868},"client/src/lib/utils.ts":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":430},"client/src/pages/dashboard.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useEffect, useMemo, useCallback, memo } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Header } from \"@/components/header\";\nimport { TrendingUp, BarChart3, Target, Brain, BookOpen, Plus, CalendarDays, X, FlaskConical, Trash2, AlertTriangle, Sparkles, Award, Clock, Zap, Edit, Search, Tag, BookX, Lightbulb, Eye, Calendar } from \"lucide-react\";\nimport { Task, Goal, QuestionLog, InsertQuestionLog, ExamResult, InsertExamResult } from \"@shared/schema\";\nimport { DashboardSummaryCards } from \"@/components/dashboard-summary-cards\";\nimport { AdvancedCharts } from \"@/components/advanced-charts\";\nimport { QuestionAnalysisCharts } from \"@/components/question-analysis-charts\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Başlık harflerinin dönüştürülmesi için yardımcı işlev\nconst toTitleCase = (str: string): string => {\n  return str.trim()\n    .toLowerCase()\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(' ');\n};\n\ninterface DailySummary {\n  date: string;\n  tasksCompleted: number;\n  totalTasks: number;\n  moods: any[];\n  productivity: number;\n}\n\ninterface TopicStats {\n  topic: string;\n  wrongMentions: number;\n  totalSessions: number;\n  mentionFrequency: number;\n}\n\ninterface PriorityTopic {\n  topic: string;\n  priority: number;\n  lastSeen: string;\n  improvementNeeded: boolean;\n}\n\nexport default function Dashboard() {\n  const [showQuestionDialog, setShowQuestionDialog] = useState(false);\n  const [editingQuestionLog, setEditingQuestionLog] = useState<QuestionLog | null>(null);\n  const [newQuestion, setNewQuestion] = useState({ \n    exam_type: \"TYT\", \n    subject: \"Türkçe\", \n    correct_count: \"\", \n    wrong_count: \"\", \n    blank_count: \"\", \n    study_date: new Date().toISOString().split('T')[0],\n    wrong_topics: [] as Array<{\n      topic: string;\n      difficulty: 'kolay' | 'orta' | 'zor';\n      category: 'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik';\n      notes?: string;\n    }>,\n    time_spent_minutes: \"\"\n  });\n  const [wrongTopicInput, setWrongTopicInput] = useState(\"\");\n  const [selectedTopicDifficulty, setSelectedTopicDifficulty] = useState<'kolay' | 'orta' | 'zor'>('kolay');\n  const [selectedTopicCategory, setSelectedTopicCategory] = useState<'kavram' | 'hesaplama' | 'analiz' | 'dikkatsizlik'>('kavram');\n  const [showExamDialog, setShowExamDialog] = useState(false);\n  const [newExamResult, setNewExamResult] = useState({ \n    exam_name: \"\", \n    exam_date: new Date().toISOString().split('T')[0], \n    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n    subjects: {\n      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n    }\n  });\n  const [currentWrongTopics, setCurrentWrongTopics] = useState<{[key: string]: string}>({});\n  const [selectedHeatmapDay, setSelectedHeatmapDay] = useState<{\n    date: string;\n    count: number;\n    questionCount: number;\n    taskCount: number;\n    intensity: number;\n    dayActivities: {\n      questions: any[];\n      tasks: any[];\n      exams: any[];\n    };\n  } | null>(null);\n\n  // Aylık Rapor Modal Durumu\n  const [showReportModal, setShowReportModal] = useState(false);\n  const [reportContactInfo, setReportContactInfo] = useState({\n    email: \"\",\n    phone: \"\"\n  });\n\n  // Tüm mutasyonları sil\n  const deleteAllQuestionLogsMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/question-logs/all\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Tüm soru kayıtları silindi\", description: \"Tüm soru çözüm kayıtlarınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kayıtları silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteAllExamResultsMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", \"/api/exam-results/all\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"🗑️ Tüm denemeler silindi\", description: \"Tüm deneme sınav sonuçlarınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Denemeler silinemedi.\", variant: \"destructive\" });\n    },\n  });\n  const { toast } = useToast();\n\n  const { data: tasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n\n  const { data: dailySummary = [] } = useQuery<DailySummary[]>({\n    queryKey: [\"/api/summary/daily\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  const { data: topicStats = [] } = useQuery<TopicStats[]>({\n    queryKey: [\"/api/topics/stats\"],\n  });\n\n  const { data: priorityTopics = [] } = useQuery<PriorityTopic[]>({\n    queryKey: [\"/api/topics/priority\"],\n  });\n\n  // Gereksiz yeniden render işlemlerini önlemek için useMemo ile optimize edilmiş hesaplamalar\n  const memoizedStats = useMemo(() => {\n    const totalQuestions = questionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.correct_count) || 0) + (parseInt(log.wrong_count) || 0) + (parseInt(log.blank_count) || 0);\n    }, 0);\n\n    const totalCorrect = questionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.correct_count) || 0);\n    }, 0);\n\n    const totalWrong = questionLogs.reduce((sum, log) => {\n      return sum + (parseInt(log.wrong_count) || 0);\n    }, 0);\n\n    const averageAccuracy = totalQuestions > 0 ? (totalCorrect / totalQuestions) * 100 : 0;\n    \n    return {\n      totalQuestions,\n      totalCorrect,\n      totalWrong,\n      averageAccuracy\n    };\n  }, [questionLogs]);\n\n  const memoizedExamStats = useMemo(() => {\n    const totalExams = examResults.length;\n    const tytExams = examResults.filter(exam => exam.tyt_net && parseFloat(exam.tyt_net) > 0).length;\n    const aytExams = examResults.filter(exam => exam.ayt_net && parseFloat(exam.ayt_net) > 0).length;\n    \n    const lastTytNet = examResults\n      .filter(exam => exam.tyt_net && parseFloat(exam.tyt_net) > 0)\n      .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())[0]?.tyt_net || \"0\";\n    \n    const lastAytNet = examResults\n      .filter(exam => exam.ayt_net && parseFloat(exam.ayt_net) > 0)\n      .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())[0]?.ayt_net || \"0\";\n\n    return {\n      totalExams,\n      tytExams,\n      aytExams,\n      lastTytNet: parseFloat(lastTytNet),\n      lastAytNet: parseFloat(lastAytNet)\n    };\n  }, [examResults]);\n\n\n  const createQuestionLogMutation = useMutation({\n    mutationFn: (data: InsertQuestionLog) => apiRequest(\"POST\", \"/api/question-logs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"✅ Soru kaydı eklendi\", description: \"Soru çözüm kaydınız eklendi ve analiz güncellendi!\" });\n      setShowQuestionDialog(false);\n      setNewQuestion({ \n        exam_type: \"TYT\", \n        subject: \"Türkçe\", \n        correct_count: \"\", \n        wrong_count: \"\", \n        blank_count: \"\", \n        study_date: new Date().toISOString().split('T')[0],\n        wrong_topics: [],\n        time_spent_minutes: \"\"\n      });\n      setWrongTopicInput(\"\");\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const deleteQuestionLogMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(\"DELETE\", `/api/question-logs/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      toast({ title: \"🗑️ Soru kaydı silindi\", description: \"Soru çözüm kaydınız başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  const updateQuestionLogMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertQuestionLog> }) => \n      apiRequest(\"PUT\", `/api/question-logs/${id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/question-logs\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/topics/priority\"] });\n      setEditingQuestionLog(null);\n      setShowQuestionDialog(false);\n      toast({ title: \"📝 Soru kaydı güncellendi\", description: \"Soru çözüm kaydınız başarıyla güncellendi.\" });\n    },\n    onError: () => {\n      toast({ title: \"❌ Hata\", description: \"Soru kaydı güncellenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const createExamResultMutation = useMutation({\n    mutationFn: (data: InsertExamResult) => apiRequest(\"POST\", \"/api/exam-results\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu eklendi\", description: \"Deneme sınav sonucunuz kaydedildi.\" });\n      setShowExamDialog(false);\n      setNewExamResult({ \n        exam_name: \"\", \n        exam_date: new Date().toISOString().split('T')[0], \n        exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n        subjects: {\n          turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n          biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n        }\n      });\n      setCurrentWrongTopics({}); // Tüm yanlış konu giriş alanlarını temizle\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu eklenemedi.\", variant: \"destructive\" });\n    },\n  });\n  \n  const deleteExamResultMutation = useMutation({\n    mutationFn: (examId: string) => apiRequest(\"DELETE\", `/api/exam-results/${examId}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-results\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/exam-subject-nets\"] });\n      toast({ title: \"Deneme sonucu silindi\", description: \"Deneme sınav sonucunuz başarıyla silindi.\" });\n    },\n    onError: () => {\n      toast({ title: \"Hata\", description: \"Deneme sonucu silinemedi.\", variant: \"destructive\" });\n    },\n  });\n\n  // Gereksiz yeniden render işlemlerini önlemek için useCallback ile optimize edilmiş olay işleyicileri\n  const handleQuestionLogSubmit = useCallback(() => {\n    const questionData: InsertQuestionLog = {\n      exam_type: newQuestion.exam_type,\n      subject: newQuestion.subject,\n      correct_count: newQuestion.correct_count,\n      wrong_count: newQuestion.wrong_count,\n      blank_count: newQuestion.blank_count,\n      study_date: newQuestion.study_date,\n      wrong_topics: JSON.stringify(newQuestion.wrong_topics),\n      time_spent_minutes: newQuestion.time_spent_minutes\n    };\n\n    if (editingQuestionLog) {\n      updateQuestionLogMutation.mutate({ id: editingQuestionLog.id, data: questionData });\n    } else {\n      createQuestionLogMutation.mutate(questionData);\n    }\n  }, [newQuestion, editingQuestionLog, updateQuestionLogMutation, createQuestionLogMutation]);\n\n  const handleResetQuestionForm = useCallback(() => {\n    setNewQuestion({ \n      exam_type: \"TYT\", \n      subject: \"Türkçe\", \n      correct_count: \"\", \n      wrong_count: \"\", \n      blank_count: \"\", \n      study_date: new Date().toISOString().split('T')[0],\n      wrong_topics: [],\n      time_spent_minutes: \"\"\n    });\n    setWrongTopicInput(\"\");\n    setEditingQuestionLog(null);\n    setShowQuestionDialog(false);\n  }, []);\n\n  const handleAddWrongTopic = useCallback(() => {\n    if (wrongTopicInput.trim()) {\n      const topic = {\n        topic: toTitleCase(wrongTopicInput.trim()),\n        difficulty: selectedTopicDifficulty,\n        category: selectedTopicCategory,\n        notes: \"\"\n      };\n      setNewQuestion(prev => ({\n        ...prev,\n        wrong_topics: [...prev.wrong_topics, topic]\n      }));\n      setWrongTopicInput(\"\");\n    }\n  }, [wrongTopicInput, selectedTopicDifficulty, selectedTopicCategory]);\n\n  const handleRemoveWrongTopic = useCallback((index: number) => {\n    setNewQuestion(prev => ({\n      ...prev,\n      wrong_topics: prev.wrong_topics.filter((_, i) => i !== index)\n    }));\n  }, []);\n\n  const handleOpenQuestionDialog = useCallback(() => {\n    // Diyalog penceresini açarken tarihi her zaman bugüne güncelle\n    setNewQuestion(prev => ({\n      ...prev,\n      study_date: new Date().toISOString().split('T')[0] // Bugünün tarihine ayarla\n    }));\n    setShowQuestionDialog(true);\n  }, []);\n\n  const handleExamResultSubmit = useCallback(() => {\n    // TYT Konuları: Türkçe, Sosyal, Matematik, Fen\n    const tytSubjects = ['turkce', 'sosyal', 'matematik', 'fen'];\n    // AYT Konuları: Matematik, Fizik, Kimya, Biyoloji\n    const aytSubjects = ['matematik', 'fizik', 'kimya', 'biyoloji'];\n    \n    // TYT Net Hesapla\n    let tytNet = 0;\n    tytSubjects.forEach(subjectKey => {\n      const subject = newExamResult.subjects[subjectKey];\n      if (subject) {\n        const correct = parseInt(subject.correct) || 0;\n        const wrong = parseInt(subject.wrong) || 0;\n        tytNet += correct - (wrong * 0.25);\n      }\n    });\n    \n    // AYT Net Hesapla\n    let aytNet = 0;\n    aytSubjects.forEach(subjectKey => {\n      const subject = newExamResult.subjects[subjectKey];\n      if (subject) {\n        const correct = parseInt(subject.correct) || 0;\n        const wrong = parseInt(subject.wrong) || 0;\n        aytNet += correct - (wrong * 0.25);\n      }\n    });\n    \n    createExamResultMutation.mutate({\n      exam_name: newExamResult.exam_name,\n      exam_date: newExamResult.exam_date,\n      exam_type: newExamResult.exam_type, // Kritik: TYT/AYT ayrımı için exam_type'ı dahil et\n      tyt_net: Math.max(0, tytNet).toFixed(2), // Negatif olmamasını sağla ve 2 ondalık basamak\n      ayt_net: Math.max(0, aytNet).toFixed(2), // Negatif olmamasını sağla ve 2 ondalık basamak\n      subjects_data: JSON.stringify(newExamResult.subjects)\n    });\n  }, [newExamResult, createExamResultMutation]);\n\n  // Subject options based on TYT/AYT\n  const getSubjectOptions = (examType: string) => {\n    if (examType === \"TYT\") {\n      return [\"Türkçe\", \"Sosyal Bilimler\", \"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    } else {\n      return [\"Matematik\", \"Fizik\", \"Kimya\", \"Biyoloji\"];\n    }\n  };\n\n  // Yıllık ısı haritası verilerini Ocak ayından mevcut tarihe kadar oluştur\n  const generateYearlyHeatmapData = () => {\n    const data = [];\n    const today = new Date();\n    const currentYear = today.getFullYear();\n    \n    // Bu yılın 1 Ocak tarihinden itibaren başlayın.\n    const startDate = new Date(currentYear, 0, 1); // ocak ayı 0 indekstir.\n    \n    // 1 Ocak'tan bugüne kadar olan verileri oluştur (bugün dahil)\n    const currentDate = new Date(startDate);\n    const todayDateStr = today.getFullYear() + '-' + \n      String(today.getMonth() + 1).padStart(2, '0') + '-' + \n      String(today.getDate()).padStart(2, '0');\n    \n    // Bugünü de dahil edene kadar devam edin\n    while (currentDate.toISOString().split('T')[0] <= todayDateStr) {\n      const dateStr = currentDate.toISOString().split('T')[0];\n      \n      // Bu gün için aktivite yoğunluğunu hesaplayın\n      const dayQuestions = questionLogs.filter(log => log.study_date === dateStr);\n      const dayTasks = tasks.filter(task => {\n        if (!task.completedAt) return false;\n        const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n        return completedDate === dateStr;\n      });\n      \n      const studyIntensity = Math.min((dayQuestions.length * 2 + dayTasks.length) / 10, 1);\n      \n      // Bugün olup olmadığını kontrol et - Sabit karşılaştırma\n      const isToday = dateStr === todayDateStr;\n      \n      data.push({\n        date: dateStr,\n        day: currentDate.getDate(),\n        month: currentDate.getMonth(),\n        dayOfWeek: currentDate.getDay(), // 0 = Pazar, 1 = Pazartesi, vsvs.\n        dayOfWeekISO: currentDate.getDay() === 0 ? 7 : currentDate.getDay(), // 1 = Pazartesi, 7 = Pazar\n        intensity: studyIntensity,\n        count: dayQuestions.length + dayTasks.length,\n        questionCount: dayQuestions.length,\n        taskCount: dayTasks.length,\n        isToday: isToday\n      });\n      \n      // Bir sonraki güne geç\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return data;\n  };\n\n  // Isı haritası verilerini haftalara organize et (Pazartesi'den Pazar'a)\n  const organizeHeatmapIntoWeeks = (data: any[]) => {\n    const weeks = [];\n    \n    if (data.length === 0) return weeks;\n    \n    // Tarihe göre hızlı arama için bir harita oluşturun\n    const dateMap = new Map();\n    data.forEach(day => {\n      dateMap.set(day.date, day);\n    });\n    \n    // İlk tarihi bulun ve o haftanın Pazartesi gününü hesaplayın.\n    const firstDate = new Date(data[0].date);\n    const firstDayOfWeek = firstDate.getDay(); // 0 = Pazar, 1 = Pazartesi, ...\n    const daysToMonday = firstDayOfWeek === 0 ? 6 : firstDayOfWeek - 1; // Pazartesi'ye geri gitmek için günleri hesaplayın\n\n    // İlk haftanın Pazartesi gününden başlayın\n    const startDate = new Date(firstDate);\n    startDate.setDate(firstDate.getDate() - daysToMonday);\n    \n    // Son tarihi bulun ve o haftanın Pazar gününü hesaplayın.\n    const lastDate = new Date(data[data.length - 1].date);\n    const lastDayOfWeek = lastDate.getDay();\n    const daysToSunday = lastDayOfWeek === 0 ? 0 : 7 - lastDayOfWeek; // Pazar'a gitmek için günleri hesaplayın\n\n    const endDate = new Date(lastDate);\n    endDate.setDate(lastDate.getDate() + daysToSunday);\n    \n    // Pazartesi başlangıçlı ve Pazar bitişli haftalar oluşturun\n    const currentDate = new Date(startDate);\n    \n    while (currentDate <= endDate) {\n      const week = [];\n      \n      // Bu hafta için 7 gün oluşturun (Pazartesi'den Pazar'a)\n      for (let i = 0; i < 7; i++) {\n        const dateStr = currentDate.toISOString().split('T')[0];\n        const dayData = dateMap.get(dateStr);\n        \n        week.push(dayData || null);\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n      \n      weeks.push(week);\n    }\n    \n    return weeks;\n  };\n\n  const yearlyHeatmapData = generateYearlyHeatmapData();\n  const heatmapWeeks = organizeHeatmapIntoWeeks(yearlyHeatmapData);\n\n  // Isı haritası gün tıklamasını işleme\n  const handleHeatmapDayClick = (day: any) => {\n    const dayQuestions = questionLogs.filter(log => log.study_date === day.date);\n    const dayTasks = tasks.filter(task => {\n      if (!task.completedAt) return false;\n      const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n      return completedDate === day.date;\n    });\n    const dayExams = examResults.filter(exam => exam.exam_date === day.date);\n    \n    setSelectedHeatmapDay({\n      ...day,\n      dayActivities: {\n        questions: dayQuestions,\n        tasks: dayTasks,\n        exams: dayExams\n      }\n    });\n  };\n\n\n  // Son etkinlikler (son 10 öğe birleştirilmiş)\n  const recentActivities = [\n    ...questionLogs.slice(0, 5).map(log => ({\n      type: 'question',\n      title: `${log.exam_type} ${log.subject} - ${log.correct_count} doğru`,\n      date: log.study_date,\n      icon: Brain\n    })),\n    ...examResults.slice(0, 5).map(exam => ({\n      type: 'exam',\n      title: `${exam.exam_name} - TYT: ${exam.tyt_net}`,\n      date: exam.exam_date,\n      icon: BarChart3\n    })),\n    ...tasks.filter(t => t.completed).slice(0, 5).map(task => ({\n      type: 'task',\n      title: task.title,\n      date: task.createdAt || new Date().toISOString(),\n      icon: Target\n    }))\n  ].sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()).slice(0, 8);\n\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      <Header onReportCounterClick={() => setShowReportModal(true)} />\n      \n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Modern Kontrol Paneli Başlığı */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            📊 Raporlarım\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Çalışma verilerim için kapsamlı analiz ve kişiselleştirilmiş sayfa</p>\n        </div>\n\n        {/* Özet Kartları */}\n        <DashboardSummaryCards />\n        \n        {/* Geliştirilmiş Çalışma Isı Haritası - GitHub Stili */}\n        <div className=\"mb-8\">\n          <Card className=\"bg-gradient-to-br from-purple-50/50 via-card to-indigo-50/50 dark:from-purple-950/30 dark:via-card dark:to-indigo-950/30 backdrop-blur-sm border-2 border-purple-200/30 dark:border-purple-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-500/10 to-indigo-500/10 rounded-t-lg border-b border-purple-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent flex items-center gap-2\">\n                <CalendarDays className=\"h-6 w-6 text-purple-500\" />\n                📈 Aylık Çalışma Heatmap\n              </CardTitle>\n              <p className=\"text-sm text-purple-600/70 dark:text-purple-400/70 font-medium\">Aktif olan günler renk paletine göre parlar.</p>\n            </CardHeader>\n            <CardContent className=\"p-6\">\n              {/* Taşmayı önlemek için optimize edilmiş konteyner */}\n              <div className=\"w-full overflow-hidden\">\n                <div className=\"flex flex-col items-center max-w-full\">\n                  {/* Konteyner genişliğine göre optimize edilmiş ay etiketleri */}\n                  <div className=\"w-full mb-4\">\n                    <div className=\"flex justify-start\">\n                      <div className=\"w-10\"></div> {/* Gün etiketleri için alan */}\n                      <div className=\"flex-1 relative h-8\">\n                        {(() => {\n                          const monthNames = [\n                            'Ocak', 'Şubat', 'Mart', 'Nisan', 'Mayıs', 'Haziran',\n                            'Temmuz', 'Ağustos', 'Eylül', 'Ekim', 'Kasım', 'Aralık'\n                          ];\n                          const currentMonth = new Date().getMonth();\n                          const monthLabels = [];\n                          \n                          // Her ayın hangi haftaları kapsadığını hesaplayın\n                          const monthWeekMap = new Map();\n                          \n                          heatmapWeeks.forEach((week, weekIndex) => {\n                            week.forEach(day => {\n                              if (day && day.month !== undefined) {\n                                const monthKey = day.month;\n                                if (!monthWeekMap.has(monthKey)) {\n                                  monthWeekMap.set(monthKey, { start: weekIndex, end: weekIndex });\n                                } else {\n                                  monthWeekMap.get(monthKey).end = weekIndex;\n                                }\n                              }\n                            });\n                          });\n                          \n                          // Konteynere sığan ay etiketleri oluşturun\n                          monthWeekMap.forEach((range, monthIndex) => {\n                            const startWeek = range.start;\n                            const endWeek = range.end;\n                            const centerWeek = Math.floor((startWeek + endWeek) / 2);\n                            const leftPercentage = (centerWeek / Math.max(heatmapWeeks.length - 1, 1)) * 100;\n                            const isCurrentMonth = monthIndex === currentMonth;\n                            const weekSpan = endWeek - startWeek + 1;\n                            \n                            // Yeterli alan varsa ay etiketlerini göster\n                            if (weekSpan >= 1) {\n                              monthLabels.push(\n                                <div \n                                  key={`month-${monthIndex}`} \n                                  className={`absolute text-xs font-semibold px-2 py-1 rounded-lg transition-all duration-300 transform -translate-x-1/2 ${\n                                    isCurrentMonth \n                                      ? 'text-white bg-purple-500 border border-purple-400 shadow-lg' \n                                      : 'text-gray-700 dark:text-gray-300 bg-white/80 dark:bg-gray-800/80 border border-gray-300 dark:border-gray-600'\n                                  }`}\n                                  style={{ \n                                    left: `${leftPercentage}%`,\n                                    top: '0px'\n                                  }}\n                                >\n                                  {monthNames[monthIndex]}\n                                  {isCurrentMonth && (\n                                    <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-purple-400 rounded-full animate-pulse shadow-lg\" />\n                                  )}\n                                </div>\n                              );\n                            }\n                          });\n                          \n                          return monthLabels;\n                        })()}\n                      </div>\n                    </div>\n                  </div>\n                \n                  {/* Isı haritası ızgarası - ortalanmış ve sınırlı */}\n                  <div className=\"flex items-start justify-center w-full max-w-full\">\n                    {/* Day labels */}\n                    <div className=\"flex flex-col justify-between mr-3 flex-shrink-0\" style={{ height: '168px' }}>\n                      <div className=\"text-xs text-muted-foreground h-6 flex items-center justify-end font-medium\">Pzt</div>\n                      <div className=\"text-xs text-transparent h-6\"></div>\n                      <div className=\"text-xs text-muted-foreground h-6 flex items-center justify-end font-medium\">Çar</div>\n                      <div className=\"text-xs text-transparent h-6\"></div>\n                      <div className=\"text-xs text-muted-foreground h-6 flex items-center justify-end font-medium\">Cum</div>\n                      <div className=\"text-xs text-transparent h-6\"></div>\n                      <div className=\"text-xs text-muted-foreground h-6 flex items-center justify-end font-medium\">Paz</div>\n                    </div>\n                    \n                    {/* Haftalık tablo - duyarlı boyutlandırma */}\n                    <div className=\"flex gap-1 flex-wrap justify-center max-w-full\">\n                      {heatmapWeeks.map((week, weekIndex) => (\n                        <div key={weekIndex} className=\"flex flex-col gap-1\">\n                          {week.map((day, dayIndex) => {\n                            if (!day) {\n                              return (\n                                <div\n                                  key={dayIndex}\n                                  className=\"w-6 h-6 rounded bg-transparent\"\n                                />\n                              );\n                            }\n                            \n                            const opacity = day.intensity === 0 ? 0.1 : Math.max(0.2, day.intensity);\n                            const currentMonth = new Date().getMonth();\n                            const isCurrentMonth = day.month === currentMonth;\n                            \n                            return (\n                              <div\n                                key={dayIndex}\n                                className={`w-6 h-6 rounded transition-all duration-300 hover:scale-110 cursor-pointer relative ${\n                                  day.isToday \n                                    ? 'border-2 border-purple-400 dark:border-purple-300 shadow-lg' \n                                    : day.intensity === 0 \n                                      ? 'bg-gray-100/80 dark:bg-gray-800/80 hover:bg-gray-200 dark:hover:bg-gray-700' \n                                      : 'hover:brightness-110'\n                                }`}\n                                style={{\n                                  backgroundColor: day.isToday \n                                    ? (day.intensity > 0 ? `rgba(147, 51, 234, 0.9)` : `rgba(147, 51, 234, 0.4)`)\n                                    : day.intensity > 0 ? `rgba(147, 51, 234, ${opacity})` : undefined,\n                                  animation: day.isToday ? 'breathingPulse 2s ease-in-out infinite' : undefined,\n                                  boxShadow: day.isToday ? '0 0 15px rgba(147, 51, 234, 0.5)' : undefined\n                                }}\n                                title={`${day.date}${day.isToday ? ' (BUGÜN)' : ''}: ${day.count} aktivite (${day.questionCount} soru, ${day.taskCount} görev)`}\n                                onClick={() => handleHeatmapDayClick(day)}\n                              />\n                            );\n                          })}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* yoğunluk renkleri */}\n              <div className=\"flex items-center justify-between mt-6 text-xs text-muted-foreground\">\n                <span>Az</span>\n                <div className=\"flex gap-1 items-center\">\n                  <div className=\"w-3 h-3 bg-gray-100 dark:bg-gray-800 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-purple-200 dark:bg-purple-900 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-purple-400 dark:bg-purple-700 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-purple-600 dark:bg-purple-500 rounded-sm\"></div>\n                  <div className=\"w-3 h-3 bg-purple-800 dark:bg-purple-300 rounded-sm\"></div>\n                </div>\n                <span>Çok</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n        \n\n        {/* Çözülen Sorular Sayısı Bölümü ile CRUD */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          <Card className=\"bg-gradient-to-br from-green-50/50 via-card to-emerald-50/50 dark:from-green-950/30 dark:via-card dark:to-emerald-950/30 backdrop-blur-sm border-2 border-green-200/30 dark:border-green-800/30 shadow-2xl\">\n            <CardHeader className=\"bg-gradient-to-r from-green-500/10 to-emerald-500/10 rounded-t-lg border-b border-green-200/30\">\n              <CardTitle className=\"text-xl font-bold bg-gradient-to-r from-green-600 to-emerald-600 bg-clip-text text-transparent flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <BarChart3 className=\"h-6 w-6 text-green-500\" />\n                  📊 Çözülen Soru Sayısı\n                </div>\n                <div className=\"flex gap-2\">\n                  <Button \n                    onClick={handleOpenQuestionDialog}\n                    size=\"sm\" \n                    variant=\"outline\"\n                    className=\"text-xs border-green-300 text-green-700 hover:bg-green-50\"\n                  >\n                    <Plus className=\"h-3 w-3 mr-1\" />\n                    Soru Ekle\n                  </Button>\n                  {questionLogs.length > 0 && (\n                    <Button \n                      onClick={() => {\n                        if (window.confirm(\"Tüm soru kayıtlarını silmek istediğinizden emin misiniz?\")) {\n                          deleteAllQuestionLogsMutation.mutate();\n                        }\n                      }}\n                      size=\"sm\" \n                      variant=\"outline\"\n                      className=\"text-xs border-red-300 text-red-700 hover:bg-red-50\"\n                      disabled={deleteAllQuestionLogsMutation.isPending}\n                    >\n                      <Trash2 className=\"h-3 w-3 mr-1\" />\n                      {deleteAllQuestionLogsMutation.isPending ? 'Siliniyor...' : 'Tüm Soruları Sil'}\n                    </Button>\n                  )}\n                </div>\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"pt-6\">\n              {questionLogs.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <BarChart3 className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <h3 className=\"font-medium mb-1\">Henüz soru kaydı yok</h3>\n                  <p className=\"text-sm\">Çözdüğünüz soruları kaydetmeye başlayın - istatistiklerinizi görmek için! 📊</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Özet İstatistikleri */}\n                  <div className=\"grid grid-cols-3 gap-4 mb-6\">\n                    <div className=\"text-center p-4 bg-gradient-to-r from-green-100/50 to-emerald-100/50 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50\">\n                      <div className=\"text-2xl font-bold text-green-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.correct_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Doğru</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-red-100/50 to-pink-100/50 dark:from-red-900/20 dark:to-pink-900/20 rounded-xl border border-red-200/50\">\n                      <div className=\"text-2xl font-bold text-red-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.wrong_count), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Yanlış</div>\n                    </div>\n                    <div className=\"text-center p-4 bg-gradient-to-r from-yellow-100/50 to-amber-100/50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-xl border border-yellow-200/50\">\n                      <div className=\"text-2xl font-bold text-yellow-600\">\n                        {questionLogs.reduce((total, log) => total + parseInt(log.blank_count || '0'), 0)}\n                      </div>\n                      <div className=\"text-sm text-muted-foreground\">Toplam Boş</div>\n                    </div>\n                  </div>\n\n                  {/* Soru Kayıtları Listesi - Düzenleme/Silme ile - 3 öğe ile sınırlı */}\n                  <div className=\"space-y-3\">\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto custom-scrollbar\">\n                      {questionLogs.map((log, index) => (\n                      <div key={log.id} className=\"p-4 bg-gradient-to-r from-green-100/30 to-emerald-100/30 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl border border-green-200/50 transition-all hover:scale-102 hover:shadow-md\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <div className=\"w-8 h-8 rounded-full bg-gradient-to-r from-green-500 to-emerald-500 text-white flex items-center justify-center font-bold text-sm\">\n                              {index + 1}\n                            </div>\n                            <div>\n                              <div className=\"font-semibold text-foreground\">\n                                {log.exam_type} - {log.subject}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {new Date(log.study_date).toLocaleDateString('tr-TR')}\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-2\">\n                            <button\n                              onClick={() => deleteQuestionLogMutation.mutate(log.id)}\n                              disabled={deleteQuestionLogMutation.isPending}\n                              className=\"text-red-500 hover:text-red-700 p-1 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition-colors\"\n                              title=\"Soru kaydını sil\"\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </button>\n                          </div>\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-2 text-sm\">\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-green-600\">{log.correct_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Doğru</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-red-600\">{log.wrong_count}</div>\n                            <div className=\"text-xs text-muted-foreground\">Yanlış</div>\n                          </div>\n                          <div className=\"text-center p-2 bg-white/50 dark:bg-slate-800/50 rounded-lg\">\n                            <div className=\"font-bold text-yellow-600\">{log.blank_count || '0'}</div>\n                            <div className=\"text-xs text-muted-foreground\">Boş</div>\n                          </div>\n                        </div>\n                        {log.wrong_topics && log.wrong_topics.length > 0 && (\n                          <div className=\"mt-2 text-xs text-red-600\">\n                            {log.wrong_topics.join(', ')}\n                          </div>\n                        )}\n                      </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Günlük Soru Analizi - Çözülen Sorulardan Sonra Buraya Taşı */}\n        <div className=\"mb-8\">\n          <QuestionAnalysisCharts />\n        </div>\n\n        {/* Geliştirilmiş Deneme Sonuçları - Premium Stil */}\n        <div className=\"grid grid-cols-1 gap-6 mb-8\">\n          <div className=\"bg-gradient-to-br from-emerald-50/70 via-white to-green-50/40 dark:from-emerald-950/40 dark:via-slate-800/60 dark:to-green-950/30 rounded-3xl border border-emerald-200/50 dark:border-emerald-800/30 p-8 backdrop-blur-lg shadow-2xl hover:shadow-3xl transition-all duration-700 group relative overflow-hidden\">\n            {/* Animasyonlu Arka Plan Öğeleri */}\n            <div className=\"absolute top-0 right-0 w-48 h-48 bg-gradient-to-br from-emerald-500/15 to-green-500/10 rounded-full blur-3xl animate-pulse\"></div>\n            <div className=\"absolute -bottom-12 -left-12 w-40 h-40 bg-gradient-to-tr from-green-500/15 to-emerald-500/10 rounded-full blur-3xl\"></div>\n            <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-32 h-32 bg-gradient-to-br from-emerald-400/5 to-green-400/5 rounded-full blur-2xl\"></div>\n            \n            <div className=\"relative\">\n              <div className=\"flex items-center justify-between mb-8\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"p-4 bg-gradient-to-br from-emerald-500 via-green-500 to-emerald-600 rounded-2xl shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:scale-110\">\n                    <Target className=\"h-7 w-7 text-white drop-shadow-lg\" />\n                  </div>\n                  <div>\n                    <h3 className=\"text-3xl font-bold bg-gradient-to-r from-emerald-600 via-green-600 to-emerald-700 bg-clip-text text-transparent\">\n                      🎯 Deneme Sonuçları\n                    </h3>\n                    <p className=\"text-sm text-emerald-600/70 dark:text-emerald-400/70 font-medium\">Detaylı performans analizi ve ilerleme takibi</p>\n                  </div>\n                </div>\n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={() => setShowExamDialog(true)}\n                    size=\"lg\" \n                    className=\"bg-gradient-to-r from-emerald-500 via-green-500 to-emerald-600 hover:from-emerald-600 hover:via-green-600 hover:to-emerald-700 text-white border-0 shadow-xl hover:shadow-2xl transition-all duration-500 px-6 py-3 rounded-xl text-base font-semibold hover:scale-105 group/btn relative overflow-hidden\"\n                    data-testid=\"button-add-exam-result\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent opacity-0 group-hover/btn:opacity-100 transition-opacity duration-500\"></div>\n                    <Plus className=\"h-5 w-5 mr-2 relative z-10\" />\n                    <span className=\"relative z-10\">Deneme Ekle</span>\n                  </Button>\n                  {examResults.length > 0 && (\n                    <Button \n                      onClick={() => {\n                        if (window.confirm(\"Tüm deneme sonuçlarını silmek istediğinizden emin misiniz?\")) {\n                          deleteAllExamResultsMutation.mutate();\n                        }\n                      }}\n                      size=\"lg\" \n                      variant=\"outline\"\n                      className=\"border-red-300 text-red-700 hover:bg-red-50 dark:border-red-700 dark:text-red-400 dark:hover:bg-red-950/30 px-6 py-3 rounded-xl text-base font-semibold transition-all duration-300\"\n                      disabled={deleteAllExamResultsMutation.isPending}\n                    >\n                      <Trash2 className=\"h-5 w-5 mr-2\" />\n                      {deleteAllExamResultsMutation.isPending ? 'Siliniyor...' : 'Denemeleri Sil'}\n                    </Button>\n                  )}\n                </div>\n              </div>\n            \n            {examResults.length === 0 ? (\n              <div className=\"text-center py-20 text-muted-foreground\">\n                <div className=\"w-32 h-32 rounded-full bg-gradient-to-br from-emerald-100 to-green-100 dark:from-emerald-900/30 dark:to-green-900/30 flex items-center justify-center mx-auto mb-8 shadow-2xl animate-pulse\">\n                  <Target className=\"h-16 w-16 text-emerald-500\" />\n                </div>\n                <h4 className=\"text-3xl font-bold text-emerald-700 dark:text-emerald-300 mb-4\">Henüz deneme kaydı yok</h4>\n                <p className=\"text-lg opacity-75 mb-8 max-w-md mx-auto\">Deneme eklemeden veriler gözükmez.</p>\n                <div className=\"flex justify-center space-x-2\">\n                  <div className=\"w-3 h-3 rounded-full bg-emerald-500 animate-bounce\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-green-500 animate-bounce delay-150\"></div>\n                  <div className=\"w-3 h-3 rounded-full bg-emerald-600 animate-bounce delay-300\"></div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                {/* Sadece 2 deneme sonucu ile sınırlı */}\n                <div className=\"space-y-6 max-h-[800px] overflow-y-auto custom-scrollbar\">\n                  {examResults\n                    .sort((a, b) => new Date(b.exam_date).getTime() - new Date(a.exam_date).getTime())\n                    .map((exam, index) => {\n                  // Sınav türünü ve ilgili net puanı öğrenin\n                  const examType = exam.exam_type || (parseFloat(exam.ayt_net) > 0 ? 'AYT' : 'TYT');\n                  const relevantNet = examType === 'TYT' ? parseFloat(exam.tyt_net) || 0 : parseFloat(exam.ayt_net) || 0;\n                  \n                  // Sınav türünü ve ilgili net puanı alınBu sınav türü için sınav numarasını hesaplayın\n                  const sameTypeExams = examResults\n                    .filter(e => (e.exam_type || (parseFloat(e.ayt_net) > 0 ? 'AYT' : 'TYT')) === examType)\n                    .sort((a, b) => new Date(a.exam_date).getTime() - new Date(b.exam_date).getTime());\n                  const examNumber = sameTypeExams.findIndex(e => e.id === exam.id) + 1;\n                  \n                  // İlgili net puana dayalı performans emojisi\n                  const getPerformanceEmoji = (net: number, type: string) => {\n                    if (type === 'TYT') {\n                      if (net >= 90) return '😎'; // çokiyi\n                      if (net >= 70) return '🙂'; // eh\n                      if (net >= 50) return '😐'; // vasat\n                      return '😓'; // bokgibi\n                    } else { // AYT\n                      if (net >= 50) return '😎'; // çokiyi\n                      if (net >= 40) return '🙂'; // eh\n                      if (net >= 30) return '😐'; // vasat\n                      return '😓'; // bokgibi\n                    }\n                  };\n                  \n                  const examEmoji = getPerformanceEmoji(relevantNet, examType);\n                  \n                  // Performans göstergelerini hesaplayın\n                  const isRecentExam = new Date(exam.exam_date) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                  const examDate = new Date(exam.exam_date);\n                  const daysSinceExam = Math.floor((Date.now() - examDate.getTime()) / (1000 * 60 * 60 * 24));\n                  \n                  return (\n                    <Card key={exam.id} className=\"group bg-gradient-to-br from-white via-emerald-50/40 to-green-50/30 dark:from-slate-800/80 dark:via-emerald-900/20 dark:to-green-900/15 hover:shadow-xl transition-all duration-300 border-emerald-200/60 dark:border-emerald-700/50 relative overflow-hidden hover:bg-gradient-to-br hover:from-emerald-50/60 hover:via-emerald-100/30 hover:to-green-100/40 dark:hover:from-emerald-900/30 dark:hover:via-emerald-800/25 dark:hover:to-green-900/20\">\n                      {/* Hover için Geliştirilmiş Parlama Efektleri */}\n                      <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-500/0 via-green-500/0 to-emerald-400/0 group-hover:from-emerald-500/5 group-hover:via-green-500/3 group-hover:to-emerald-400/5 transition-all duration-500 rounded-xl\"></div>\n                      <div className=\"absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-emerald-400/5 to-green-400/3 rounded-full blur-2xl group-hover:from-emerald-400/15 group-hover:to-green-400/10 transition-all duration-500\"></div>\n                      <div className=\"absolute -bottom-8 -left-8 w-24 h-24 bg-gradient-to-tr from-green-400/5 to-emerald-400/3 rounded-full blur-xl group-hover:from-green-400/15 group-hover:to-emerald-400/10 transition-all duration-500\"></div>\n                      \n                      {isRecentExam && (\n                        <div className=\"absolute top-4 left-4 bg-gradient-to-r from-orange-400 to-red-400 text-white text-xs px-3 py-1.5 rounded-full font-bold shadow-lg animate-pulse\">\n                          🆕 YENİ\n                        </div>\n                      )}\n                      \n                      <CardContent className=\"p-6 relative\">\n                        <div className=\"flex items-center justify-between mb-6\">\n                          <div className=\"flex items-center gap-6\">\n                            <div className=\"relative\">\n                              <div className=\"w-20 h-20 rounded-2xl bg-gradient-to-br from-emerald-500/20 to-green-500/20 flex items-center justify-center shadow-lg group-hover:shadow-xl transition-all duration-300\">\n                                <span className=\"text-4xl filter drop-shadow-lg\">{examEmoji}</span>\n                              </div>\n                              {relevantNet >= (examType === 'TYT' ? 90 : 50) && (\n                                <div className=\"absolute -top-2 -right-2 w-6 h-6 bg-gradient-to-br from-yellow-400 to-orange-400 rounded-full flex items-center justify-center shadow-lg\">\n                                  <span className=\"text-xs\">⭐</span>\n                                </div>\n                              )}\n                            </div>\n                            <div>\n                              <div className=\"text-2xl font-bold text-emerald-700 dark:text-emerald-300 mb-2 group-hover:text-emerald-600 dark:group-hover:text-emerald-200 transition-colors\">\n                                {examType} #{examNumber} • {examDate.toLocaleDateString('tr-TR', { \n                                  day: 'numeric', \n                                  month: 'numeric', \n                                  year: 'numeric' \n                                })}\n                              </div>\n                              <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n                                <div className=\"flex items-center gap-2\">\n                                  <span className=\"font-medium\">\n                                    {daysSinceExam === 0 ? 'Bugün' : `${daysSinceExam} gün önce`}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-6\">\n                            <div className=\"text-center p-4 bg-gradient-to-br from-emerald-100/80 to-emerald-50/80 dark:from-emerald-900/40 dark:to-emerald-800/30 rounded-2xl border-2 border-emerald-200/60 dark:border-emerald-700/50 shadow-lg group-hover:shadow-xl transition-all duration-300\">\n                              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                                <div className={`w-3 h-3 rounded-full shadow-sm ${examType === 'TYT' ? 'bg-emerald-500' : 'bg-blue-500'}`}></div>\n                                <span className={`text-sm font-bold ${examType === 'TYT' ? 'text-emerald-600 dark:text-emerald-400' : 'text-blue-600 dark:text-blue-400'}`}>\n                                  {examType} Net\n                                </span>\n                              </div>\n                              <div className={`text-3xl font-bold mb-1 ${examType === 'TYT' ? 'text-emerald-700 dark:text-emerald-300' : 'text-blue-700 dark:text-blue-300'}`}>\n                                {relevantNet.toFixed(2)}\n                              </div>\n                              <div className={`text-xs font-medium ${examType === 'TYT' ? 'text-emerald-600/70 dark:text-emerald-400/70' : 'text-blue-600/70 dark:text-blue-400/70'}`}>\n                                / {examType === 'TYT' ? '120' : '80'} soruluk\n                              </div>\n                            </div>\n                            \n                            <div className=\"flex flex-col gap-3\">\n                              \n                              <button\n                                onClick={() => deleteExamResultMutation.mutate(exam.id)}\n                                disabled={deleteExamResultMutation.isPending}\n                                className=\"p-3 text-red-400 hover:text-red-600 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-xl transition-all duration-300 hover:scale-110 group/delete\"\n                                title=\"Deneme sonucunu sil\"\n                              >\n                                <Trash2 className=\"h-5 w-5 group-hover/delete:animate-pulse\" />\n                              </button>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {/* Konu Ayrıntıları Bölümü */}\n                        {exam.subjects_data && (() => {\n                          try {\n                            const subjectsData = JSON.parse(exam.subjects_data);\n                            const subjects = Object.entries(subjectsData).map(([key, data]: [string, any]) => {\n                              const subjectNames: {[key: string]: string} = {\n                                'turkce': 'Türkçe',\n                                'matematik': 'Matematik',\n                                'sosyal': 'Sosyal',\n                                'fen': 'Fen',\n                                'fizik': 'Fizik',\n                                'kimya': 'Kimya',\n                                'biyoloji': 'Biyoloji'\n                              };\n                              return {\n                                name: subjectNames[key] || key,\n                                correct: parseInt(data.correct) || 0,\n                                wrong: parseInt(data.wrong) || 0,\n                                blank: parseInt(data.blank) || 0,\n                                total: (parseInt(data.correct) || 0) + (parseInt(data.wrong) || 0) + (parseInt(data.blank) || 0)\n                              };\n                            }).filter(subject => subject.total > 0);\n                            \n                            if (subjects.length > 0) {\n                              return (\n                                <div className=\"mt-6 pt-4 border-t border-emerald-200/50 dark:border-emerald-700/30\">\n                                  <h4 className=\"text-sm font-bold text-emerald-700 dark:text-emerald-300 mb-3 flex items-center gap-2\">\n                                    📊 Ders Detayları\n                                  </h4>\n                                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                                    {subjects.map((subject, idx) => (\n                                      <div key={idx} className=\"bg-gradient-to-r from-white/60 to-emerald-50/40 dark:from-gray-800/60 dark:to-emerald-900/20 rounded-xl p-3 border border-emerald-200/40 dark:border-emerald-700/30\">\n                                        <div className=\"flex items-center justify-between mb-2\">\n                                          <span className=\"font-semibold text-gray-700 dark:text-gray-300 text-sm\">\n                                            {subject.name}\n                                          </span>\n                                          <span className=\"text-xs text-muted-foreground font-medium\">\n                                            {subject.total} soru\n                                          </span>\n                                        </div>\n                                        <div className=\"flex items-center justify-between text-xs\">\n                                          <div className=\"flex items-center gap-3\">\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-green-500\"></div>\n                                              <span className=\"text-green-600 dark:text-green-400 font-semibold\">{subject.correct}D</span>\n                                            </div>\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-red-500\"></div>\n                                              <span className=\"text-red-600 dark:text-red-400 font-semibold\">{subject.wrong}Y</span>\n                                            </div>\n                                            <div className=\"flex items-center gap-1\">\n                                              <div className=\"w-2 h-2 rounded-full bg-gray-400\"></div>\n                                              <span className=\"text-gray-600 dark:text-gray-400 font-semibold\">{subject.blank}B</span>\n                                            </div>\n                                          </div>\n                                          <span className=\"text-emerald-600 dark:text-emerald-400 font-bold\">\n                                            {(subject.correct - subject.wrong * 0.25).toFixed(1)} net\n                                          </span>\n                                        </div>\n                                      </div>\n                                    ))}\n                                  </div>\n                                </div>\n                              );\n                            }\n                          } catch (e) {\n                            console.error('Error parsing subjects_data:', e);\n                          }\n                          return null;\n                        })()}\n                        \n                        {/* Performans Göstergeleri */}\n                        <div className=\"flex items-center justify-between pt-4 border-t border-emerald-200/50 dark:border-emerald-700/30\">\n                          <div className=\"flex items-center gap-4\">\n                            <div className={`px-3 py-1.5 rounded-full text-sm font-medium ${\n                              relevantNet >= (examType === 'TYT' ? 90 : 50) ? 'bg-green-100 text-green-700 dark:bg-green-900/40 dark:text-green-300' :\n                              relevantNet >= (examType === 'TYT' ? 70 : 40) ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/40 dark:text-blue-300' :\n                              relevantNet >= (examType === 'TYT' ? 50 : 30) ? 'bg-yellow-100 text-yellow-700 dark:bg-yellow-900/40 dark:text-yellow-300' :\n                              'bg-red-100 text-red-700 dark:bg-red-900/40 dark:text-red-300'\n                            }`}>\n                              {examEmoji}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {examType} #{examNumber}\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center gap-2 text-xs text-muted-foreground\">\n                            <Award className=\"h-4 w-4\" />\n                            <span>{examDate.toLocaleDateString('tr-TR', { day: 'numeric', month: 'short' })}</span>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n        </div>\n\n        {/* Analitik Grafikler - Bu önemli analitikleri koruyun */}\n        <div className=\"space-y-8 mb-8\">\n          <AdvancedCharts />\n        </div>\n\n      </main>\n\n      {/* Isı Haritası Gün Detayları Diyaloğu */}\n      <Dialog open={selectedHeatmapDay !== null} onOpenChange={(open) => !open && setSelectedHeatmapDay(null)}>\n        <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto custom-scrollbar\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <CalendarDays className=\"h-5 w-5 text-purple-500\" />\n              {selectedHeatmapDay && (\n                <>\n                  {new Date(selectedHeatmapDay.date).toLocaleDateString('tr-TR', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })} Aktiviteleri\n                </>\n              )}\n            </DialogTitle>\n            <DialogDescription>\n              Seçilen gün için detaylı aktivite bilgilerini görüntüleyin.\n            </DialogDescription>\n          </DialogHeader>\n          {selectedHeatmapDay && (\n            <div className=\"space-y-6\">\n              {/* Özet */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div className=\"text-center p-4 bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/20 dark:to-emerald-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-green-600\">{selectedHeatmapDay.dayActivities.questions.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Soru Çözümü</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-r from-blue-100 to-cyan-100 dark:from-blue-900/20 dark:to-cyan-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-blue-600\">{selectedHeatmapDay.dayActivities.tasks.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Tamamlanan Görev</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-r from-purple-100 to-violet-100 dark:from-purple-900/20 dark:to-violet-900/20 rounded-xl\">\n                  <div className=\"text-2xl font-bold text-purple-600\">{selectedHeatmapDay.dayActivities.exams.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">Deneme Sınavı</div>\n                </div>\n              </div>\n\n              {/* Detaylı Aktiviteler */}\n              {selectedHeatmapDay.dayActivities.questions.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5 text-green-500\" />\n                    Çözülen Sorular\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.questions.map((question: any, index: number) => (\n                      <div key={index} className=\"p-3 bg-green-50 dark:bg-green-900/10 rounded-lg border border-green-200 dark:border-green-800\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium\">{question.exam_type} - {question.subject}</span>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {question.correct_count}D {question.wrong_count}Y {question.blank_count || 0}B\n                          </div>\n                        </div>\n                        {question.wrong_topics && question.wrong_topics.length > 0 && (\n                          <div className=\"text-xs text-red-600 mt-1\">\n                            {question.wrong_topics.map((topic: string) => {\n                              // TYT/AYT ön ekini ve \"- Berat\" gibi ekstra ayrıntıları kaldır\n                              const cleanTopic = topic.replace(/^(TYT|AYT)\\s+[^-]+-\\s*/, '').split(' - ')[0];\n                              return cleanTopic;\n                            }).join(', ')}\n                          </div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedHeatmapDay.dayActivities.tasks.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Target className=\"h-5 w-5 text-blue-500\" />\n                    Tamamlanan Görevler\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.tasks.map((task: any, index: number) => (\n                      <div key={index} className=\"p-3 bg-blue-50 dark:bg-blue-900/10 rounded-lg border border-blue-200 dark:border-blue-800\">\n                        <div className=\"font-medium\">{task.title}</div>\n                        {task.description && (\n                          <div className=\"text-sm text-muted-foreground mt-1\">{task.description}</div>\n                        )}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedHeatmapDay.dayActivities.exams.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold mb-3 flex items-center gap-2\">\n                    <Award className=\"h-5 w-5 text-purple-500\" />\n                    Deneme Sınavları\n                  </h3>\n                  <div className=\"space-y-2\">\n                    {selectedHeatmapDay.dayActivities.exams.map((exam: any, index: number) => (\n                      <div key={index} className=\"p-3 bg-purple-50 dark:bg-purple-900/10 rounded-lg border border-purple-200 dark:border-purple-800\">\n                        <div className=\"flex justify-between items-center\">\n                          <span className=\"font-medium\">{exam.exam_name}</span>\n                          <div className=\"text-xs text-muted-foreground\">\n                            TYT: {exam.tyt_net} {exam.ayt_net !== \"0\" && `• AYT: ${exam.ayt_net}`}\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {selectedHeatmapDay.count === 0 && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <CalendarDays className=\"h-12 w-12 mx-auto mb-3 opacity-40\" />\n                  <p>Bu günde herhangi bir aktivite kaydedilmemiş.</p>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Soru Diyaloğu */}\n      <Dialog open={showQuestionDialog} onOpenChange={setShowQuestionDialog}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {editingQuestionLog ? 'Soru Kaydını Düzenle' : 'Yeni Soru Kaydı'}\n            </DialogTitle>\n            <DialogDescription>\n              Soru çözüm kaydınızı ekleyin veya düzenleyin.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Sınav Türü</label>\n                <Select value={newQuestion.exam_type} onValueChange={(value) => setNewQuestion({...newQuestion, exam_type: value as \"TYT\" | \"AYT\"})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"TYT\">TYT</SelectItem>\n                    <SelectItem value=\"AYT\">AYT</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Ders</label>\n                <Select value={newQuestion.subject} onValueChange={(value) => setNewQuestion({...newQuestion, subject: value})}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getSubjectOptions(newQuestion.exam_type).map(subject => (\n                      <SelectItem key={subject} value={subject}>{subject}</SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Doğru</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.correct_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, correct_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Yanlış</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.wrong_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, wrong_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Boş</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.blank_count}\n                  onChange={(e) => setNewQuestion({...newQuestion, blank_count: e.target.value})}\n                  placeholder=\"0\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                <Input\n                  type=\"date\"\n                  value={newQuestion.study_date}\n                  onChange={(e) => setNewQuestion({...newQuestion, study_date: e.target.value})}\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Süre (dk)</label>\n                <Input\n                  type=\"number\"\n                  value={newQuestion.time_spent_minutes}\n                  onChange={(e) => setNewQuestion({...newQuestion, time_spent_minutes: e.target.value})}\n                  placeholder=\"45\"\n                  min=\"0\"\n                />\n              </div>\n            </div>\n\n            {/* Geliştirilmiş Yanlış Konular Bölümü */}\n            <div className=\"bg-gradient-to-r from-red-50/50 to-orange-50/50 dark:from-red-900/10 dark:to-orange-900/10 rounded-xl p-6 border border-red-200/30 dark:border-red-700/20\">\n              <div className=\"flex items-center gap-3 mb-6\">\n                <div className=\"p-2 bg-gradient-to-br from-red-500 to-orange-600 rounded-lg shadow-md\">\n                  <AlertTriangle className=\"h-5 w-5 text-white\" />\n                </div>\n                <div>\n                  <label className=\"text-lg font-semibold text-red-700 dark:text-red-300\">🔍 Yanlış Konu Analizi</label>\n                  <p className=\"text-sm text-red-600/70 dark:text-red-400/70\">Detaylı hata analizi ile eksik konuları belirleyin</p>\n                </div>\n              </div>\n              \n              <div className=\"space-y-6\">\n                {/* Kategori ve Zorluk Seçimi */}\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-red-700 dark:text-red-300 mb-2\">Hata Kategorisi</label>\n                    <Select value={selectedTopicCategory} onValueChange={(value) => setSelectedTopicCategory(value as any)}>\n                      <SelectTrigger className=\"bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"kavram\">🧠 Kavram Eksikliği</SelectItem>\n                        <SelectItem value=\"hesaplama\">🔢 Hesaplama Hatası</SelectItem>\n                        <SelectItem value=\"analiz\">🔍 Analiz Sorunu</SelectItem>\n                        <SelectItem value=\"dikkatsizlik\">⚠️ Dikkatsizlik</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-red-700 dark:text-red-300 mb-2\">Zorluk Derecesi</label>\n                    <Select value={selectedTopicDifficulty} onValueChange={(value) => setSelectedTopicDifficulty(value as any)}>\n                      <SelectTrigger className=\"bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"kolay\">🟢 Kolay</SelectItem>\n                        <SelectItem value=\"orta\">🟡 Orta</SelectItem>\n                        <SelectItem value=\"zor\">🔴 Zor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                {/* Geliştirilmiş Konu Girişi */}\n                <div className=\"relative\">\n                  <Input\n                    value={wrongTopicInput}\n                    onChange={(e) => setWrongTopicInput(e.target.value)}\n                    placeholder=\"Konu adını yazın ve Enter'a basın...\"\n                    className=\"pl-10 pr-16 h-12 text-base bg-white/80 dark:bg-gray-800/80 border-red-200 dark:border-red-700/50 focus:border-red-400 dark:focus:border-red-500 rounded-xl shadow-sm\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter' && wrongTopicInput.trim()) {\n                        // Title case conversion: her kelimenin baş harfini büyük yap\n                        const titleCaseTopic = toTitleCase(wrongTopicInput);\n                        // TYT/AYT ön ekini ekle\n                        const prefixedTopic = `${newQuestion.exam_type} ${newQuestion.subject} - ${titleCaseTopic}`;\n                        \n                        // Yinelenenleri kontrol et\n                        const isDuplicate = newQuestion.wrong_topics.some(existingTopic => \n                          existingTopic.topic.toLowerCase() === prefixedTopic.toLowerCase()\n                        );\n                        \n                        if (!isDuplicate) {\n                          setNewQuestion({\n                            ...newQuestion, \n                            wrong_topics: [...newQuestion.wrong_topics, {\n                              topic: prefixedTopic,\n                              difficulty: selectedTopicDifficulty,\n                              category: selectedTopicCategory\n                            }]\n                          });\n                          setWrongTopicInput(\"\");\n                        } else {\n                          toast({ title: \"⚠️ Uyarı\", description: \"Bu konu zaten eklenmiş!\", variant: \"destructive\" });\n                        }\n                      }\n                    }}\n                    data-testid=\"input-wrong-topics\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-red-400 dark:text-red-500\" />\n                  {wrongTopicInput.trim() && (\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-100 dark:hover:bg-red-900/30\"\n                      onClick={() => {\n                        if (wrongTopicInput.trim()) {\n                          // Başlık durumuna dönüştürme ve TYT/AYT ön ekini ekle\n                          const titleCaseTopic = toTitleCase(wrongTopicInput);\n                          const prefixedTopic = `${newQuestion.exam_type} ${newQuestion.subject} - ${titleCaseTopic}`;\n\n                          // Yinelenenleri kontrol et\n                          const isDuplicate = newQuestion.wrong_topics.some(existingTopic =>\n                            existingTopic.topic.toLowerCase() === prefixedTopic.toLowerCase()\n                          );\n                          \n                          if (!isDuplicate) {\n                            setNewQuestion({\n                              ...newQuestion, \n                              wrong_topics: [...newQuestion.wrong_topics, {\n                                topic: prefixedTopic,\n                                difficulty: selectedTopicDifficulty,\n                                category: selectedTopicCategory\n                              }]\n                            });\n                            setWrongTopicInput(\"\");\n                          } else {\n                            toast({ title: \"⚠️ Uyarı\", description: \"Bu konu zaten eklenmiş!\", variant: \"destructive\" });\n                          }\n                        }\n                      }}\n                      data-testid=\"button-add-topic\"\n                    >\n                      <Plus className=\"h-4 w-4\" />\n                    </Button>\n                  )}\n                </div>\n\n                {/* Geliştirilmiş Konu Etiketleri Görüntüleme */}\n                {newQuestion.wrong_topics.length > 0 && (\n                  <div>\n                    <div className=\"flex items-center gap-2 mb-4\">\n                      <Tag className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n                      <span className=\"text-sm font-medium text-red-700 dark:text-red-300\">\n                        Eklenen Konular ({newQuestion.wrong_topics.length})\n                      </span>\n                    </div>\n                    <div className=\"space-y-3\">\n                      {newQuestion.wrong_topics.map((topicData, index) => {\n                        const getDifficultyIcon = (difficulty: string) => {\n                          switch(difficulty) {\n                            case 'kolay': return '🟢';\n                            case 'orta': return '🟡';\n                            case 'zor': return '🔴';\n                            default: return '⚪';\n                          }\n                        };\n                        \n                        const getCategoryIcon = (category: string) => {\n                          switch(category) {\n                            case 'kavram': return '🧠';\n                            case 'hesaplama': return '🔢';\n                            case 'analiz': return '🔍';\n                            case 'dikkatsizlik': return '⚠️';\n                            default: return '📝';\n                          }\n                        };\n                        \n                        const getDifficultyBg = (difficulty: string) => {\n                          switch(difficulty) {\n                            case 'kolay': return 'from-green-100 to-emerald-100 dark:from-green-900/40 dark:to-emerald-900/40 border-green-200 dark:border-green-700/50';\n                            case 'orta': return 'from-yellow-100 to-amber-100 dark:from-yellow-900/40 dark:to-amber-900/40 border-yellow-200 dark:border-yellow-700/50';\n                            case 'zor': return 'from-red-100 to-rose-100 dark:from-red-900/40 dark:to-rose-900/40 border-red-200 dark:border-red-700/50';\n                            default: return 'from-gray-100 to-slate-100 dark:from-gray-900/40 dark:to-slate-900/40 border-gray-200 dark:border-gray-700/50';\n                          }\n                        };\n                        \n                        return (\n                          <div\n                            key={index}\n                            className={`group bg-gradient-to-r ${getDifficultyBg(topicData.difficulty)} border rounded-xl p-4 transition-all duration-300 hover:shadow-lg hover:scale-105`}\n                            data-testid={`topic-tag-${index}`}\n                          >\n                            <div className=\"flex items-start justify-between\">\n                              <div className=\"flex-1\">\n                                <div className=\"flex items-center gap-3 mb-2\">\n                                  <div className=\"flex items-center gap-2\">\n                                    <span className=\"text-lg\">{getCategoryIcon(topicData.category)}</span>\n                                    <span className=\"text-lg font-bold text-red-700 dark:text-red-300\">\n                                      {topicData.topic}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex items-center gap-1 text-sm\">\n                                    <span>{getDifficultyIcon(topicData.difficulty)}</span>\n                                    <span className=\"capitalize text-muted-foreground\">\n                                      {topicData.difficulty}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                                  <span className=\"capitalize\">\n                                    {topicData.category === 'kavram' && 'Kavram Eksikliği'}\n                                    {topicData.category === 'hesaplama' && 'Hesaplama Hatası'}\n                                    {topicData.category === 'analiz' && 'Analiz Sorunu'}\n                                    {topicData.category === 'dikkatsizlik' && 'Dikkatsizlik'}\n                                  </span>\n                                </div>\n                              </div>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"h-8 w-8 p-0 opacity-0 group-hover:opacity-100 transition-opacity duration-200 text-red-500 hover:text-red-700 hover:bg-red-200 dark:hover:bg-red-800/50 rounded-full\"\n                                onClick={() => {\n                                  setNewQuestion({\n                                    ...newQuestion,\n                                    wrong_topics: newQuestion.wrong_topics.filter((_, i) => i !== index)\n                                  });\n                                }}\n                                data-testid={`button-remove-topic-${index}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                )}\n\n                {/* Geliştirilmiş Konu Önizlemesi */}\n                {wrongTopicInput.trim() && (\n                  <div className=\"p-4 bg-gradient-to-r from-blue-50/50 via-purple-50/30 to-indigo-50/50 dark:from-blue-950/30 dark:via-purple-950/20 dark:to-indigo-950/30 rounded-xl border border-blue-200/40 dark:border-blue-800/40\">\n                    <div className=\"flex items-center gap-2 mb-3\">\n                      <Eye className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n                      <span className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Önizleme</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 p-3 bg-white/50 dark:bg-gray-800/50 rounded-lg\">\n                      <span className=\"text-lg\">\n                        {selectedTopicCategory === 'kavram' && '🧠'}\n                        {selectedTopicCategory === 'hesaplama' && '🔢'}\n                        {selectedTopicCategory === 'analiz' && '🔍'}\n                        {selectedTopicCategory === 'dikkatsizlik' && '⚠️'}\n                      </span>\n                      <span className=\"font-medium text-gray-700 dark:text-gray-300\">{wrongTopicInput.trim()}</span>\n                      <span className=\"text-sm\">\n                        {selectedTopicDifficulty === 'kolay' && '🟢'}\n                        {selectedTopicDifficulty === 'orta' && '🟡'}\n                        {selectedTopicDifficulty === 'zor' && '🔴'}\n                      </span>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  // Yapılandırılmış analiz verilerini basit konu adlarından ayır\n                  const wrong_topics_json = newQuestion.wrong_topics.length > 0 ? \n                    JSON.stringify(newQuestion.wrong_topics) : null;\n                  const wrong_topics_simple = newQuestion.wrong_topics.map(topic => \n                    typeof topic === 'string' ? topic : topic.topic\n                  );\n\n                  if (editingQuestionLog) {\n                    updateQuestionLogMutation.mutate({\n                      id: editingQuestionLog.id,\n                      data: {\n                        exam_type: newQuestion.exam_type as \"TYT\" | \"AYT\",\n                        subject: newQuestion.subject,\n                        correct_count: newQuestion.correct_count,\n                        wrong_count: newQuestion.wrong_count,\n                        blank_count: newQuestion.blank_count || \"0\",\n                        study_date: newQuestion.study_date,\n                        wrong_topics: wrong_topics_simple,\n                        wrong_topics_json: wrong_topics_json,\n                        time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                      }\n                    });\n                  } else {\n                    createQuestionLogMutation.mutate({\n                      exam_type: newQuestion.exam_type as \"TYT\" | \"AYT\",\n                      subject: newQuestion.subject,\n                      correct_count: newQuestion.correct_count,\n                      wrong_count: newQuestion.wrong_count,\n                      blank_count: newQuestion.blank_count || \"0\",\n                      study_date: newQuestion.study_date,\n                      wrong_topics: wrong_topics_simple,\n                      wrong_topics_json: wrong_topics_json,\n                      time_spent_minutes: parseInt(newQuestion.time_spent_minutes) || null\n                    });\n                  }\n                }}\n                disabled={!newQuestion.correct_count || !newQuestion.wrong_count || createQuestionLogMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createQuestionLogMutation.isPending ? 'Kaydediliyor...' : (editingQuestionLog ? 'Güncelle' : 'Kaydet')}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowQuestionDialog(false);\n                  setEditingQuestionLog(null);\n                  setNewQuestion({ \n                    exam_type: \"TYT\", \n                    subject: \"Türkçe\", \n                    correct_count: \"\", \n                    wrong_count: \"\", \n                    blank_count: \"\", \n                    study_date: new Date().toISOString().split('T')[0],\n                    wrong_topics: [],\n                    time_spent_minutes: \"\"\n                  });\n                  setWrongTopicInput(\"\");\n                }}\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Sınav Sonucu Diyaloğu */}\n      <Dialog open={showExamDialog} onOpenChange={setShowExamDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto custom-scrollbar\">\n          <DialogHeader>\n            <DialogTitle>Yeni Deneme Sonucu</DialogTitle>\n            <DialogDescription>\n              Deneme sınav sonuçlarınızı girin ve net analizinizi takip edin.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Deneme Adı</label>\n                <Input\n                  value={newExamResult.exam_name}\n                  onChange={(e) => setNewExamResult({...newExamResult, exam_name: e.target.value})}\n                  placeholder=\"YKS Deneme\"\n                />\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium mb-1\">Tarih</label>\n                <Input\n                  type=\"date\"\n                  value={newExamResult.exam_date}\n                  onChange={(e) => setNewExamResult({...newExamResult, exam_date: e.target.value})}\n                />\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium mb-1\">Alan</label>\n              <Select value={newExamResult.exam_type} onValueChange={(value: \"TYT\" | \"AYT\") => setNewExamResult({...newExamResult, exam_type: value})}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"TYT\">TYT</SelectItem>\n                  <SelectItem value=\"AYT\">Sayısal(AYT)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* TYT Konular */}\n            {newExamResult.exam_type === \"TYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">TYT Dersleri</h3>\n                \n                {/* Türkçe */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Türkçe</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.turkce.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            turkce: { ...newExamResult.subjects.turkce, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.turkce.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-red-50/80 via-white/60 to-orange-50/60 dark:from-red-950/30 dark:via-gray-800/60 dark:to-orange-950/30 rounded-2xl p-5 border-2 border-red-200/50 dark:border-red-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-red-500 to-red-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-red-800 dark:text-red-200 flex items-center gap-2\">\n                            🔍 Türkçe Yanlış Konu Analizi\n                            <div className=\"text-xs bg-red-100 dark:bg-red-900/40 px-2 py-1 rounded-full text-red-700 dark:text-red-300\">\n                              {parseInt(newExamResult.subjects.turkce.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-red-600/80 dark:text-red-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.turkce || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, turkce: e.target.value});\n                            const topics = e.target.value.split(',').map(t => {\n                              const cleanTopic = toTitleCase(t.trim());\n                              return cleanTopic ? `${newExamResult.exam_type} Türkçe - ${cleanTopic}` : '';\n                            }).filter(t => t.length > 0);\n                            \n                            // Yinelenenleri kaldır\n                            const uniqueTopics = [...new Set(topics)];\n                            \n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                turkce: { ...newExamResult.subjects.turkce, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: cümle çözümleme, sözcük türleri, yazım kuralları...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-red-300/60 dark:border-red-600/50 focus:border-red-500 dark:focus:border-red-400 focus:ring-2 focus:ring-red-200 dark:focus:ring-red-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.turkce && (\n                          <div className=\"flex items-center gap-2 p-3 bg-red-100/60 dark:bg-red-900/30 rounded-xl border border-red-200/60 dark:border-red-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-red-600 dark:text-red-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-red-700/90 dark:text-red-300/90\">\n                              <strong>{currentWrongTopics.turkce.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-blue-50/80 via-white/60 to-cyan-50/60 dark:from-blue-950/30 dark:via-gray-800/60 dark:to-cyan-950/30 rounded-2xl p-5 border-2 border-blue-200/50 dark:border-blue-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-blue-800 dark:text-blue-200 flex items-center gap-2\">\n                            🔍 Matematik Yanlış Konu Analizi\n                            <div className=\"text-xs bg-blue-100 dark:bg-blue-900/40 px-2 py-1 rounded-full text-blue-700 dark:text-blue-300\">\n                              {parseInt(newExamResult.subjects.matematik.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-blue-600/80 dark:text-blue-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.matematik || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                            const topics = e.target.value.split(',').map(t => {\n                              const cleanTopic = toTitleCase(t.trim());\n                              return cleanTopic ? `${newExamResult.exam_type} Matematik - ${cleanTopic}` : '';\n                            }).filter(t => t.length > 0);\n                            \n                            // Yinelenenleri kaldır\n                            const uniqueTopics = [...new Set(topics)];\n                            \n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                matematik: { ...newExamResult.subjects.matematik, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: türev, integral, trigonometri, fonksiyonlar...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-blue-300/60 dark:border-blue-600/50 focus:border-blue-500 dark:focus:border-blue-400 focus:ring-2 focus:ring-blue-200 dark:focus:ring-blue-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.matematik && (\n                          <div className=\"flex items-center gap-2 p-3 bg-blue-100/60 dark:bg-blue-900/30 rounded-xl border border-blue-200/60 dark:border-blue-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-blue-600 dark:text-blue-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-blue-700/90 dark:text-blue-300/90\">\n                              <strong>{currentWrongTopics.matematik.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Sosyal */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-purple-600\">Sosyal Bilimler</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.sosyal.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            sosyal: { ...newExamResult.subjects.sosyal, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.sosyal.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-purple-50/80 via-white/60 to-indigo-50/60 dark:from-purple-950/30 dark:via-gray-800/60 dark:to-indigo-950/30 rounded-2xl p-5 border-2 border-purple-200/50 dark:border-purple-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-purple-800 dark:text-purple-200 flex items-center gap-2\">\n                            🔍 Sosyal Bilimler Yanlış Konu Analizi\n                            <div className=\"text-xs bg-purple-100 dark:bg-purple-900/40 px-2 py-1 rounded-full text-purple-700 dark:text-purple-300\">\n                              {parseInt(newExamResult.subjects.sosyal.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-purple-600/80 dark:text-purple-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.sosyal || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, sosyal: e.target.value});\n                            const topics = e.target.value.split(',').map(t => {\n                              const cleanTopic = toTitleCase(t.trim());\n                              return cleanTopic ? `${newExamResult.exam_type} Sosyal Bilimler - ${cleanTopic}` : '';\n                            }).filter(t => t.length > 0);\n                            \n                            // Yinelenenleri kaldır\n                            const uniqueTopics = [...new Set(topics)];\n                            \n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                sosyal: { ...newExamResult.subjects.sosyal, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: tarih dönemleri, coğrafya, vatandaşlık, felsefe...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-purple-300/60 dark:border-purple-600/50 focus:border-purple-500 dark:focus:border-purple-400 focus:ring-2 focus:ring-purple-200 dark:focus:ring-purple-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.sosyal && (\n                          <div className=\"flex items-center gap-2 p-3 bg-purple-100/60 dark:bg-purple-900/30 rounded-xl border border-purple-200/60 dark:border-purple-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-purple-600 dark:text-purple-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-purple-700/90 dark:text-purple-300/90\">\n                              <strong>{currentWrongTopics.sosyal.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n\n                {/* Fen */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-orange-600\">Fen Bilimleri</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"20\"\n                        value={newExamResult.subjects.fen.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fen: { ...newExamResult.subjects.fen, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fen.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-br from-orange-50/80 via-white/60 to-amber-50/60 dark:from-orange-950/30 dark:via-gray-800/60 dark:to-amber-950/30 rounded-2xl p-5 border-2 border-orange-200/50 dark:border-orange-700/40 shadow-lg backdrop-blur-sm mt-4\">\n                      <div className=\"flex items-center gap-3 mb-4\">\n                        <div className=\"p-2 bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg\">\n                          <Search className=\"h-4 w-4 text-white\" />\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-bold text-orange-800 dark:text-orange-200 flex items-center gap-2\">\n                            🔍 Fen Bilimleri Yanlış Konu Analizi\n                            <div className=\"text-xs bg-orange-100 dark:bg-orange-900/40 px-2 py-1 rounded-full text-orange-700 dark:text-orange-300\">\n                              {parseInt(newExamResult.subjects.fen.wrong)} yanlış\n                            </div>\n                          </label>\n                          <p className=\"text-xs text-orange-600/80 dark:text-orange-400/80 mt-1\">\n                            Eksik konuları belirterek öncelik listesine ekleyin\n                          </p>\n                        </div>\n                      </div>\n                      \n                      <div className=\"space-y-3\">\n                        <Input\n                          value={currentWrongTopics.fen || \"\"}\n                          onChange={(e) => {\n                            setCurrentWrongTopics({...currentWrongTopics, fen: e.target.value});\n                            const topics = e.target.value.split(',').map(t => {\n                              const cleanTopic = toTitleCase(t.trim());\n                              return cleanTopic ? `${newExamResult.exam_type} Fen Bilimleri - ${cleanTopic}` : '';\n                            }).filter(t => t.length > 0);\n                            \n                            // Yinelenenleri kaldır\n                            const uniqueTopics = [...new Set(topics)];\n                            \n                            setNewExamResult({\n                              ...newExamResult,\n                              subjects: {\n                                ...newExamResult.subjects,\n                                fen: { ...newExamResult.subjects.fen, wrong_topics: uniqueTopics }\n                              }\n                            });\n                          }}\n                          placeholder=\"Örnek: fizik konuları, kimya bağları, biyoloji sistemleri...\"\n                          className=\"bg-white/90 dark:bg-gray-800/90 border-orange-300/60 dark:border-orange-600/50 focus:border-orange-500 dark:focus:border-orange-400 focus:ring-2 focus:ring-orange-200 dark:focus:ring-orange-800/50 rounded-xl shadow-sm text-sm\"\n                        />\n                        {currentWrongTopics.fen && (\n                          <div className=\"flex items-center gap-2 p-3 bg-orange-100/60 dark:bg-orange-900/30 rounded-xl border border-orange-200/60 dark:border-orange-700/40\">\n                            <Lightbulb className=\"h-4 w-4 text-orange-600 dark:text-orange-400 flex-shrink-0\" />\n                            <div className=\"text-xs text-orange-700/90 dark:text-orange-300/90\">\n                              <strong>{currentWrongTopics.fen.split(',').length} konu</strong> öncelik listesine eklenecek ve hata sıklığı analizinde gösterilecek\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* AYT Sayısal Konular */}\n            {newExamResult.exam_type === \"AYT\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-semibold\">AYT Sayısal Dersleri</h3>\n                \n                {/* Matematik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-blue-600\">Matematik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"40\"\n                        value={newExamResult.subjects.matematik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            matematik: { ...newExamResult.subjects.matematik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.matematik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-blue-50/70 to-indigo-50/50 dark:from-blue-900/20 dark:to-indigo-900/15 rounded-xl p-4 border border-blue-200/40 dark:border-blue-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-blue-500\" />\n                        <label className=\"text-sm font-semibold text-blue-700 dark:text-blue-300\">🔍 Matematik Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.matematik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, matematik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => toTitleCase(t.trim())).filter(t => t.length > 0);\n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              matematik: { ...newExamResult.subjects.matematik, wrong_topics: topics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3 şeklinde virgülle ayırarak yazın...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-blue-200 dark:border-blue-700/50 focus:border-blue-400 dark:focus:border-blue-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.matematik && (\n                        <div className=\"mt-2 text-xs text-blue-600/70 dark:text-blue-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Fizik */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-red-600\">Fizik</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"14\"\n                        value={newExamResult.subjects.fizik.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            fizik: { ...newExamResult.subjects.fizik, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.fizik.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-indigo-50/70 to-blue-50/50 dark:from-indigo-900/20 dark:to-blue-900/15 rounded-xl p-4 border border-indigo-200/40 dark:border-indigo-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-indigo-500\" />\n                        <label className=\"text-sm font-semibold text-indigo-700 dark:text-indigo-300\">🔍 Fizik Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.fizik || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, fizik: e.target.value});\n                          const topics = e.target.value.split(',').map(t => {\n                            const cleanTopic = toTitleCase(t.trim());\n                            return cleanTopic ? `${newExamResult.exam_type} Fizik - ${cleanTopic}` : '';\n                          }).filter(t => t.length > 0);\n                          \n                          // Yinelenenleri kaldır\n                          const uniqueTopics = [...new Set(topics)];\n                          \n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              fizik: { ...newExamResult.subjects.fizik, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3 şeklinde virgülle ayırarak yazın...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-indigo-200 dark:border-indigo-700/50 focus:border-indigo-400 dark:focus:border-indigo-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.fizik && (\n                        <div className=\"mt-2 text-xs text-indigo-600/70 dark:text-indigo-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Kimya */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-green-600\">Kimya</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.kimya.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            kimya: { ...newExamResult.subjects.kimya, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.kimya.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-green-50/70 to-emerald-50/50 dark:from-green-900/20 dark:to-emerald-900/15 rounded-xl p-4 border border-green-200/40 dark:border-green-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-green-500\" />\n                        <label className=\"text-sm font-semibold text-green-700 dark:text-green-300\">🔍 Kimya Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.kimya || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, kimya: e.target.value});\n                          const topics = e.target.value.split(',').map(t => {\n                            const cleanTopic = toTitleCase(t.trim());\n                            return cleanTopic ? `${newExamResult.exam_type} Kimya - ${cleanTopic}` : '';\n                          }).filter(t => t.length > 0);\n                          \n                          // Yinelenenleri kaldır\n                          const uniqueTopics = [...new Set(topics)];\n                          \n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              kimya: { ...newExamResult.subjects.kimya, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3 şeklinde virgülle ayırarak yazın...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-green-200 dark:border-green-700/50 focus:border-green-400 dark:focus:border-green-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.kimya && (\n                        <div className=\"mt-2 text-xs text-green-600/70 dark:text-green-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n\n                {/* Biyoloji */}\n                <div className=\"border rounded-lg p-4 space-y-3\">\n                  <h4 className=\"font-medium text-teal-600\">Biyoloji</h4>\n                  <div className=\"grid grid-cols-3 gap-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.correct}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, correct: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.wrong}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, wrong: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium mb-1\">Boş</label>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        max=\"13\"\n                        value={newExamResult.subjects.biyoloji.blank}\n                        onChange={(e) => setNewExamResult({\n                          ...newExamResult,\n                          subjects: {\n                            ...newExamResult.subjects,\n                            biyoloji: { ...newExamResult.subjects.biyoloji, blank: e.target.value }\n                          }\n                        })}\n                      />\n                    </div>\n                  </div>\n                  {parseInt(newExamResult.subjects.biyoloji.wrong) > 0 && (\n                    <div className=\"bg-gradient-to-r from-teal-50/70 to-cyan-50/50 dark:from-teal-900/20 dark:to-cyan-900/15 rounded-xl p-4 border border-teal-200/40 dark:border-teal-700/30 mt-3\">\n                      <div className=\"flex items-center gap-2 mb-3\">\n                        <AlertTriangle className=\"h-4 w-4 text-teal-500\" />\n                        <label className=\"text-sm font-semibold text-teal-700 dark:text-teal-300\">🔍 Biyoloji Eksik Konular</label>\n                      </div>\n                      <Input\n                        value={currentWrongTopics.biyoloji || \"\"}\n                        onChange={(e) => {\n                          setCurrentWrongTopics({...currentWrongTopics, biyoloji: e.target.value});\n                          const topics = e.target.value.split(',').map(t => {\n                            const cleanTopic = toTitleCase(t.trim());\n                            return cleanTopic ? `${newExamResult.exam_type} Biyoloji - ${cleanTopic}` : '';\n                          }).filter(t => t.length > 0);\n                          \n                          // Yinelenenleri kaldır\n                          const uniqueTopics = [...new Set(topics)];\n                          \n                          setNewExamResult({\n                            ...newExamResult,\n                            subjects: {\n                              ...newExamResult.subjects,\n                              biyoloji: { ...newExamResult.subjects.biyoloji, wrong_topics: uniqueTopics }\n                            }\n                          });\n                        }}\n                        placeholder=\"konu1, konu2, konu3 şeklinde virgülle ayırarak yazın...\"\n                        className=\"bg-white/80 dark:bg-gray-800/80 border-teal-200 dark:border-teal-700/50 focus:border-teal-400 dark:focus:border-teal-500 rounded-xl shadow-sm\"\n                      />\n                      {currentWrongTopics.biyoloji && (\n                        <div className=\"mt-2 text-xs text-teal-600/70 dark:text-teal-400/70\">\n                          💡 Bu konular öncelik listesine eklenecek\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex gap-2\">\n              <Button\n                onClick={() => {\n                  // Konulara dayalı toplam neti hesapla\n                  let totalNet = 0;\n                  Object.values(newExamResult.subjects).forEach(subject => {\n                    const correct = parseInt(subject.correct) || 0;\n                    const wrong = parseInt(subject.wrong) || 0;\n                    totalNet += correct - (wrong * 0.25);\n                  });\n                  \n                  createExamResultMutation.mutate({\n                    exam_name: newExamResult.exam_name,\n                    exam_date: newExamResult.exam_date,\n                    exam_type: newExamResult.exam_type, // ÖNEMLİ DÜZELTME: TYT/AYT ayrımının doğru yapılması için exam_type ekleyin.\n                    tyt_net: newExamResult.exam_type === \"TYT\" ? totalNet.toString() : \"0\",\n                    ayt_net: newExamResult.exam_type === \"AYT\" ? totalNet.toString() : \"0\",\n                    subjects_data: JSON.stringify(newExamResult.subjects)\n                  });\n                }}\n                disabled={!newExamResult.exam_name || createExamResultMutation.isPending}\n                className=\"flex-1\"\n              >\n                {createExamResultMutation.isPending ? 'Kaydediliyor...' : 'Kaydet'}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => {\n                  setShowExamDialog(false);\n                  setNewExamResult({ \n                    exam_name: \"\", \n                    exam_date: new Date().toISOString().split('T')[0], \n                    exam_type: \"TYT\" as \"TYT\" | \"AYT\",\n                    subjects: {\n                      turkce: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      matematik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      sosyal: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fen: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      fizik: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      kimya: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] },\n                      biyoloji: { correct: \"\", wrong: \"\", blank: \"\", wrong_topics: [] as string[] }\n                    }\n                  });\n                  setCurrentWrongTopics({}); // Tüm yanlış konu giriş alanlarını temizle\n                }}\n              >\n                İptal\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Aylık Rapor Talep Modalı */}\n      <Dialog open={showReportModal} onOpenChange={setShowReportModal}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold text-center bg-gradient-to-r from-purple-600 to-indigo-600 bg-clip-text text-transparent\">\n              📊 Aylık Rapor Talep Et\n            </DialogTitle>\n            <DialogDescription className=\"text-center text-muted-foreground\">\n              Bu ayın çalışma raporunuz hem email hem de SMS olarak gönderilecektir\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                📧 Email Adresi\n              </label>\n              <Input\n                type=\"email\"\n                placeholder=\"ornek@email.com\"\n                value={reportContactInfo.email}\n                onChange={(e) => setReportContactInfo(prev => ({ ...prev, email: e.target.value }))}\n                className=\"w-full\"\n                data-testid=\"input-email-report\"\n              />\n            </div>\n            \n            <div>\n              <label className=\"text-sm font-medium text-foreground mb-2 block\">\n                📱 Telefon Numarası\n              </label>\n              <Input\n                type=\"tel\"\n                placeholder=\"+90 5XX XXX XX XX\"\n                value={reportContactInfo.phone}\n                onChange={(e) => setReportContactInfo(prev => ({ ...prev, phone: e.target.value }))}\n                className=\"w-full\"\n                data-testid=\"input-phone-report\"\n              />\n            </div>\n          </div>\n\n          <div className=\"flex gap-3 mt-6\">\n            <Button\n              onClick={() => {\n                // Yapılacaklar: Aylık raporu oluştur ve gönder\n                toast({ \n                  title: \"📬 Rapor Gönderiliyor\", \n                  description: `Aylık rapor ${reportContactInfo.email} ve ${reportContactInfo.phone} adreslerine gönderiliyor...` \n                });\n                setShowReportModal(false);\n                setReportContactInfo({ email: \"\", phone: \"\" });\n              }}\n              disabled={!reportContactInfo.email || !reportContactInfo.phone}\n              className=\"flex-1 bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700\"\n              data-testid=\"button-send-report\"\n            >\n              📄 Rapor Gönder\n            </Button>\n            \n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowReportModal(false);\n                setReportContactInfo({ email: \"\", phone: \"\" });\n              }}\n              className=\"px-6\"\n              data-testid=\"button-cancel-report\"\n            >\n              İptal\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":141181},"client/src/pages/home.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { TasksSection } from \"@/components/tasks-section\";\nimport { ProfileModal } from \"@/components/profile-modal\";\nimport { AddTaskModal } from \"@/components/add-task-modal\";\n\nexport default function Home() {\n  const [addTaskModalOpen, setAddTaskModalOpen] = useState(false);\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n      <main className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Görevler Bölümü - Artık kenar çubuğu yok */}\n        <TasksSection onAddTask={() => setAddTaskModalOpen(true)} />\n      </main>\n\n      {/* Modallar */}\n      <AddTaskModal \n        open={addTaskModalOpen} \n        onOpenChange={setAddTaskModalOpen} \n      />\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1104},"client/src/pages/homepage.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { EnhancedWeatherWidget } from \"@/components/enhanced-weather-widget\";\nimport { CountdownWidget } from \"@/components/countdown-widget\";\nimport { TodaysTasksWidget } from \"@/components/todays-tasks-widget\";\nimport { Calendar, TrendingUp, Clock, ChevronLeft, ChevronRight, Mail, Zap, FileText, Send } from \"lucide-react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Task, QuestionLog, ExamResult } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\n// Saatli Ortalanmış Karşılama Bölümü Bileşeni\nfunction CenteredWelcomeSection() {\n  const [currentTime, setCurrentTime] = useState(new Date());\n  \n  // Her saniye güncelleme zamanı\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, []);\n\n  // Sakarya Serdivan (Türkiye saat dilimi) için tarih ve saat formatlama\n  const formatDateTime = () => {\n    const options: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      weekday: 'long',\n      day: 'numeric', \n      month: 'long',\n      year: 'numeric'\n    };\n    \n    const timeOptions: Intl.DateTimeFormatOptions = {\n      timeZone: 'Europe/Istanbul',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n\n    const dateStr = currentTime.toLocaleDateString('tr-TR', options);\n    const timeStr = currentTime.toLocaleTimeString('tr-TR', timeOptions);\n    \n    return { dateStr, timeStr };\n  };\n\n  const { dateStr, timeStr } = formatDateTime();\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Hoşgeldin Mesajı */}\n      <div className=\"space-y-2\">\n        <h1 className=\"text-5xl font-black bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent\">\n          Hoşgeldiniz Berat Çakıroğlu\n        </h1>\n      </div>\n      \n      {/* Ortalanmış Saat ve Saat Göstergesi */}\n      <div className=\"flex flex-col items-center space-y-6\">\n        {/* Zaman ve Saat Konteyneri - Mükemmel Ortalanmış */}\n        <div className=\"flex items-center justify-center space-x-6\">\n          {/* Geliştirilmiş Saat İkonu - Zaman ile Ortalanmış */}\n          <div className=\"relative\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-purple-500/30 via-violet-600/30 to-black/40 rounded-3xl blur-2xl animate-pulse\"></div>\n            <div className=\"relative w-20 h-20 bg-black/10 dark:bg-purple-950/20 backdrop-blur-xl border border-purple-500/20 dark:border-purple-400/20 rounded-3xl flex items-center justify-center shadow-2xl\">\n              <Clock className=\"h-12 w-12 text-purple-600 dark:text-purple-400 drop-shadow-lg\" />\n            </div>\n          </div>\n          \n          {/* Mor-Siyah Gradyanlı Geliştirilmiş Saat Göstergesi - Ortalanmış */}\n          <div className=\"text-8xl font-black bg-gradient-to-r from-purple-600 via-violet-700 to-black dark:from-purple-400 dark:via-violet-500 dark:to-gray-300 bg-clip-text text-transparent font-mono tracking-tighter drop-shadow-lg\" data-testid=\"text-time-center\">\n            {timeStr}\n          </div>\n        </div>\n        \n        {/* Stilize Tarih ve Konum - Sola Hizalı ve Ortalanmış */}\n        <div className=\"flex items-center justify-center space-x-4 text-2xl font-semibold\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-3 h-3 rounded-full bg-gradient-to-r from-purple-500 to-violet-600 shadow-lg animate-pulse\"></div>\n            <span className=\"bg-gradient-to-r from-purple-800 to-black dark:from-purple-300 dark:to-gray-200 bg-clip-text text-transparent font-bold\" data-testid=\"text-date-center\">\n              {dateStr}\n            </span>\n          </div>\n          <span className=\"text-muted-foreground/50\">•</span>\n          <div className=\"flex items-center space-x-2 text-muted-foreground\">\n            <span className=\"text-lg\">📍</span>\n            <span className=\"font-bold bg-gradient-to-r from-purple-600 to-violet-700 dark:from-purple-400 dark:to-violet-500 bg-clip-text text-transparent\">\n              Sakarya, Serdivan\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function Homepage() {\n  const [selectedDate, setSelectedDate] = useState<string>(\"\");\n  const [activityFilter, setActivityFilter] = useState<'all' | 'tasks' | 'questions' | 'exams'>('all');\n  \n  // Stakvim navigasyonu için durum (güncel tarihten ayrı)\n  const currentDate = new Date();\n  const [displayYear, setDisplayYear] = useState(currentDate.getFullYear());\n  const [displayMonth, setDisplayMonth] = useState(currentDate.getMonth());\n  \n  // Kategori isimlerini düzgün formatta gösterecek fonksiyon\n  const getCategoryText = (category: string) => {\n    switch (category) {\n      case \"genel\":\n        return \"Genel\";\n      case \"turkce\":\n        return \"Türkçe\";\n      case \"sosyal\":\n        return \"Sosyal Bilimler\";\n      case \"matematik\":\n        return \"Matematik\";\n      case \"fizik\":\n        return \"Fizik\";\n      case \"kimya\":\n        return \"Kimya\";\n      case \"biyoloji\":\n        return \"Biyoloji\";\n      case \"tyt-geometri\":\n        return \"TYT Geometri\";\n      case \"ayt-geometri\":\n        return \"AYT Geometri\";\n      case \"ayt-matematik\":\n        return \"AYT Matematik\";\n      case \"ayt-fizik\":\n        return \"AYT Fizik\";\n      case \"ayt-kimya\":\n        return \"AYT Kimya\";\n      case \"ayt-biyoloji\":\n        return \"AYT Biyoloji\";\n      default:\n        return category;\n    }\n  };\n  \n  // Modal durumları raporla\n  const [showReportModal, setShowReportModal] = useState(false);\n  const [reportActivated, setReportActivated] = useState(false);\n  const [timeUntilMonthEnd, setTimeUntilMonthEnd] = useState({ days: 0, hours: 0, minutes: 0, seconds: 0 });\n  const [autoEmailSent, setAutoEmailSent] = useState(false);\n  \n  const { toast } = useToast();\n\n  // Ay sonuna kadar kalan süreyi hesapla\n  const calculateTimeUntilMonthEnd = useCallback(() => {\n    const now = new Date();\n    const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n    const timeDiff = endOfMonth.getTime() - now.getTime();\n    \n    if (timeDiff <= 0) {\n      return { days: 0, hours: 0, minutes: 0, seconds: 0 };\n    }\n    \n    const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\n    const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);\n    \n    return { days, hours, minutes, seconds };\n  }, []);\n\n  // Saniye başına geri sayımı güncelle\n  useEffect(() => {\n    const updateCountdown = () => {\n      const timeLeft = calculateTimeUntilMonthEnd();\n      setTimeUntilMonthEnd(timeLeft);\n      \n      // Ayın sonunda otomatik olarak e-posta gönder\n      if (timeLeft.days === 0 && timeLeft.hours === 0 && timeLeft.minutes === 0 && timeLeft.seconds === 0 && !autoEmailSent) {\n        setAutoEmailSent(true);\n        handleAutoSendEmail();\n      }\n    };\n    \n    updateCountdown();\n    const timer = setInterval(updateCountdown, 1000);\n    \n    return () => clearInterval(timer);\n  }, [calculateTimeUntilMonthEnd, autoEmailSent]);\n\n  // Ay sonunda otomatik olarak e-posta gönder\n  const handleAutoSendEmail = async () => {\n    try {\n      const currentDate = new Date();\n      const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n      const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n      \n      const monthlyTasks = allTasks.filter(task => {\n        if (task.completedAt) {\n          const completedDate = new Date(task.completedAt);\n          return completedDate >= startOfMonth && completedDate <= endOfMonth;\n        }\n        return false;\n      });\n\n      const monthlyQuestionLogs = questionLogs.filter((log: any) => {\n        if (log.study_date) {\n          const logDate = new Date(log.study_date);\n          return logDate >= startOfMonth && logDate <= endOfMonth;\n        }\n        return false;\n      });\n\n      const monthlyExamResults = examResults.filter((exam: any) => {\n        if (exam.exam_date) {\n          const examDate = new Date(exam.exam_date);\n          return examDate >= startOfMonth && examDate <= endOfMonth;\n        }\n        return false;\n      });\n\n      // Calculate comprehensive statistics for auto-send\n      const totalQuestions = monthlyQuestionLogs.reduce((sum: number, log: any) => \n        sum + parseInt(log.correct_count || '0') + parseInt(log.wrong_count || '0') + parseInt(log.blank_count || '0'), 0\n      );\n      const totalCorrect = monthlyQuestionLogs.reduce((sum: number, log: any) => \n        sum + parseInt(log.correct_count || '0'), 0\n      );\n      const totalWrong = monthlyQuestionLogs.reduce((sum: number, log: any) => \n        sum + parseInt(log.wrong_count || '0'), 0\n      );\n\n      // Hata yapılan konuları topla ve sırala\n      const wrongTopicsMap: Record<string, { count: number, subject: string }> = {};\n      monthlyQuestionLogs.forEach((log: any) => {\n        const wrongTopics = log.wrong_topics || [];\n        wrongTopics.forEach((topic: string) => {\n          if (!wrongTopicsMap[topic]) {\n            wrongTopicsMap[topic] = { count: 0, subject: log.subject || 'Bilinmeyen' };\n          }\n          wrongTopicsMap[topic].count++;\n        });\n      });\n\n      const frequentWrongTopics = Object.entries(wrongTopicsMap)\n        .map(([topic, data]) => ({ topic, count: data.count, subject: data.subject }))\n        .sort((a, b) => b.count - a.count)\n        .slice(0, 10);\n\n      // Rekor deneme netleri hesapla\n      const tytExams = monthlyExamResults.filter((exam: any) => exam.exam_type === 'TYT');\n      const aytExams = monthlyExamResults.filter((exam: any) => exam.exam_type === 'AYT');\n      \n      const maxTytNet = tytExams.length > 0 \n        ? Math.max(...tytExams.map((exam: any) => parseFloat(exam.tyt_net || '0')))\n        : 0;\n      const maxAytNet = aytExams.length > 0\n        ? Math.max(...aytExams.map((exam: any) => parseFloat(exam.ayt_net || '0')))\n        : 0;\n\n      // Deneme detaylarını hazırla (subjectNets ile birlikte)\n      const examDetailsWithSubjects = monthlyExamResults.map((exam: any) => ({\n        ...exam,\n        subjects: exam.subjects_data || []\n      }));\n\n      const comprehensiveReportData = {\n        totalTasks: monthlyTasks.length,\n        totalQuestions: totalQuestions,\n        correctAnswers: totalCorrect,\n        wrongAnswers: totalWrong,\n        totalExams: monthlyExamResults.length,\n        totalActivities: monthlyTasks.length + monthlyQuestionLogs.length + monthlyExamResults.length,\n        month: currentDate.toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' }),\n        date: currentDate.toLocaleDateString('tr-TR'),\n        tasks: monthlyTasks,\n        questionLogs: monthlyQuestionLogs,\n        examResults: monthlyExamResults,\n        examDetailsWithSubjects: examDetailsWithSubjects,\n        frequentWrongTopics: frequentWrongTopics,\n        maxTytNet: maxTytNet,\n        maxAytNet: maxAytNet,\n        user: {\n          name: 'Berat Çakıroğlu',\n          email: 'beratkaccow03@gmail.com'\n        }\n      };\n\n      // Send data in correct format for auto-send\n      const emailRequest = {\n        email: 'beratkaccow03@gmail.com',\n        phone: '+90 555 123 45 67',\n        reportData: comprehensiveReportData\n      };\n\n      const response = await fetch(\"/api/send-report\", {\n        method: \"POST\",\n        body: JSON.stringify(emailRequest),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"🎉 Otomatik Aylık Rapor!\",\n          description: \"Aylık rapor otomatik olarak gönderildi: \" + result.message,\n          duration: 10000,\n        });\n      }\n    } catch (error) {\n      console.error('Auto email error:', error);\n    }\n  };\n\n  // E-posta gönderme mutasyonu\n  const sendEmailMutation = useMutation({\n    mutationFn: async (reportData: any) => {\n      const response = await fetch(\"/api/send-report\", {\n        method: \"POST\",\n        body: JSON.stringify(reportData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      \n      const result = await response.json();\n      \n      if (!response.ok) {\n        // Detaylı hata bilgisini exception olarak fırlat\n        const error: any = new Error(result.message || \"E-posta gönderilemedi\");\n        error.details = result.details;\n        error.instructions = result.instructions;\n        error.help = result.help;\n        throw error;\n      }\n      \n      return result;\n    },\n    onSuccess: (response) => {\n      toast({\n        title: response.message || \"✅ Rapor Gönderildi!\",\n        description: response.details || \"E-posta başarıyla gönderildi.\",\n        duration: 3000,\n      });\n      setShowReportModal(false);\n    },\n    onError: (error: any) => {\n      // Detaylı hata mesajını göster\n      let description = error?.message || \"E-posta gönderilirken hata oluştu.\";\n      \n      if (error.details) {\n        description = error.details;\n      }\n      \n      if (error.instructions) {\n        description += \"\\n\\n\" + error.instructions;\n      }\n      \n      if (error.help) {\n        description += \"\\n\\n\" + error.help;\n      }\n      \n      toast({\n        title: error?.message || \"Hata!\",\n        description: description,\n        variant: \"destructive\",\n        duration: 15000, // Daha uzun süre göster\n      });\n    },\n  });\n\n  const { data: calendarData } = useQuery<{\n    date: string;\n    dayNumber: number;\n    daysRemaining: number;\n    tasks: Task[];\n    tasksCount: number;\n  }>({\n    queryKey: [\"/api/calendar\", selectedDate],\n    queryFn: async () => {\n      if (!selectedDate) return null;\n      const response = await fetch(`/api/calendar/${selectedDate}`);\n      if (!response.ok) throw new Error('Failed to fetch calendar data');\n      return response.json();\n    },\n    enabled: !!selectedDate,\n  });\n\n  // Tüm görevleri, soru kayıtlarını ve sınav sonuçlarını almak için sorgu\n  const { data: allTasks = [] } = useQuery<Task[]>({\n    queryKey: [\"/api/tasks\"],\n  });\n  \n  const { data: questionLogs = [] } = useQuery<QuestionLog[]>({\n    queryKey: [\"/api/question-logs\"],\n  });\n  \n  const { data: examResults = [] } = useQuery<ExamResult[]>({\n    queryKey: [\"/api/exam-results\"],\n  });\n\n  // Takvim günlerini önbelleğe almak için memoize edilmiş oluşturma\n  const calendarDays = useMemo(() => {\n    const year = displayYear;\n    const month = displayMonth;\n    const firstDay = new Date(year, month, 1);\n    \n    // Pazartesi gününden başlayın (haftalık düzenlemeyi sabitleyin)\n    const startOffset = (firstDay.getDay() + 6) % 7;\n    const startDate = new Date(year, month, 1 - startOffset);\n    \n    const days = [];\n    for (let i = 0; i < 42; i++) {\n      const date = new Date(startDate);\n      date.setDate(startDate.getDate() + i);\n      days.push(date);\n    }\n    \n    return days;\n  }, [displayYear, displayMonth]);\n\n  // Güncel tarih sabitleri için karşılaştırma\n  const today = currentDate.getDate();\n  const currentMonth = currentDate.getMonth();\n  const currentYear = currentDate.getFullYear();\n\n  // Optimize edilmiş gezinme işlevleri için useCallback kullanımı\n  const navigateMonth = useCallback((direction: 'prev' | 'next') => {\n    if (direction === 'prev') {\n      setDisplayMonth(prev => prev === 0 ? 11 : prev - 1);\n      setDisplayYear(prev => displayMonth === 0 ? prev - 1 : prev);\n    } else {\n      setDisplayMonth(prev => prev === 11 ? 0 : prev + 1);\n      setDisplayYear(prev => displayMonth === 11 ? prev + 1 : prev);\n    }\n  }, [displayMonth]);\n\n  // Yeniden hesaplamayı önlemek için belleğe alınmış etkinlik kontrolü\n  const hasActivities = useCallback((date: Date) => {\n    const dateStr = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    \n    // Tamamlanan görevleri kontrol edin\n    const hasCompletedTasks = allTasks.some(task => {\n      if (!task.completedAt) return false;\n      const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n      return completedDate === dateStr;\n    });\n    \n    // Planlanmış görevleri kontrol et (due date'i olan görevler)\n    const hasScheduledTasks = allTasks.some(task => {\n      if (!task.dueDate) return false;\n      const taskDate = task.dueDate.split('T')[0];\n      return taskDate === dateStr;\n    });\n    \n    // Soru günlüklerini kontrol et\n    const hasQuestionLogs = questionLogs.some(log => log.study_date === dateStr);\n    \n    // Sınav sonuçlarını kontrol et\n    const hasExamResults = examResults.some(exam => exam.exam_date === dateStr);\n    \n    return hasCompletedTasks || hasScheduledTasks || hasQuestionLogs || hasExamResults;\n  }, [allTasks, questionLogs, examResults]);\n\n  // Belirli bir tarih için etkinlikleri al\n  const getActivitiesForDate = useCallback((date: Date) => {\n    const dateStr = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date.getDate().toString().padStart(2, '0')}`;\n    \n    const completedTasks = allTasks.filter(task => {\n      if (!task.completedAt) return false;\n      const completedDate = new Date(task.completedAt).toISOString().split('T')[0];\n      return completedDate === dateStr;\n    });\n    \n    const dayQuestionLogs = questionLogs.filter(log => log.study_date === dateStr);\n    const dayExamResults = examResults.filter(exam => exam.exam_date === dateStr);\n    \n    return {\n      tasks: completedTasks,\n      questionLogs: dayQuestionLogs,\n      examResults: dayExamResults,\n      total: completedTasks.length + dayQuestionLogs.length + dayExamResults.length\n    };\n  }, [allTasks, questionLogs, examResults]);\n\n  // Ay sonuna kadar kalan günleri hesapla\n  const getDaysUntilMonthEnd = useCallback(() => {\n    const now = new Date();\n    const lastDayOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    const timeDiff = lastDayOfMonth.getTime() - now.getTime();\n    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));\n    return daysDiff;\n  }, []);\n\n  // Ayın başından seçilen tarihe kadar tüm etkinlikleri al\n  const getMonthlyActivities = useCallback((endDate: Date) => {\n    const startOfMonth = new Date(endDate.getFullYear(), endDate.getMonth(), 1);\n    const activities = {\n      tasks: [] as Task[],\n      questionLogs: [] as QuestionLog[],\n      examResults: [] as ExamResult[],\n      total: 0\n    };\n\n    // Ayın başından seçilen tarihe kadar her günü döngü ile geç\n    const currentDate = new Date(startOfMonth);\n    while (currentDate <= endDate) {\n      const dayActivities = getActivitiesForDate(new Date(currentDate));\n      activities.tasks.push(...dayActivities.tasks);\n      activities.questionLogs.push(...dayActivities.questionLogs);\n      activities.examResults.push(...dayActivities.examResults);\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n\n    activities.total = activities.tasks.length + activities.questionLogs.length + activities.examResults.length;\n    return activities;\n  }, [getActivitiesForDate]);\n\n  const handleDateClick = (date: Date) => {\n    // Düzeltme: Zaman dilimi sorunları olmadan gerçek tarihi kullanın.\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    const dateStr = `${year}-${month}-${day}`;\n    setSelectedDate(dateStr);\n  };\n\n  const handleSendEmail = () => {\n    // Rapor için mevcut ay etkinliklerini al\n    const currentDate = new Date();\n    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);\n    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);\n    \n    // Geçerli ayın verilerini filtrele (kenar çubuğu uygulamasıyla aynı)\n    const monthlyTasks = allTasks.filter(task => {\n      if (task.completedAt) {\n        const completedDate = new Date(task.completedAt);\n        return completedDate >= startOfMonth && completedDate <= endOfMonth;\n      }\n      return false;\n    });\n\n    const monthlyQuestionLogs = questionLogs.filter((log: any) => {\n      if (log.study_date) {\n        const logDate = new Date(log.study_date);\n        return logDate >= startOfMonth && logDate <= endOfMonth;\n      }\n      return false;\n    });\n\n    const monthlyExamResults = examResults.filter((exam: any) => {\n      if (exam.exam_date) {\n        const examDate = new Date(exam.exam_date);\n        return examDate >= startOfMonth && examDate <= endOfMonth;\n      }\n      return false;\n    });\n\n    // Calculate comprehensive statistics\n    const totalQuestions = monthlyQuestionLogs.reduce((sum: number, log: any) => \n      sum + parseInt(log.correct_count || '0') + parseInt(log.wrong_count || '0') + parseInt(log.blank_count || '0'), 0\n    );\n    const totalCorrect = monthlyQuestionLogs.reduce((sum: number, log: any) => \n      sum + parseInt(log.correct_count || '0'), 0\n    );\n    const totalWrong = monthlyQuestionLogs.reduce((sum: number, log: any) => \n      sum + parseInt(log.wrong_count || '0'), 0\n    );\n\n    const comprehensiveReportData = {\n      totalTasks: monthlyTasks.length,\n      totalQuestions: totalQuestions,\n      correctAnswers: totalCorrect,\n      wrongAnswers: totalWrong,\n      totalExams: monthlyExamResults.length,\n      totalActivities: monthlyTasks.length + monthlyQuestionLogs.length + monthlyExamResults.length,\n      month: currentDate.toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' }),\n      date: currentDate.toLocaleDateString('tr-TR'),\n      tasks: monthlyTasks,\n      questionLogs: monthlyQuestionLogs,\n      examResults: monthlyExamResults,\n      user: {\n        name: 'Berat Çakıroğlu',\n        email: 'beratkaccow03@gmail.com'\n      }\n    };\n\n    // Send data in format expected by backend: { email, phone, reportData }\n    const emailRequest = {\n      email: 'beratkaccow03@gmail.com',\n      phone: '+90 555 123 45 67', // Optional phone number\n      reportData: comprehensiveReportData\n    };\n\n    sendEmailMutation.mutate(emailRequest);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header hideClockOnHomepage={true} />\n      \n\n      {/* Saatli Ortaya Alınmış Karşılama Bölümü */}\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12 text-center\">\n        <CenteredWelcomeSection />\n      </div>\n      \n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n\n        {/* Üst Sıra - Takvim ve Bugünün Görevleri Yan Yana */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-6 mb-6 items-stretch\">\n          {/* Modern Takvim Widget'ı - 3 sütun kaplar (biraz daha büyük) */}\n          <div className=\"lg:col-span-3 bg-gradient-to-br from-card to-card/80 rounded-2xl border border-border/50 p-4 shadow-lg backdrop-blur-sm transition-all duration-300 hover:shadow-xl\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-xl font-bold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent flex items-center\">\n                <Calendar className=\"h-5 w-5 mr-3 text-primary\" />\n                Takvim\n              </h3>\n              \n              {/* Rapor Gönder Düğmesi - Vurgulanan alana taşındı */}\n              <div className=\"flex items-center gap-3\">\n                <button\n                  onClick={() => {\n                    if (reportActivated) {\n                      setShowReportModal(true);\n                    }\n                  }}\n                  className=\"relative bg-purple-500/15 hover:bg-purple-500/25 backdrop-blur-sm border-2 border-purple-500/40 hover:border-purple-400/60 text-purple-400 hover:text-purple-300 font-semibold px-4 py-3 rounded-lg shadow-lg hover:shadow-purple-500/25 transition-all duration-300 transform hover:scale-105 flex flex-col items-center space-y-1 group\"\n                  data-testid=\"button-report-send\"\n                  style={{\n                    boxShadow: reportActivated \n                      ? '0 0 20px rgba(147, 51, 234, 0.4), 0 0 40px rgba(147, 51, 234, 0.1)' \n                      : '0 0 15px rgba(147, 51, 234, 0.3)'\n                  }}\n                >\n                  <div className=\"flex items-center space-x-2\">\n                    <FileText className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-bold\">Rapor Gönder</span>\n                    <Send className=\"h-3 w-3 group-hover:translate-x-1 transition-transform\" />\n                  </div>\n                  \n                  {/* Düğmedeki Geri Sayım Sayacı */}\n                  <div className=\"text-xs text-purple-800 dark:text-purple-200 font-bold font-mono\">\n                    {timeUntilMonthEnd.days}g:{timeUntilMonthEnd.hours.toString().padStart(2, '0')}s:{timeUntilMonthEnd.minutes.toString().padStart(2, '0')}d:{timeUntilMonthEnd.seconds.toString().padStart(2, '0')}sn\n                  </div>\n                  \n                  {/* Kırmızı/Yeşil Aktivasyon Çemberi */}\n                  <div\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      setReportActivated(!reportActivated);\n                      if (!reportActivated) {\n                        toast({\n                          title: \"✅ Rapor Aktif!\",\n                          description: \"Artık rapor gönderebilirsiniz.\",\n                          duration: 3000,\n                        });\n                      }\n                    }}\n                    className={`absolute -top-1 -right-1 w-4 h-4 rounded-full transition-all duration-300 transform cursor-pointer ${\n                      reportActivated \n                        ? 'bg-green-500 shadow-lg shadow-green-500/50 scale-110' \n                        : 'bg-red-500 shadow-lg shadow-red-500/50 animate-pulse hover:scale-110'\n                    }`}\n                    data-testid=\"button-report-activate\"\n                  />\n                </button>\n                \n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('prev')}\n                    className=\"h-8 w-8 p-0 hover:bg-primary/10\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                  </Button>\n                  <div className=\"text-sm font-medium text-muted-foreground px-3 py-1 bg-muted/50 rounded-full min-w-[140px] text-center\">\n                    {new Date(displayYear, displayMonth).toLocaleDateString(\"tr-TR\", { month: \"long\", year: \"numeric\" })}\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => navigateMonth('next')}\n                    className=\"h-8 w-8 p-0 hover:bg-primary/10\"\n                  >\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n\n            {/* Modern Takvim Izgara */}\n            <div className=\"space-y-2\">\n              {/* Hafta Başlıkları */}\n              <div className=\"grid grid-cols-7 gap-2 mb-4\">\n                {['Pzt', 'Sal', 'Çar', 'Per', 'Cum', 'Cmt', 'Paz'].map((day, index) => (\n                  <div key={day} className=\"text-center text-xs font-semibold text-muted-foreground/70 py-2\">\n                    {day}\n                  </div>\n                ))}\n              </div>\n              \n              {/* Takvim Günleri */}\n              <div className=\"grid grid-cols-7 gap-2\">\n                {calendarDays.map((date, index) => {\n                  const isCurrentMonth = date.getMonth() === displayMonth;\n                  const isToday = date.getDate() === today && isCurrentMonth && displayYear === currentYear && displayMonth === currentMonth;\n                  const year = date.getFullYear();\n                  const month_num = (date.getMonth() + 1).toString().padStart(2, '0');\n                  const day = date.getDate().toString().padStart(2, '0');\n                  const dateStr = `${year}-${month_num}-${day}`;\n                  const isSelected = selectedDate === dateStr;\n                  const dayHasActivities = hasActivities(date);\n                  \n                  return (\n                    <button\n                      key={index}\n                      onClick={() => handleDateClick(date)}\n                      className={`relative aspect-square flex flex-col items-center justify-center text-sm font-medium rounded-xl transition-all duration-200 transform hover:scale-105 ${\n                        isToday\n                          ? \"bg-gradient-to-br from-primary to-primary/80 text-primary-foreground shadow-lg shadow-primary/25 scale-105\"\n                          : isSelected\n                          ? \"bg-gradient-to-br from-accent to-accent/80 text-accent-foreground ring-2 ring-primary/50 shadow-md\"\n                          : isCurrentMonth\n                          ? \"hover:bg-gradient-to-br hover:from-secondary hover:to-secondary/80 cursor-pointer text-foreground hover:shadow-md border border-transparent hover:border-border/50\"\n                          : \"text-muted-foreground/30 cursor-pointer hover:text-muted-foreground/50\"\n                      }`}\n                      data-testid={`calendar-day-${date.getDate()}`}\n                    >\n                      <span>{date.getDate()}</span>\n                      {dayHasActivities && isCurrentMonth && (\n                        <div className=\"w-1.5 h-1.5 bg-purple-500 rounded-full mt-0.5\"></div>\n                      )}\n                      {isToday && (\n                        <div className=\"absolute -top-1 -right-1 w-2 h-2 bg-amber-400 rounded-full animate-pulse\"></div>\n                      )}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n\n\n            {/* Gelişmiş Etkileşimli Takvim Rapor Paneli */}\n            {selectedDate && (\n              <div className=\"mt-6 space-y-4\">\n                {/* Ana Tarih Bilgisi Kartı */}\n                <div className=\"p-5 bg-gradient-to-r from-muted/50 to-muted/30 rounded-xl border border-border/30 backdrop-blur-sm\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <h4 className=\"font-bold text-lg text-foreground flex items-center\">\n                      <div className=\"w-3 h-3 bg-primary rounded-full mr-2 animate-pulse\"></div>\n                      {new Date(selectedDate + 'T12:00:00').toLocaleDateString('tr-TR', { \n                        day: 'numeric', \n                        month: 'long', \n                        year: 'numeric',\n                        weekday: 'long'\n                      })}\n                    </h4>\n                    <span className=\"px-3 py-1 bg-primary/10 text-primary text-xs font-medium rounded-full\">\n                      {calendarData?.daysRemaining && calendarData.daysRemaining > 0 \n                        ? `${calendarData.daysRemaining} gün sonra` \n                        : calendarData?.daysRemaining === 0 \n                        ? \"Bugün\" \n                        : `${Math.abs(calendarData?.daysRemaining || 0)} gün önce`}\n                    </span>\n                  </div>\n                  \n                  {(() => {\n                    const selectedDateObj = new Date(selectedDate + 'T12:00:00');\n                    const today = new Date();\n                    const isPastDate = selectedDateObj < today;\n                    const activities = getActivitiesForDate(selectedDateObj);\n                    \n                    if (isPastDate) {\n                      // Gelişmiş Geçmiş Tarih Raporu\n                      if (activities.total === 0) {\n                        return (\n                          <div className=\"text-center py-8\">\n                            <div className=\"w-16 h-16 mx-auto mb-4 bg-muted/50 rounded-full flex items-center justify-center\">\n                              <TrendingUp className=\"h-8 w-8 text-muted-foreground/50\" />\n                            </div>\n                            <p className=\"text-sm font-medium text-muted-foreground mb-2\">\n                              Bu gün hiç aktivite yapılmamış\n                            </p>\n                            <p className=\"text-xs text-muted-foreground/70\">\n                              Gelecekte daha aktif olmaya çalışalım! 💪\n                            </p>\n                          </div>\n                        );\n                      } else {\n                        const taskProgress = activities.tasks.length;\n                        const questionProgress = activities.questionLogs.length;\n                        const examProgress = activities.examResults.length;\n                        \n                        return (\n                          <div className=\"space-y-4\">\n                            {/* Etkinlik Özeti Kartları */}\n                            <div className=\"grid grid-cols-3 gap-3\">\n                              <div className=\"bg-green-50 dark:bg-green-950/20 border border-green-200 dark:border-green-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">{taskProgress}</div>\n                                <div className=\"text-xs text-green-700 dark:text-green-300\">Görev</div>\n                              </div>\n                              <div className=\"bg-blue-50 dark:bg-blue-950/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">{questionProgress}</div>\n                                <div className=\"text-xs text-blue-700 dark:text-blue-300\">Soru</div>\n                              </div>\n                              <div className=\"bg-purple-50 dark:bg-purple-950/20 border border-purple-200 dark:border-purple-800 rounded-lg p-3 text-center\">\n                                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">{examProgress}</div>\n                                <div className=\"text-xs text-purple-700 dark:text-purple-300\">Deneme</div>\n                              </div>\n                            </div>\n\n                            {/* Toplam Aktivite İlerlemesi */}\n                            <div className=\"bg-gradient-to-r from-primary/5 to-primary/10 rounded-lg p-4 border border-primary/20\">\n                              <div className=\"flex items-center justify-between mb-2\">\n                                <span className=\"text-sm font-medium text-foreground\">Günlük Performans</span>\n                                <span className=\"text-lg font-bold text-primary\">{activities.total}</span>\n                              </div>\n                              <div className=\"w-full bg-muted rounded-full h-2\">\n                                <div \n                                  className=\"bg-gradient-to-r from-primary to-primary/80 h-2 rounded-full transition-all duration-500\" \n                                  style={{ width: `${Math.min((activities.total / 10) * 100, 100)}%` }}\n                                ></div>\n                              </div>\n                              <div className=\"text-xs text-muted-foreground mt-1\">\n                                {activities.total >= 10 ? \"Müthiş bir gün! 🎉\" : activities.total >= 5 ? \"İyi gidiyor! 👍\" : \"Daha fazla çalışabiliriz! 💪\"}\n                              </div>\n                            </div>\n\n                            {/* Detaylı Aktivite Listesi */}\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-semibold text-sm text-foreground mb-3 flex items-center\">\n                                <div className=\"w-2 h-2 bg-primary rounded-full mr-2\"></div>\n                                Aktivite Detayları\n                              </h5>\n                              \n                              {/* Filter Buttons */}\n                              <div className=\"flex gap-2 mb-3\">\n                                <button \n                                  onClick={() => setActivityFilter('all')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'all' \n                                      ? 'bg-primary text-white shadow-sm' \n                                      : 'bg-muted hover:bg-muted/80 text-muted-foreground hover:text-foreground'\n                                  }`}\n                                  data-testid=\"button-filter-all\"\n                                >\n                                  Tümü\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('tasks')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'tasks' \n                                      ? 'bg-green-500 text-white shadow-sm' \n                                      : 'bg-green-50 dark:bg-green-950/20 hover:bg-green-100 dark:hover:bg-green-950/30 text-green-700 dark:text-green-300'\n                                  }`}\n                                  data-testid=\"button-filter-tasks\"\n                                >\n                                  Görev\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('questions')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'questions' \n                                      ? 'bg-blue-500 text-white shadow-sm' \n                                      : 'bg-blue-50 dark:bg-blue-950/20 hover:bg-blue-100 dark:hover:bg-blue-950/30 text-blue-700 dark:text-blue-300'\n                                  }`}\n                                  data-testid=\"button-filter-questions\"\n                                >\n                                  Soru\n                                </button>\n                                <button \n                                  onClick={() => setActivityFilter('exams')}\n                                  className={`px-3 py-1.5 text-xs font-medium rounded-lg transition-all duration-200 ${\n                                    activityFilter === 'exams' \n                                      ? 'bg-purple-500 text-white shadow-sm' \n                                      : 'bg-purple-50 dark:bg-purple-950/20 hover:bg-purple-100 dark:hover:bg-purple-950/30 text-purple-700 dark:text-purple-300'\n                                  }`}\n                                  data-testid=\"button-filter-exams\"\n                                >\n                                  Deneme\n                                </button>\n                              </div>\n                              <div className=\"space-y-2 max-h-64 overflow-y-auto custom-scrollbar\">\n                                {/* Tamamlanan görevleri göster */}\n                                {(activityFilter === 'all' || activityFilter === 'tasks') && activities.tasks.map((task: Task) => (\n                                  <div key={task.id} className=\"flex items-center justify-between p-2 bg-green-50 dark:bg-green-950/10 rounded-lg\">\n                                    <div className=\"flex items-center text-sm\">\n                                      <div className=\"w-2 h-2 bg-green-500 rounded-full mr-3\"></div>\n                                      <span className=\"font-medium\">Görev:</span>\n                                      <span className=\"ml-2 text-muted-foreground\">{task.title}</span>\n                                    </div>\n                                    <div className=\"text-xs text-green-600 bg-green-100 dark:bg-green-900/20 px-2 py-1 rounded-full\">\n                                      ✓ Tamamlandı\n                                    </div>\n                                  </div>\n                                ))}\n                                \n                                {/* Soru günlüklerini göster */}\n                                {(activityFilter === 'all' || activityFilter === 'questions') && activities.questionLogs.map((log: QuestionLog) => (\n                                  <div key={log.id} className=\"flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-950/10 rounded-lg\">\n                                    <div className=\"flex items-center text-sm\">\n                                      <div className=\"w-2 h-2 bg-blue-500 rounded-full mr-3\"></div>\n                                      <span className=\"font-medium\">Soru:</span>\n                                      <span className=\"ml-2 text-muted-foreground\">{log.exam_type} {log.subject}</span>\n                                    </div>\n                                    <div className=\"text-xs text-blue-600 bg-blue-100 dark:bg-blue-900/20 px-2 py-1 rounded-full\">\n                                      {log.correct_count} doğru\n                                    </div>\n                                  </div>\n                                ))}\n                                \n                                {/* Sınav sonuçlarını göster */}\n                                {(activityFilter === 'all' || activityFilter === 'exams') && activities.examResults.map((exam: ExamResult) => (\n                                  <div key={exam.id} className=\"flex items-center justify-between p-2 bg-purple-50 dark:bg-purple-950/10 rounded-lg\">\n                                    <div className=\"flex items-center text-sm\">\n                                      <div className=\"w-2 h-2 bg-purple-500 rounded-full mr-3\"></div>\n                                      <span className=\"font-medium\">Deneme:</span>\n                                      <span className=\"ml-2 text-muted-foreground\">{exam.exam_name}</span>\n                                    </div>\n                                    <div className=\"text-xs text-purple-600 bg-purple-100 dark:bg-purple-900/20 px-2 py-1 rounded-full\">\n                                      TYT: {exam.tyt_net} | AYT: {exam.ayt_net}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                          </div>\n                        );\n                      }\n                    } else {\n                      // Geliştirilmiş Gelecek Tarih Planlaması\n                      return (\n                        <div className=\"space-y-4\">\n                          {/* Planlama Özeti */}\n                          <div className=\"bg-gradient-to-r from-accent/5 to-accent/10 rounded-lg p-4 border border-accent/20\">\n                            <div className=\"flex items-center justify-between mb-2\">\n                              <span className=\"text-sm font-medium text-foreground\">Planlanan Aktiviteler</span>\n                              <span className=\"text-lg font-bold text-accent\">{calendarData?.tasksCount || 0}</span>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {(calendarData?.tasksCount || 0) === 0 \n                                ? \"Henüz bu güne özel görev planlanmamış\" \n                                : `${calendarData?.tasksCount || 0} görev bu güne planlandı`}\n                            </div>\n                          </div>\n\n                          {/* Planlanan Görevler */}\n                          {calendarData?.tasks && calendarData.tasks.length > 0 && (\n                            <div className=\"space-y-2\">\n                              <h5 className=\"font-semibold text-sm text-foreground mb-3 flex items-center\">\n                                <div className=\"w-2 h-2 bg-accent rounded-full mr-2\"></div>\n                                Planlanan Görevler\n                              </h5>\n                              {calendarData.tasks.slice(0, 3).map((task: Task) => (\n                                <div key={task.id} className=\"flex items-center justify-between p-3 bg-accent/5 rounded-lg border border-accent/10\">\n                                  <div className=\"flex items-center text-sm\">\n                                    <div className=\"w-2 h-2 bg-accent/60 rounded-full mr-3\"></div>\n                                    <span className=\"font-medium text-foreground\">{task.title}</span>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2\">\n                                    <div className=\"text-xs text-accent bg-accent/10 px-2 py-1 rounded-full\">\n                                      {task.priority === 'high' ? '🔴 Yüksek' : task.priority === 'medium' ? '🟡 Orta' : '🟢 Düşük'}\n                                    </div>\n                                    <div className=\"text-xs text-muted-foreground\">\n                                      {getCategoryText(task.category)}\n                                    </div>\n                                  </div>\n                                </div>\n                              ))}\n                              {calendarData.tasks.length > 3 && (\n                                <div className=\"text-center\">\n                                  <button className=\"text-xs font-medium text-accent hover:text-accent/80 bg-accent/10 hover:bg-accent/20 px-4 py-2 rounded-lg transition-colors duration-200\">\n                                    {calendarData.tasks.length - 3} görev daha göster\n                                  </button>\n                                </div>\n                              )}\n                            </div>\n                          )}\n\n                        </div>\n                      );\n                    }\n                  })()\n                  }\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Bugünün Görevleri Kolonu - 2 sütun alır */}\n          <div className=\"lg:col-span-2 h-full\">\n            <TodaysTasksWidget />\n          </div>\n        </div>\n\n        {/* Orta Satır - Hava Durumu Widget'ı (Tam Genişlik) */}\n        <div className=\"mb-8\">\n          <EnhancedWeatherWidget />\n        </div>\n\n\n        {/* Geri Sayım Bölümü - Aşağı Taşındı */}\n        <div className=\"mb-8\">\n          <CountdownWidget className=\"p-5 md:p-6\" />\n        </div>\n      </main>\n\n      {/* Gelişmiş Rapor Modalı */}\n      <Dialog open={showReportModal && reportActivated} onOpenChange={setShowReportModal}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-2xl font-bold bg-gradient-to-r from-purple-600 to-purple-800 bg-clip-text text-transparent flex items-center\">\n              <FileText className=\"h-6 w-6 mr-3 text-purple-600\" />\n              Aylık Aktivite Raporu\n            </DialogTitle>\n            <DialogDescription className=\"text-muted-foreground\">\n              {new Date().toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })} ayı başından bugüne kadar yapılan tüm aktiviteler\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-6 mt-6\">\n            {(() => {\n              const currentDate = selectedDate ? new Date(selectedDate + 'T12:00:00') : new Date();\n              const monthlyActivities = getMonthlyActivities(currentDate);\n              \n              return (\n                <>\n                  {/* Kompakt Etkinlik Özeti Kartları */}\n                  <div className=\"grid grid-cols-4 gap-3\">\n                    <div className=\"bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/20 dark:to-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-3 text-center\">\n                      <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                        {monthlyActivities.tasks.length}\n                      </div>\n                      <div className=\"text-xs text-green-700 dark:text-green-300 font-medium\">Tamamlanan Görev</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/20 dark:to-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3 text-center\">\n                      <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                        {monthlyActivities.questionLogs.length}\n                      </div>\n                      <div className=\"text-xs text-blue-700 dark:text-blue-300 font-medium\">Çözülen Soru</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-3 text-center\">\n                      <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n                        {monthlyActivities.examResults.length}\n                      </div>\n                      <div className=\"text-xs text-purple-700 dark:text-purple-300 font-medium\">Yapılan Deneme</div>\n                    </div>\n                    <div className=\"bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-950/20 dark:to-amber-900/20 border border-amber-200 dark:border-amber-800 rounded-lg p-3 text-center\">\n                      <div className=\"text-2xl font-bold text-amber-600 dark:text-amber-400\">\n                        {monthlyActivities.total}\n                      </div>\n                      <div className=\"text-xs text-amber-700 dark:text-amber-300 font-medium\">Toplam Aktivite</div>\n                    </div>\n                  </div>\n\n\n                  {/* E-posta Bölümü */}\n                  <div className=\"border-t border-border pt-6\">\n                    <div className=\"bg-gradient-to-r from-muted/50 to-muted/30 rounded-xl p-4 border border-border/30\">\n                      <div className=\"flex items-center mb-4\">\n                        <Mail className=\"h-5 w-5 text-purple-600 mr-2\" />\n                        <span className=\"font-semibold text-foreground\">Rapor Gönderimi</span>\n                      </div>\n                      \n                      <div className=\"space-y-4\">\n                        {/* E-posta Adresi - Güvenli Şekilde Yapılandırıldı */}\n                        <div>\n                          <Label htmlFor=\"email-address\" className=\"text-sm font-medium text-muted-foreground mb-1 block\">\n                            Gönderilecek Adres\n                          </Label>\n                          <div className=\"relative\">\n                            <Input\n                              id=\"email-address\"\n                              type=\"email\"\n                              value=\"Güvenli şekilde yapılandırılmış\"\n                              disabled\n                              className=\"bg-muted/50 text-muted-foreground cursor-not-allowed pr-12\"\n                              data-testid=\"input-email-configured\"\n                            />\n                            <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\n                              <div className=\"w-4 h-4 text-green-500\">✓</div>\n                            </div>\n                          </div>\n                        </div>\n\n                        {/* Bilgi Mesajı */}\n                        <div className=\"bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950/20 dark:to-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-4\">\n                          <div className=\"flex items-center space-x-2\">\n                            <div className=\"w-4 h-4 text-purple-600 dark:text-purple-400\">📊</div>\n                            <span className=\"text-sm font-medium text-purple-800 dark:text-purple-200\">\n                              Aylık Aktivite raporum gmailime burdan gönderilecek.\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex justify-end mt-6\">\n                        <Button\n                          onClick={handleSendEmail}\n                          disabled={sendEmailMutation.isPending}\n                          className=\"bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-700 hover:to-purple-800 text-white font-semibold px-6 py-2 rounded-lg shadow-lg transition-all duration-300 disabled:opacity-50\"\n                          data-testid=\"button-send-report\"\n                        >\n                          {sendEmailMutation.isPending ? (\n                            <>\n                              <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin mr-2\"></div>\n                              Gönderiliyor...\n                            </>\n                          ) : (\n                            <>\n                              <Send className=\"h-4 w-4 mr-2\" />\n                              Raporu Gönder\n                            </>\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </>\n              );\n            })()}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* copyright beroooş */}\n      <footer className=\"bg-muted/30 border-t border-border mt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6\">\n          <div className=\"text-center text-sm text-muted-foreground\">\n            © {new Date().getFullYear()} Berat Çakıroğlu. Tüm hakları saklıdır.\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":55728},"client/src/pages/net-calculator.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { Calculator, TrendingUp, BookOpen, Brain, BarChart2, FlaskConical } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\n\ninterface TYTData {\n  Türkçe: { dogru: number; yanlis: number; };\n  sosyal: { dogru: number; yanlis: number; };\n  matematik: { dogru: number; yanlis: number; };\n  fenBilimleri: { dogru: number; yanlis: number; };\n}\n\ninterface AYTData {\n  matematik: { dogru: number; yanlis: number; };\n  fizik: { dogru: number; yanlis: number; };\n  kimya: { dogru: number; yanlis: number; };\n  biyoloji: { dogru: number; yanlis: number; };\n}\n\ninterface OBPData {\n  diplomaNotu: number;\n  gecenSeneYerlesti: boolean;\n}\n\n\nexport default function NetCalculator() {\n  \n  const [tytData, setTytData] = useState<TYTData>({\n    Türkçe: { dogru: 0, yanlis: 0 },\n    sosyal: { dogru: 0, yanlis: 0 },\n    matematik: { dogru: 0, yanlis: 0 },\n    fenBilimleri: { dogru: 0, yanlis: 0 }\n  });\n\n  const [aytData, setAytData] = useState<AYTData>({\n    matematik: { dogru: 0, yanlis: 0 },\n    fizik: { dogru: 0, yanlis: 0 },\n    kimya: { dogru: 0, yanlis: 0 },\n    biyoloji: { dogru: 0, yanlis: 0 }\n  });\n\n  const [obpData, setObpData] = useState<OBPData>({\n    diplomaNotu: 85,\n    gecenSeneYerlesti: false\n  });\n\n\n  // Bir konu için net hesaplayın\n  const calculateNet = (dogru: number, yanlis: number): number => {\n    return Math.max(0, dogru - (yanlis / 4));\n  };\n\n  // TYT toplam neti hesaplayın\n  const calculateTYTNet = (): number => {\n    return Object.values(tytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // AYT toplam neti hesaplayın\n  const calculateAYTNet = (): number => {\n    return Object.values(aytData).reduce((total, subject) => {\n      return total + calculateNet(subject.dogru, subject.yanlis);\n    }, 0);\n  };\n\n  // OBP'yi hesaplayın (YKS standardı: diploma * 5, max 500)\n  const calculateOBP = (): number => {\n    let obp = (obpData.diplomaNotu / 100) * 500;\n    if (obpData.gecenSeneYerlesti) {\n      obp = obp / 2;\n    }\n    return Math.min(500, Math.max(0, obp));\n  };\n\n\n  // Girdi doğrulama\n  const validateInput = (subject: string, value: number, section: 'tyt' | 'ayt'): number => {\n    const maxValues: Record<string, number> = {\n      // TYT sınırları\n      'tyt-Türkçe': 40,\n      'tyt-sosyal': 20, \n      'tyt-matematik': 40,\n      'tyt-fenBilimleri': 20,\n      // AYT sınırları\n      'ayt-matematik': 40,\n      'ayt-fizik': 14,\n      'ayt-kimya': 13,\n      'ayt-biyoloji': 13\n    };\n    \n    const key = `${section}-${subject}`;\n    const max = maxValues[key] || 40;\n    return Math.min(Math.max(0, value), max);\n  };\n\n  // Tüm verileri sıfırla\n  const resetAllData = () => {\n    setTytData({\n      Türkçe: { dogru: 0, yanlis: 0 },\n      sosyal: { dogru: 0, yanlis: 0 },\n      matematik: { dogru: 0, yanlis: 0 },\n      fenBilimleri: { dogru: 0, yanlis: 0 }\n    });\n    setAytData({\n      matematik: { dogru: 0, yanlis: 0 },\n      fizik: { dogru: 0, yanlis: 0 },\n      kimya: { dogru: 0, yanlis: 0 },\n      biyoloji: { dogru: 0, yanlis: 0 }\n    });\n    setObpData({\n      diplomaNotu: 85,\n      gecenSeneYerlesti: false\n    });\n  };\n\n\n  const tytNet = calculateTYTNet();\n  const aytNet = calculateAYTNet();\n  const obp = calculateOBP();\n\n  return (\n    <div className=\"min-h-screen bg-background transition-colors duration-300\">\n      <Header />\n      \n\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {/* Sayfa Başlığı */}\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-3xl font-bold text-foreground mb-2 flex items-center justify-center\">\n            <Calculator className=\"h-8 w-8 mr-3 text-primary\" />\n            Net Hesaplama\n          </h1>\n          <p className=\"text-muted-foreground\">TYT ve AYT netlerimi burda hesaplayıp OBP'mi görebileceğim sayfa</p>\n        </div>\n\n        {/* OBP Bölümü - yukarı taşındı */}\n        <Card className=\"mb-8 shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n          <CardHeader className=\"bg-gradient-to-r from-purple-800 via-purple-900 to-purple-950 text-white rounded-t-lg shadow-lg\">\n            <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n              <BookOpen className=\"h-6 w-6\" />\n              Ortaöğretim Başarı Puanı (OBP)\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"diploma-notu\">Diploma Notu</Label>\n                  <Input\n                    id=\"diploma-notu\"\n                    type=\"number\"\n                    min=\"0\"\n                    max=\"100\"\n                    value={obpData.diplomaNotu}\n                    onChange={(e) => setObpData(prev => ({...prev, diplomaNotu: parseFloat(e.target.value) || 0}))}\n                    className=\"mt-1\"\n                  />\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"gecen-sene\"\n                    checked={obpData.gecenSeneYerlesti}\n                    onCheckedChange={(checked) => setObpData(prev => ({...prev, gecenSeneYerlesti: checked as boolean}))}\n                  />\n                  <Label htmlFor=\"gecen-sene\" className=\"text-sm\">\n                    Geçen Sene Bir Bölüme Yerleştim (OBP yarıya düşer)\n                  </Label>\n                </div>\n              </div>\n              <div className=\"flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <div className=\"text-3xl font-bold text-purple-600\">{obp.toFixed(2)}</div>\n                  <div className=\"text-sm text-muted-foreground\">Hesaplanan OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"mt-2 w-32\" />\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* TYT Bölümü */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <Calculator className=\"h-6 w-6\" />\n                TYT Puan Hesaplama\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(tytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'Türkçe': 'Türkçe',\n                  'sosyal': 'Sosyal Bilimler',\n                  'matematik': 'Matematik',\n                  'fenBilimleri': 'Fen Bilimleri'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'Türkçe': <BookOpen className=\"h-4 w-4\" />,\n                  'sosyal': <Brain className=\"h-4 w-4\" />,\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fenBilimleri': <FlaskConical className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl border border-purple-200 dark:border-purple-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-purple-700 dark:text-purple-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'tyt');\n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], dogru: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'tyt');\n                          setTytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof TYTData], yanlis: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-purple-300 focus:border-purple-500 dark:border-purple-700 dark:focus:border-purple-400 rounded-lg bg-white dark:bg-purple-950/30 placeholder:text-purple-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`tyt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-purple-600 dark:text-purple-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-purple-800 dark:text-purple-200 bg-gradient-to-r from-purple-100 to-purple-200 dark:from-purple-900/60 dark:to-purple-800/60 rounded-lg border border-purple-300 dark:border-purple-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam TYT Net:</span>\n                <span className=\"text-lg font-bold text-blue-600\">{tytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* AYT Bölümü */}\n          <Card className=\"shadow-xl border-purple-300 dark:border-purple-800/50 hover:shadow-2xl transition-all duration-500 ring-1 ring-purple-200 dark:ring-purple-800/30\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-700 via-purple-800 to-purple-900 text-white rounded-t-lg shadow-lg\">\n              <CardTitle className=\"text-white flex items-center gap-2 text-lg\">\n                <TrendingUp className=\"h-6 w-6\" />\n                AYT Puan Hesaplama (Sayısal)\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {Object.entries(aytData).map(([subject, data]) => {\n                const subjectDisplayName = {\n                  'matematik': 'Matematik',\n                  'fizik': 'Fizik',\n                  'kimya': 'Kimya',\n                  'biyoloji': 'Biyoloji'\n                }[subject] || subject;\n                \n                const subjectIcon = {\n                  'matematik': <BarChart2 className=\"h-4 w-4\" />,\n                  'fizik': <FlaskConical className=\"h-4 w-4\" />,\n                  'kimya': <FlaskConical className=\"h-4 w-4\" />,\n                  'biyoloji': <Brain className=\"h-4 w-4\" />\n                }[subject];\n                \n                return (\n                <div key={subject} className=\"space-y-3 p-4 bg-gradient-to-r from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl border border-green-200 dark:border-green-800/50 shadow-md hover:shadow-lg transition-all duration-300\">\n                  <Label className=\"text-sm font-semibold flex items-center gap-2 text-green-700 dark:text-green-300\">\n                    {subjectIcon}\n                    {subjectDisplayName}\n                  </Label>\n                  <div className=\"grid grid-cols-5 gap-3 items-center\">\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Doğru</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.dogru}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'ayt');\n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], dogru: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-dogru`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-red-400 to-pink-500 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">−</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Yanlış</label>\n                      <Input\n                        type=\"number\"\n                        placeholder=\"0\"\n                        value={data.yanlis}\n                        onChange={(e) => {\n                          const value = validateInput(subject, parseInt(e.target.value) || 0, 'ayt');\n                          setAytData(prev => ({\n                            ...prev,\n                            [subject]: { ...prev[subject as keyof AYTData], yanlis: value }\n                          }));\n                        }}\n                        className=\"h-12 text-center text-lg font-semibold border-green-300 focus:border-green-500 dark:border-green-700 dark:focus:border-green-400 rounded-lg bg-white dark:bg-green-950/30 placeholder:text-green-400 shadow-sm hover:shadow-md transition-all\"\n                        data-testid={`ayt-${subject}-yanlis`}\n                      />\n                    </div>\n                    <div className=\"flex items-center justify-center\">\n                      <div className=\"w-12 h-12 rounded-full bg-gradient-to-r from-purple-500 to-indigo-600 text-white flex items-center justify-center font-bold shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-110 cursor-pointer group\">\n                        <span className=\"text-xl group-hover:scale-125 transition-transform\">=</span>\n                      </div>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <label className=\"text-xs font-medium text-green-600 dark:text-green-400\">Net</label>\n                      <div className=\"h-12 flex items-center justify-center text-lg font-bold text-green-800 dark:text-green-200 bg-gradient-to-r from-green-100 to-green-200 dark:from-green-900/60 dark:to-green-800/60 rounded-lg border border-green-300 dark:border-green-700 shadow-sm\">\n                        {calculateNet(data.dogru, data.yanlis).toFixed(2)}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                );\n              })}\n              <Separator />\n              <div className=\"flex justify-between items-center pt-2\">\n                <span className=\"font-bold\">Toplam AYT Net:</span>\n                <span className=\"text-lg font-bold text-green-600\">{aytNet.toFixed(2)}</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Sonuçlar Özeti - büyütülmüş ve ortalanmış */}\n        <div className=\"flex justify-center\">\n          <Card className=\"mb-8 shadow-2xl border-purple-400 dark:border-purple-700/50 hover:shadow-purple-500/25 transition-all duration-500 ring-2 ring-purple-300 dark:ring-purple-800/40 w-full max-w-5xl\">\n            <CardHeader className=\"bg-gradient-to-r from-purple-600 via-purple-700 to-purple-800 text-white rounded-t-lg shadow-xl py-8\">\n              <CardTitle className=\"flex items-center justify-center text-white text-2xl\">\n                <TrendingUp className=\"h-8 w-8 mr-3\" />\n                Sonuçlar Özeti\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-8\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-10\">\n                <div className=\"text-center bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/50 rounded-xl p-6 border border-blue-200 dark:border-blue-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-blue-600 mb-2\">{tytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">TYT Net</div>\n                  <Progress value={(tytNet / 120) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 120 sorudan</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/50 rounded-xl p-6 border border-green-200 dark:border-green-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-green-600 mb-2\">{aytNet.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">AYT Net</div>\n                  <Progress value={(aytNet / 80) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 80 sorudan</div>\n                </div>\n                <div className=\"text-center bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/50 rounded-xl p-6 border border-purple-200 dark:border-purple-800/50 shadow-lg hover:shadow-xl transition-all duration-300\">\n                  <div className=\"text-4xl font-bold text-purple-600 mb-2\">{obp.toFixed(2)}</div>\n                  <div className=\"text-lg font-medium text-muted-foreground mb-4\">OBP</div>\n                  <Progress value={(obp / 500) * 100} className=\"h-3\" />\n                  <div className=\"text-sm text-muted-foreground mt-2\">/ 500 puan</div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":21638},"client/src/pages/not-found.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":975},"client/src/pages/timer.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useState, useEffect, useReducer, useRef } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Volume2, VolumeX, Play, Pause, Square, RotateCcw, Clock, Timer as TimerIcon, AlarmClock, Plus, Trash2, Zap, Target, Sparkles } from \"lucide-react\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Confetti from 'react-confetti';\n\ninterface TimerState {\n  time: number; // milisaniye\n  isRunning: boolean;\n  laps: Array<{ id: number; time: number; split: number; }>;\n  lapCounter: number;\n}\n\ntype TimerAction = \n  | { type: 'START' }\n  | { type: 'PAUSE' }\n  | { type: 'RESET' }\n  | { type: 'TICK'; payload: number }\n  | { type: 'ADD_LAP'; payload: number };\n\nconst timerReducer = (state: TimerState, action: TimerAction): TimerState => {\n  switch (action.type) {\n    case 'START':\n      return { ...state, isRunning: true };\n    case 'PAUSE':\n      return { ...state, isRunning: false };\n    case 'RESET':\n      return { \n        time: 0, \n        isRunning: false, \n        laps: [], \n        lapCounter: 0 \n      };\n    case 'TICK':\n      return { ...state, time: action.payload };\n    case 'ADD_LAP':\n      const previousLapTime = state.laps.length > 0 ? state.laps[state.laps.length - 1].time : 0;\n      const split = action.payload - previousLapTime;\n      return { \n        ...state, \n        laps: [...state.laps, { \n          id: state.lapCounter + 1, \n          time: action.payload, \n          split \n        }],\n        lapCounter: state.lapCounter + 1\n      };\n    default:\n      return state;\n  }\n};\n\ninterface PomodoroSettings {\n  workTime: number; // dakika\n  breakTime: number; // dakika\n  longBreakTime: number; // dakika\n  cycles: number;\n}\n\ninterface AlarmSettings {\n  time: string; // SS:DD format\n  sound: string;\n  enabled: boolean;\n}\n\nconst formatTime = (ms: number, includeMs = true): string => {\n  const totalSeconds = Math.floor(ms / 1000);\n  const hours = Math.floor(totalSeconds / 3600);\n  const minutes = Math.floor((totalSeconds % 3600) / 60);\n  const seconds = totalSeconds % 60;\n  const milliseconds = Math.floor((ms % 1000) / 10); // saniyenin yüzde biri\n  \n  if (hours > 0) {\n    return includeMs \n      ? `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n      : `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n  \n  return includeMs \n    ? `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${milliseconds.toString().padStart(2, '0')}`\n    : `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\nexport default function Timer() {\n  \n  // Sound settings\n  const [soundEnabled, setSoundEnabled] = useState(() => \n    localStorage.getItem('timer-sound-enabled') !== 'false'\n  );\n  \n  const [alarmSound, setAlarmSound] = useState(() => \n    localStorage.getItem('timer-alarm-sound') || 'beep'\n  );\n\n  // Kronometre\n  const [stopwatchState, dispatchStopwatch] = useReducer(timerReducer, {\n    time: 0,\n    isRunning: false,\n    laps: [],\n    lapCounter: 0\n  });\n\n  // Pomodoro\n  const [pomodoroSettings, setPomodoroSettings] = useState<PomodoroSettings>(() => ({\n    workTime: 25,\n    breakTime: 5,\n    longBreakTime: 15,\n    cycles: 4\n  }));\n  \n  const [pomodoroState, setPomodoroState] = useState({\n    time: pomodoroSettings.workTime * 60 * 1000, // milisaniye\n    isRunning: false,\n    isBreak: false,\n    currentCycle: 1,\n    mode: 'work' as 'work' | 'break' | 'longBreak'\n  });\n\n  // Alarm ayarları\n  const [alarms, setAlarms] = useState<AlarmSettings[]>(() => {\n    const saved = localStorage.getItem('timer-alarms');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const [newAlarmTime, setNewAlarmTime] = useState('');\n  const [activeTab, setActiveTab] = useState('stopwatch');\n\n  // Zamanlayıcı Hedef Belirleme\n  const [timerGoal, setTimerGoal] = useState<number>(0); // dakika cinsinden\n  const [goalInput, setGoalInput] = useState<string>('');\n  const [showConfetti, setShowConfetti] = useState(false);\n  const [goalAchieved, setGoalAchieved] = useState(false);\n\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\n  const alarmIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const { toast } = useToast();\n\n  // Ses efektleri için ses bağlamı\n  const playSound = (frequency = 800, duration = 200, type: 'beep' | 'lap' | 'alarm' = 'beep') => {\n    if (!soundEnabled) return;\n    \n    try {\n      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      if (type === 'alarm') {\n        // AAlarm sesi - seçime göre farklı tonlar\n        if (alarmSound === 'chime') {\n          oscillator.frequency.setValueAtTime(523, audioContext.currentTime);\n          oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.2);\n          oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.4);\n          duration = 800;\n        } else if (alarmSound === 'bell') {\n          oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n          oscillator.frequency.exponentialRampToValueAtTime(400, audioContext.currentTime + 0.1);\n          duration = 500;\n        } else {\n          oscillator.frequency.setValueAtTime(1000, audioContext.currentTime);\n        }\n      } else if (type === 'lap') {\n        oscillator.frequency.setValueAtTime(600, audioContext.currentTime);\n        duration = 100;\n      } else {\n        oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n      }\n      \n      gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + duration / 1000);\n    } catch (error) {\n      console.warn('Sound playback failed:', error);\n    }\n  };\n\n  // Hedef kontrolü için kronometre\n  useEffect(() => {\n    if (timerGoal > 0 && stopwatchState.time >= timerGoal * 60 * 1000 && !goalAchieved) {\n      setGoalAchieved(true);\n      setShowConfetti(true);\n      playSound(1000, 1000, 'alarm');\n      toast({\n        title: '🎉 Tebrikler! Hedefe Ulaştın!',\n        description: `${timerGoal} dakikalık hedefini başarıyla tamamladın!`,\n      });\n      \n      // 5 saniye sonra konfeti gizle\n      setTimeout(() => {\n        setShowConfetti(false);\n      }, 5000);\n    }\n  }, [stopwatchState.time, timerGoal, goalAchieved, toast]);\n\n  // Kronometre efektleri\n  useEffect(() => {\n    if (stopwatchState.isRunning) {\n      const startTime = Date.now() - stopwatchState.time;\n      intervalRef.current = setInterval(() => {\n        dispatchStopwatch({ type: 'TICK', payload: Date.now() - startTime });\n      }, 10);\n    } else {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    }\n\n    return () => {\n      if (intervalRef.current) clearInterval(intervalRef.current);\n    };\n  }, [stopwatchState.isRunning, stopwatchState.time]);\n\n  // Pomodoro etkileri\n  useEffect(() => {\n    let pomodoroInterval: NodeJS.Timeout | null = null;\n    \n    if (pomodoroState.isRunning && pomodoroState.time > 0) {\n      pomodoroInterval = setInterval(() => {\n        setPomodoroState(prev => {\n          if (prev.time <= 1000) {\n            playSound(800, 500, 'alarm');\n            toast({\n              title: prev.mode === 'work' ? 'Çalışma süresi bitti!' : 'Mola süresi bitti!',\n              description: prev.mode === 'work' ? 'Mola zamanı!' : 'Çalışmaya devam!',\n            });\n            \n            // Bir sonraki aşamaya otomatik geçiş\n            const nextMode = prev.mode === 'work' \n              ? (prev.currentCycle >= pomodoroSettings.cycles ? 'longBreak' : 'break')\n              : 'work';\n            \n            const nextTime = nextMode === 'work' \n              ? pomodoroSettings.workTime * 60 * 1000\n              : nextMode === 'break'\n              ? pomodoroSettings.breakTime * 60 * 1000\n              : pomodoroSettings.longBreakTime * 60 * 1000;\n            \n            const nextCycle = prev.mode === 'break' || prev.mode === 'longBreak' \n              ? prev.currentCycle + 1\n              : prev.currentCycle;\n            \n            return {\n              ...prev,\n              time: nextTime,\n              isRunning: false,\n              mode: nextMode,\n              currentCycle: nextMode === 'longBreak' ? 1 : nextCycle\n            };\n          }\n          return { ...prev, time: prev.time - 1000 };\n        });\n      }, 1000);\n    }\n\n    return () => {\n      if (pomodoroInterval) clearInterval(pomodoroInterval);\n    };\n  }, [pomodoroState.isRunning, pomodoroState.time, pomodoroSettings, toast]);\n\n  // Alarm kontrolü\n  useEffect(() => {\n    const checkAlarms = () => {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      \n      alarms.forEach(alarm => {\n        if (alarm.enabled && alarm.time === currentTime) {\n          playSound(800, 1000, 'alarm');\n          toast({\n            title: 'Alarm!',\n            description: `${alarm.time} alarmı çalıyor!`,\n          });\n          // Alarm çaldıktan sonra devre dışı bırak\n          setAlarms(prev => prev.map(a => \n            a.time === alarm.time ? { ...a, enabled: false } : a\n          ));\n        }\n      });\n    };\n\n    alarmIntervalRef.current = setInterval(checkAlarms, 1000);\n    return () => {\n      if (alarmIntervalRef.current) clearInterval(alarmIntervalRef.current);\n    };\n  }, [alarms, toast]);\n\n  // Alarm sekmesi etkinleştirildiğinde mevcut zamanı otomatik doldur\n  useEffect(() => {\n    if (activeTab === 'alarm' && !newAlarmTime) {\n      const now = new Date();\n      const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n      setNewAlarmTime(currentTime);\n    }\n  }, [activeTab, newAlarmTime]);\n\n  // Ayarları localStorage'a kaydet\n  useEffect(() => {\n    localStorage.setItem('timer-sound-enabled', soundEnabled.toString());\n  }, [soundEnabled]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarm-sound', alarmSound);\n  }, [alarmSound]);\n\n  useEffect(() => {\n    localStorage.setItem('timer-alarms', JSON.stringify(alarms));\n  }, [alarms]);\n\n  const handleStopwatchStart = () => {\n    dispatchStopwatch({ type: 'START' });\n    playSound();\n  };\n\n  const handleStopwatchPause = () => {\n    dispatchStopwatch({ type: 'PAUSE' });\n    playSound();\n  };\n\n  const handleStopwatchReset = () => {\n    dispatchStopwatch({ type: 'RESET' });\n    setGoalAchieved(false);\n    setShowConfetti(false);\n    playSound();\n  };\n\n  const setTimerGoalHandler = () => {\n    const minutes = parseInt(goalInput);\n    if (minutes > 0) {\n      setTimerGoal(minutes);\n      setGoalAchieved(false);\n      toast({\n        title: '🎯 Hedef Belirlendi',\n        description: `${minutes} dakikalık çalışma hedefi ayarlandı!`,\n      });\n      setGoalInput('');\n    }\n  };\n\n  const handleStopwatchLap = () => {\n    dispatchStopwatch({ type: 'ADD_LAP', payload: stopwatchState.time });\n    playSound(600, 100, 'lap');\n  };\n\n  const handlePomodoroStart = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: true }));\n    playSound();\n  };\n\n  const handlePomodoroPause = () => {\n    setPomodoroState(prev => ({ ...prev, isRunning: false }));\n    playSound();\n  };\n\n  const handlePomodoroReset = () => {\n    setPomodoroState(prev => ({\n      ...prev,\n      time: pomodoroSettings.workTime * 60 * 1000,\n      isRunning: false,\n      mode: 'work',\n      currentCycle: 1\n    }));\n    playSound();\n  };\n\n  const addAlarm = () => {\n    if (newAlarmTime && !alarms.some(a => a.time === newAlarmTime)) {\n      // Alarm zamanının geçmişte olup olmadığını kontrol et\n      const now = new Date();\n      const [hours, minutes] = newAlarmTime.split(':').map(Number);\n      const alarmDate = new Date();\n      alarmDate.setHours(hours, minutes, 0, 0);\n      \n      if (alarmDate <= now) {\n        toast({\n          title: 'Geçersiz Alarm Saati',\n          description: 'Geçmiş bir saat için alarm kuramazsınız.',\n          variant: 'destructive'\n        });\n        return;\n      }\n      \n      setAlarms(prev => [...prev, {\n        time: newAlarmTime,\n        sound: alarmSound,\n        enabled: true\n      }]);\n      setNewAlarmTime('');\n    }\n  };\n\n  const removeAlarm = (time: string) => {\n    setAlarms(prev => prev.filter(a => a.time !== time));\n  };\n\n  const toggleAlarm = (time: string) => {\n    setAlarms(prev => prev.map(a => \n      a.time === time ? { ...a, enabled: !a.enabled } : a\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background via-background to-secondary/20\">\n      {showConfetti && (\n        <Confetti\n          width={window.innerWidth}\n          height={window.innerHeight}\n          recycle={false}\n          numberOfPieces={200}\n          gravity={0.1}\n        />\n      )}\n      <Header />\n      \n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        <div className=\"mb-8 text-center\">\n          <h1 className=\"text-4xl font-bold mb-3 bg-gradient-to-r from-primary via-purple-600 to-blue-600 bg-clip-text text-transparent flex items-center justify-center gap-3\">\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n            Sayaç Merkezi\n            <Sparkles className=\"h-10 w-10 text-primary animate-pulse\" />\n          </h1>\n          <p className=\"text-lg text-muted-foreground\">Pomodoro, Kronometre ve Alarm ile derse fokuslanabilir,süre ölçebilir,alarm kurabilirim.</p>\n        </div>\n\n        {/* Modern Ses Kontroller */}\n        <div className=\"mb-8 flex items-center justify-center\">\n          <div className=\"bg-card/50 backdrop-blur-sm border border-border/50 rounded-2xl p-4 shadow-lg\">\n            <div className=\"flex items-center gap-6\">\n              <div className=\"flex items-center gap-3\">\n                <Switch \n                  checked={soundEnabled} \n                  onCheckedChange={setSoundEnabled}\n                  className=\"data-[state=checked]:bg-primary\"\n                />\n                <div className=\"flex items-center gap-2\">\n                  {soundEnabled ? \n                    <Volume2 className=\"h-5 w-5 text-primary\" /> : \n                    <VolumeX className=\"h-5 w-5 text-muted-foreground\" />\n                  }\n                  <span className=\"font-medium\">Ses Efektleri</span>\n                </div>\n              </div>\n              \n              <div className=\"h-6 w-px bg-border\" />\n              \n              <div className=\"flex items-center gap-2\">\n                <span className=\"text-sm font-medium\">Alarm Sesi:</span>\n                <Select value={alarmSound} onValueChange={setAlarmSound}>\n                  <SelectTrigger className=\"w-32 border-primary/20 focus:border-primary\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"beep\">🔊 Bip</SelectItem>\n                    <SelectItem value=\"chime\">🔔 Çan</SelectItem>\n                    <SelectItem value=\"bell\">🔔 Zil</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 h-14 bg-card/30 backdrop-blur-sm border border-border/50 rounded-2xl p-2 shadow-lg\">\n            <TabsTrigger \n              value=\"stopwatch\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-blue-500 data-[state=active]:to-cyan-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <TimerIcon className=\"h-5 w-5\" />\n              ⏱️ Kronometre\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"pomodoro\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-red-500 data-[state=active]:to-pink-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <Target className=\"h-5 w-5\" />\n              🍅 Pomodoro\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"alarm\" \n              className=\"flex items-center gap-2 rounded-xl font-semibold data-[state=active]:bg-gradient-to-r data-[state=active]:from-orange-500 data-[state=active]:to-yellow-500 data-[state=active]:text-white data-[state=active]:shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              <AlarmClock className=\"h-5 w-5\" />\n              ⏰ Alarm\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Kronometre */}\n          <TabsContent value=\"stopwatch\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-blue-50/30 dark:to-blue-950/30 backdrop-blur-sm border-2 border-blue-200/30 dark:border-blue-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-blue-500/10 to-cyan-500/10 rounded-t-lg border-b border-blue-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Zap className=\"h-6 w-6 text-blue-500\" />\n                  ⏱️ Kronometre\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Zaman tutma ve tur kaydetme ile performansını ölç</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-8\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-blue-600 via-cyan-500 to-blue-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(stopwatchState.time)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-blue-500/20 to-cyan-500/20 blur-xl rounded-full opacity-60\"></div>\n                    \n                    {/* Hedef İlerleme Göstergesi */}\n                    {timerGoal > 0 && (\n                      <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-50 to-indigo-50 dark:from-purple-950/30 dark:to-indigo-950/30 rounded-xl border border-purple-200 dark:border-purple-800/50\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">🎯 Hedef: {timerGoal} dakika</span>\n                          <span className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">\n                            {((stopwatchState.time / (timerGoal * 60 * 1000)) * 100).toFixed(1)}%\n                          </span>\n                        </div>\n                        <div className=\"w-full bg-purple-200 dark:bg-purple-800/50 rounded-full h-3 overflow-hidden\">\n                          <div \n                            className={`h-full rounded-full transition-all duration-500 ${\n                              goalAchieved \n                                ? 'bg-gradient-to-r from-green-400 to-emerald-500 animate-pulse' \n                                : 'bg-gradient-to-r from-purple-500 to-indigo-600'\n                            }`}\n                            style={{\n                              width: `${Math.min(100, (stopwatchState.time / (timerGoal * 60 * 1000)) * 100)}%`\n                            }}\n                          />\n                        </div>\n                        {goalAchieved && (\n                          <div className=\"mt-2 text-center text-green-600 dark:text-green-400 font-bold animate-bounce\">\n                            🎉 Tebrikler! Hedefe ulaştın! 🎉\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  {/* Hedef Belirleme Bölümü */}\n                  <div className=\"mb-6 p-4 bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-950/30 dark:to-orange-950/30 rounded-xl border border-yellow-200 dark:border-yellow-800/50\">\n                    <div className=\"flex items-center justify-center gap-2 mb-3\">\n                      <Target className=\"h-5 w-5 text-orange-600\" />\n                      <h3 className=\"text-lg font-bold text-orange-800 dark:text-orange-200\">Zaman Hedefi Belirle</h3>\n                    </div>\n                    <div className=\"flex items-center gap-3 justify-center\">\n                      <Input\n                        type=\"number\"\n                        value={goalInput}\n                        onChange={(e) => setGoalInput(e.target.value)}\n                        placeholder=\"Dakika\"\n                        className=\"w-24 text-center font-bold border-orange-300 focus:border-orange-500 dark:border-orange-700\"\n                        min=\"1\"\n                        max=\"1440\"\n                      />\n                      <span className=\"text-sm font-medium text-orange-700 dark:text-orange-300\">dakika</span>\n                      <Button\n                        onClick={setTimerGoalHandler}\n                        size=\"sm\"\n                        className=\"bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 text-white font-bold px-4 py-2 rounded-lg shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        🎯 Hedef Ayarla\n                      </Button>\n                      {timerGoal > 0 && (\n                        <Button\n                          onClick={() => {\n                            setTimerGoal(0);\n                            setGoalAchieved(false);\n                            setShowConfetti(false);\n                            toast({\n                              title: 'Hedef Temizlendi',\n                              description: 'Zaman hedefi kaldırıldı.',\n                            });\n                          }}\n                          size=\"sm\"\n                          variant=\"outline\"\n                          className=\"border-red-300 text-red-600 hover:bg-red-50 dark:border-red-700 dark:text-red-400 dark:hover:bg-red-950/30\"\n                        >\n                          ❌ Temizle\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!stopwatchState.isRunning ? (\n                      <Button \n                        onClick={handleStopwatchStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handleStopwatchPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    {stopwatchState.isRunning && (\n                      <Button \n                        onClick={handleStopwatchLap} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-purple-500 to-indigo-500 hover:from-purple-600 hover:to-indigo-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Plus className=\"mr-2 h-6 w-6\" />\n                        🏃 Tur\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handleStopwatchReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                {stopwatchState.laps.length > 0 && (\n                  <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-blue-200/30\">\n                    <h3 className=\"font-bold text-xl mb-4 text-center bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">🏁 Tur Kayıtları</h3>\n                    <div className=\"max-h-80 overflow-y-auto space-y-3\">\n                      {stopwatchState.laps.map((lap, index) => (\n                        <div key={lap.id} className={`flex justify-between items-center p-4 rounded-lg shadow-md transition-all duration-300 hover:scale-102 ${\n                          index === 0 ? 'bg-gradient-to-r from-yellow-100 to-amber-100 dark:from-yellow-900/30 dark:to-amber-900/30 border border-yellow-300/50' : \n                          'bg-gradient-to-r from-slate-50 to-gray-100 dark:from-slate-800 dark:to-gray-800 border border-slate-200/50 dark:border-slate-700/50'\n                        }`}>\n                          <div className=\"flex items-center gap-3\">\n                            <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm ${\n                              index === 0 ? 'bg-yellow-500 text-white' : 'bg-blue-500 text-white'\n                            }`}>\n                              {lap.id}\n                            </div>\n                            <span className=\"font-semibold\">Tur {lap.id}</span>\n                          </div>\n                          <div className=\"flex gap-6\">\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Ara Zaman</div>\n                              <span className=\"font-mono font-bold text-lg\">{formatTime(lap.split)}</span>\n                            </div>\n                            <div className=\"text-right\">\n                              <div className=\"text-xs text-muted-foreground\">Toplam</div>\n                              <span className=\"font-mono text-muted-foreground\">{formatTime(lap.time)}</span>\n                            </div>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Pomodoro */}\n          <TabsContent value=\"pomodoro\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-red-50/30 dark:to-red-950/30 backdrop-blur-sm border-2 border-red-200/30 dark:border-red-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-red-500/10 to-pink-500/10 rounded-t-lg border-b border-red-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <Target className=\"h-6 w-6 text-red-500\" />\n                  🍅 Pomodoro Tekniği\n                </CardTitle>\n                <CardDescription className=\"text-lg\">\n                  {pomodoroState.mode === 'work' && '💪 Çalışma süresi - Odaklan!'}\n                  {pomodoroState.mode === 'break' && '☕ Kısa mola - Nefes al!'}\n                  {pomodoroState.mode === 'longBreak' && '🏖️ Uzun mola - Dinlen!'}\n                  {' - Döngü ' + pomodoroState.currentCycle}\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"text-center\">\n                  <div className=\"relative mb-6\">\n                    <div className=\"text-7xl font-mono font-bold tracking-wider bg-gradient-to-r from-red-600 via-pink-500 to-red-700 bg-clip-text text-transparent drop-shadow-lg\">\n                      {formatTime(pomodoroState.time, false)}\n                    </div>\n                    <div className=\"absolute -inset-4 bg-gradient-to-r from-red-500/20 to-pink-500/20 blur-xl rounded-full opacity-60\"></div>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-3 mb-8\">\n                    <Badge \n                      variant={pomodoroState.mode === 'work' ? 'default' : 'secondary'}\n                      className={`px-6 py-2 text-lg font-semibold ${\n                        pomodoroState.mode === 'work' \n                          ? 'bg-gradient-to-r from-red-500 to-pink-500 text-white shadow-lg' \n                          : pomodoroState.mode === 'break'\n                          ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white shadow-lg'\n                          : 'bg-gradient-to-r from-blue-500 to-cyan-500 text-white shadow-lg'\n                      }`}\n                    >\n                      {pomodoroState.mode === 'work' && '💪 Çalışma Zamanı'}\n                      {pomodoroState.mode === 'break' && '☕ Kısa Mola'}\n                      {pomodoroState.mode === 'longBreak' && '🏖️ Uzun Mola'}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex justify-center gap-4 mb-8\">\n                    {!pomodoroState.isRunning ? (\n                      <Button \n                        onClick={handlePomodoroStart} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-green-500 to-emerald-500 hover:from-green-600 hover:to-emerald-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                      >\n                        <Play className=\"mr-2 h-6 w-6\" />\n                        🚀 Başlat\n                      </Button>\n                    ) : (\n                      <Button \n                        onClick={handlePomodoroPause} \n                        size=\"lg\" \n                        className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-yellow-500 to-orange-500 hover:from-yellow-600 hover:to-orange-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                      >\n                        <Pause className=\"mr-2 h-6 w-6\" />\n                        ⏸️ Duraklat\n                      </Button>\n                    )}\n                    \n                    <Button \n                      onClick={handlePomodoroReset} \n                      size=\"lg\" \n                      className=\"px-10 py-4 text-lg font-semibold bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105 text-white\"\n                    >\n                      <RotateCcw className=\"mr-2 h-6 w-6\" />\n                      🔄 Sıfırla\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"bg-gradient-to-br from-muted/50 to-slate-100/50 dark:to-slate-800/50 rounded-xl p-6 backdrop-blur-sm border border-red-200/30\">\n                  <h3 className=\"font-bold text-xl mb-6 text-center bg-gradient-to-r from-red-600 to-pink-600 bg-clip-text text-transparent\">⚙️ Ayarlar</h3>\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        💪 Çalışma (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.workTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          workTime: parseInt(e.target.value) || 25\n                        }))}\n                        min=\"1\"\n                        max=\"60\"\n                        className=\"border-red-200/50 focus:border-red-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        ☕ Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.breakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          breakTime: parseInt(e.target.value) || 5\n                        }))}\n                        min=\"1\"\n                        max=\"30\"\n                        className=\"border-green-200/50 focus:border-green-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🏖️ Uzun Mola (dk)\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.longBreakTime}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          longBreakTime: parseInt(e.target.value) || 15\n                        }))}\n                        min=\"5\"\n                        max=\"60\"\n                        className=\"border-blue-200/50 focus:border-blue-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm font-semibold flex items-center gap-2\">\n                        🔄 Döngü Sayısı\n                      </label>\n                      <Input\n                        type=\"number\"\n                        value={pomodoroSettings.cycles}\n                        onChange={(e) => setPomodoroSettings(prev => ({\n                          ...prev,\n                          cycles: parseInt(e.target.value) || 4\n                        }))}\n                        min=\"1\"\n                        max=\"10\"\n                        className=\"border-purple-200/50 focus:border-purple-500 font-mono text-center text-lg\"\n                      />\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Alarm */}\n          <TabsContent value=\"alarm\" className=\"mt-6\">\n            <Card className=\"bg-gradient-to-br from-card/70 via-card/50 to-orange-50/30 dark:to-orange-950/30 backdrop-blur-sm border-2 border-orange-200/30 dark:border-orange-800/30 shadow-2xl\">\n              <CardHeader className=\"text-center bg-gradient-to-r from-orange-500/10 to-yellow-500/10 rounded-t-lg border-b border-orange-200/30\">\n                <CardTitle className=\"text-2xl font-bold bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent flex items-center justify-center gap-2\">\n                  <AlarmClock className=\"h-6 w-6 text-orange-500\" />\n                  ⏰ Alarm Merkezi\n                </CardTitle>\n                <CardDescription className=\"text-lg\">Alarm kur ve zamanında uyarı al</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-8 pt-8\">\n                <div className=\"bg-gradient-to-r from-orange-100/50 to-yellow-100/50 dark:from-orange-900/30 dark:to-yellow-900/30 rounded-xl p-6 backdrop-blur-sm border border-orange-200/50\">\n                  <h3 className=\"font-bold text-lg mb-4 text-center text-orange-700 dark:text-orange-300\">➕ Yeni Alarm Ekle</h3>\n                  <div className=\"flex gap-4\">\n                    <Input\n                      type=\"time\"\n                      value={newAlarmTime}\n                      onChange={(e) => setNewAlarmTime(e.target.value)}\n                      onClick={() => {\n                        if (!newAlarmTime) {\n                          const now = new Date();\n                          const currentTime = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;\n                          setNewAlarmTime(currentTime);\n                        }\n                      }}\n                      placeholder=\"HH:MM\"\n                      className=\"text-2xl font-mono text-center border-orange-200/50 focus:border-orange-500 bg-white/70 dark:bg-slate-800/70\"\n                    />\n                    <Button \n                      onClick={addAlarm} \n                      disabled={!newAlarmTime}\n                      className=\"px-8 py-3 text-lg font-semibold bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600 shadow-lg hover:shadow-xl transition-all duration-300 hover:scale-105\"\n                    >\n                      <Plus className=\"mr-2 h-5 w-5\" />\n                      🔔 Ekle\n                    </Button>\n                  </div>\n                </div>\n\n                {alarms.length > 0 && (\n                  <div className=\"space-y-4\">\n                    <h3 className=\"font-bold text-xl text-center bg-gradient-to-r from-orange-600 to-yellow-600 bg-clip-text text-transparent\">📅 Aktif Alarmlar</h3>\n                    <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                      {alarms.map((alarm, index) => (\n                        <div key={alarm.time} className={`flex items-center justify-between p-6 rounded-xl shadow-lg transition-all duration-300 hover:scale-102 ${\n                          alarm.enabled \n                            ? 'bg-gradient-to-r from-green-100 to-emerald-100 dark:from-green-900/40 dark:to-emerald-900/40 border-2 border-green-300/50' \n                            : 'bg-gradient-to-r from-gray-100 to-slate-100 dark:from-gray-800/50 dark:to-slate-800/50 border-2 border-gray-300/50'\n                        }`}>\n                          <div className=\"flex items-center gap-6\">\n                            <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-lg shadow-lg ${\n                              alarm.enabled ? 'bg-gradient-to-r from-green-500 to-emerald-500 text-white' : 'bg-gray-400 text-white'\n                            }`}>\n                              ⏰\n                            </div>\n                            <div>\n                              <div className=\"text-3xl font-mono font-bold text-foreground\">\n                                {alarm.time}\n                              </div>\n                              <Badge \n                                variant={alarm.enabled ? 'default' : 'secondary'}\n                                className={`mt-1 ${\n                                  alarm.enabled \n                                    ? 'bg-gradient-to-r from-orange-500 to-yellow-500 text-white' \n                                    : 'bg-gray-400 text-white'\n                                }`}\n                              >\n                                🔊 {alarm.sound}\n                              </Badge>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center gap-4\">\n                            <div className=\"flex flex-col items-center gap-2\">\n                              <Switch\n                                checked={alarm.enabled}\n                                onCheckedChange={() => toggleAlarm(alarm.time)}\n                                className=\"data-[state=checked]:bg-green-500\"\n                              />\n                              <span className=\"text-xs font-medium\">\n                                {alarm.enabled ? '🟢 Aktif' : '🔴 Pasif'}\n                              </span>\n                            </div>\n                            <Button \n                              size=\"lg\" \n                              variant=\"destructive\"\n                              onClick={() => removeAlarm(alarm.time)}\n                              className=\"bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 shadow-lg hover:shadow-xl transition-all duration-300\"\n                            >\n                              <Trash2 className=\"h-5 w-5\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                )}\n\n                {alarms.length === 0 && (\n                  <div className=\"text-center py-12\">\n                    <div className=\"text-6xl mb-4\">⏰</div>\n                    <h3 className=\"text-xl font-bold text-muted-foreground mb-2\">Henüz Alarm Yok</h3>\n                    <p className=\"text-muted-foreground\">Ekle butonu ile yeni bir alarm ekleyerek başla!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":43335},"client/src/styles/compact-cards.css":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n/* Kompakt sınav kartı stilleri */\n.compact-exam-card {\n  min-height: 120px;\n  max-width: 180px;\n}\n\n.compact-exam-card:hover {\n  transform: scale(1.02);\n  transition: all 0.2s ease;\n}\n\n/* Kompakt kartlarda metin taşmasını önle */\n.compact-exam-card .truncate {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":603},"client/src/components/ui/accordion.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n ","size_bytes":2242},"client/src/components/ui/alert-dialog.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":4685},"client/src/components/ui/alert.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1848},"client/src/components/ui/aspect-ratio.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":404},"client/src/components/ui/avatar.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1683},"client/src/components/ui/badge.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1392},"client/src/components/ui/breadcrumb.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2976},"client/src/components/ui/button.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2165},"client/src/components/ui/calendar.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2959},"client/src/components/ui/card.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2122},"client/src/components/ui/carousel.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":6474},"client/src/components/ui/chart.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\n// BERAT ÇAKIROĞLU\n// BERAT CAKIROGLU OZEL ANALIZ SISTEMI\n\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":10806},"client/src/components/ui/checkbox.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1320},"client/src/components/ui/collapsible.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":593},"client/src/components/ui/command.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":5149},"client/src/components/ui/context-menu.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":7692},"client/src/components/ui/dialog.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":4112},"client/src/components/ui/drawer.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":3285},"client/src/components/ui/dropdown-menu.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":7873},"client/src/components/ui/form.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":4384},"client/src/components/ui/hover-card.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1515},"client/src/components/ui/input-otp.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2418},"client/src/components/ui/input.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1055},"client/src/components/ui/label.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":974},"client/src/components/ui/menubar.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":8869},"client/src/components/ui/navigation-menu.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":5392},"client/src/components/ui/pagination.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":3015},"client/src/components/ui/popover.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1544},"client/src/components/ui/progress.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1055},"client/src/components/ui/radio-group.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1731},"client/src/components/ui/resizable.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1987},"client/src/components/ui/scroll-area.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1906},"client/src/components/ui/select.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":6006},"client/src/components/ui/separator.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1020},"client/src/components/ui/sheet.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":4545},"client/src/components/ui/sidebar.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // kenar çubuğunun iç durumu\n    // Eğer open prop'u vermişsem, bu controlled modda demek ve openProp kullanır\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // Bu, kenar çubuğunun durumunu korumak için çerezi ayarlar.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Kenar çubuğunu açıp kapatmak için yardımcı işlev.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Kenar çubuğunu açıp kapatmak için bir klavye kısayolu ekler.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // Kenar çubuğunun durumunu ayarlamak için bir state ekliyoruz, böylece data-state=\"expanded\" veya \"collapsed\" yapabiliriz.\n    // Bu, kenar çubuğunu Tailwind sınıflarıyla stil vermeyi kolaylaştırır.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* Bu, masaüstünde kenar çubuğu boşluğunu yönetir */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Floating ve inset varyantları için padding'i ayarlayın.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Mobilde butonun etki alanını artırır.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Mobilde butonun etki alanını artırır.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // 50 ile 90% arasında rastgele genişlik.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":23960},"client/src/components/ui/skeleton.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":525},"client/src/components/ui/slider.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1341},"client/src/components/ui/switch.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1403},"client/src/components/ui/table.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":3029},"client/src/components/ui/tabs.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2147},"client/src/components/ui/textarea.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":953},"client/src/components/ui/toast.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":5109},"client/src/components/ui/toaster.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1036},"client/src/components/ui/toggle-group.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":2017},"client/src/components/ui/toggle.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\nimport * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1791},"client/src/components/ui/tooltip.tsx":{"content":"//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n//BERATCAKIROGLU OZEL ANALİZ TAKIP SISTEMI\n","size_bytes":1473}},"version":1}